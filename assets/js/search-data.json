{
  
    
        "post0": {
            "title": "Java Fundamentals - Notes Part 1",
            "content": "1. A Hello World Program . Notes: . The System.out.println() method is a default Java method that prints whatever is specified in its parameter on a new line. | If you want to print a String, wrap it within double quotes inside the println parameter. Note single quotes are for characters, not Strings. | . Examples: . public class Application { public static void main(String[] args) { System.out.println(&quot;Hello, World!&quot;); } } Application.main(null); . Hello, World! . 2. Using Variables . Notes: . Variables are essentially containers that can store values. | Different variable types are like containers that store different types of values. | You can declare and initialize variables on the same line of code (e.g. int myNumber = 7;). | There are 8 primitive data types in Java: byte (8-bit integer), short (16-bit integer), int (32-bit integer), long (64-bit integer), float (32-bit single-precision floating point, can contain decimals), double (64-bit double-precision floating point, can contain decimals), boolean (can only contain two possible values: true or false), and char (16-bit Unicode character). | . Examples: . public class Application { public static void main(String[] args) { // Declare variable int myNumber; // Initialize variable value myNumber = 7; // Output variable value System.out.println(myNumber); // Different variable types int myNumber2 = 8; short myShort = 777; long myLong = 9797; double myDouble = 3.1415; // Include the f at the end of the value float myFloat = 324.3f; char myChar = &#39;A&#39;; boolean myBoolean = true; byte myByte = 127; System.out.println(myNumber2); System.out.println(myShort); System.out.println(myLong); System.out.println(myDouble); System.out.println(myFloat); System.out.println(myChar); System.out.println(myBoolean); System.out.println(myByte); } } Application.main(null); . 7 8 777 9797 3.1415 324.3 A true 127 . Strings: Working with Text . Notes: . String is a class, or a type of object. More specifically, it is a non-primitive data type in Java. | Concatenation is the action of combining multiple Strings together to form a new String, which is done by appending the next String to the end of the previous String. | The System.out.println() function can be used to print out other variable types (e.g. int). | . Examples: . public class Application { public static void main(String[] args) { int myInt = 7; // String is the class, and &quot;Hello&quot; is an instance of the String object. String text = &quot;Hello&quot;; String blank = &quot; &quot;; String name = &quot;Bob&quot;; //Concatenation of Strings String greeting = text + blank + name; double myDouble = 7.1; System.out.println(greeting); System.out.println(&quot;Hello&quot; + &quot; &quot; + &quot;Bob&quot;); // Printing out different variable types. Notice that the values of myInt and myDouble are printed as is. System.out.println(&quot;My integer is: &quot; + myInt); System.out.println(&quot;My number is: &quot; + myDouble); } } Application.main(null); . Hello Bob Hello Bob My integer is: 7 My number is: 7.1 . While Loops . Notes: . Note that there is a difference between parameters and arguments. The key distinction is that parameters are the variables written inside the functions definition, while arguments are the actual variable values passed to functions to run them. | The argument written in a while loop is the condition it needs to satisfy in order to keep looping. | However, certain variables, primarily the ones contained within the condition, need to be changed during iterations for the sake of preventing an infinite loop (at some point, the condition needs to be false, so the loop stops). | . Examples: . public class Application { public static void main(String[] args) { int value = 0; // The boolean data type determine whether its value is true or false boolean loop = value &lt; 20; System.out.println(loop); // The while loop is followed with curly brackets instead of a semi-colon. This is for the sake of creating a block of code. while (value &lt; 10) { System.out.println(&quot;Number &quot; + value); // Increment by 1 value = value + 1; } } } Application.main(null); . true Number 0 Number 1 Number 2 Number 3 Number 4 Number 5 Number 6 Number 7 Number 8 Number 9 . For Loops . Notes: . Like the while loop, the for loop is followed by curly brackets. Within the brackets defines the code block that will be executed in each iteration of the loop. | The for loop contains 3 sections (inside the parenthesis following the for keyword). The 1st section defines what code is executed/initialized at the very beginning of the for loop. The 2nd section defines the condition, as long as the condition is true, the loop will keep iterating. The condition is checked at the start of each iteration. The 3rd section defines the code that is executed once after every iteration. The sections are separated by semi-colons, and not all sections need to have code within them. | The System.out.printf is a format specifier that takes multiple arguments. In our example, the first argument is a String, and the second argument is a value to fill in as the format specifier. Unlike println, it does not print values on a new line. | . Examples: . public class Application { public static void main(String[] args) { // i++ means increment i by 1. It is the same as i = i + 1. // After 5 iterations, the for loop will stop. // Iteration visualization: i = 0, i = 1, i = 2, i = 3, i = 4 (loop stops here, since in the next iteration, i equals 5, which is not less than 5). for (int i = 0; i &lt; 5; i++) { // Print out the string, but replace %d (int format specifier) with the value of i. // n indicates new line of the specified value is printed. System.out.printf(&quot;The value of i is: %d n&quot;, i); } } } Application.main(null); . 0 1 2 3 4 . If Statements . Notes: . When comparing primitive type values, use == and != to compare values. = is for assignment of values to variables. | To create an if statement, write the keyword if, then follow it up with circle brackets. Within the brackets lies the condition that must be true in order for the block of code following the if statement (typically within curly brackets) to run. | The else statement directly follows a complete if statement (after the code block of the if statement) or complete else if statement; it is the last conditional statement in a line of conditionals (when there is an if statement followed by one or more else if statements, all connected with each other in terms of the conditional process) and defines the code that will run if the condition in all the previous conditional statements are false. | An else if statement directly follows a complete if statement or another else if statement, and contains a new condition. If this new condition is met, the code within the else if code block will run. An else if statement will only run if the previous statements (if and else if) are false. | A general rule of thumb is that if you have a conditional line with if, else if, and else statements, only one of those conditional statements should run. But if you have multiple if statements following one another, there is a possibility that more than one of them will run, since there can be more than one condition that is met. | The break keyword &quot;breaks&quot; a loop, or stops a loop from continue executing. In other words, the program jumps out of the loop and continues from it. | . Examples: . public class Application { public static void main(String[] args) { // == indicates that the 2 values are equal to each other, while != indicates that the 2 values are not equal to each other. boolean cond = 5 != 2; System.out.println(cond); int myInt = 5; // The statement &quot;Yes, it&#39;s true!&quot;&quot; will print because the value of myInt, 5, is in fact less than 30. if (myInt &lt; 30) { System.out.println(&quot;Yes, it&#39;s true!&quot;); } int num = 15; if (num &lt; 10) { System.out.println(&quot;True&quot;); } else if (num &gt; 20) { System.out.println(&quot;False&quot;); } else { System.out.println(&quot;None of the above&quot;); } int loop = 0; // This while loop will become an infinite loop without the break statement, since the value true is always true. while (true) { System.out.println(&quot;Looping: &quot; + loop); if (loop == 5) { // Stop loop execution once loop has a value of 5 break; } // Increment loop by 1 in each iteration loop++; System.out.println(&quot;Running&quot;); } } } Application.main(null); . true Yes, it&#39;s true! None of the above Looping: 0 Running Looping: 1 Running Looping: 2 Running Looping: 3 Running Looping: 4 Running Looping: 5 . Getting User Input . Notes: . To get user input in Java, the Scanner library in Java can be used. To import java libraries, use the import keyword followed by the reference to the library. | To import the Scanner class, type import java.util.Scanner, since the Scanner library is a part of the java.util package. | The Scanner library creates a prompt on which users can type on. The new keyword creates a new object of a referenced class. System.in is an argument passed to the Scanner constructor, and is an input stream object. | nextLine(), nextInt(), and nextDouble() are all example methods of the Scanner class that store user inputs into variables of specific data types. | . Examples: . import java.util.Scanner; public class Application { public static void main(String[] args) { // Create Scanner object variable called &quot;input&quot; of class type Scanner Scanner input = new Scanner(System.in); // Prompt user for input System.out.println(&quot;Enter a line of text: &quot;); // nextLine() is a method of the Scanner class, that stores whatever the user types into a variable of type String String line = input.nextLine(); System.out.println(&quot;Enter an integer: &quot;); // nextInt() is another method of the Scanner class that stores user input into variable of type integer. // The program will crash, however, in the case that the user does not input a valid integer. An exception will be thrown. // The program, therefore, currently isn&#39;t very robust. The Scanner does a method that solves this problem. int myInt = input.nextInt(); // Usage of nextDouble() to store double type values that users input System.out.println(&quot;Enter a double: &quot;); double value = input.nextDouble(); // Concatenation of user input values System.out.println(&quot;You wrote: &quot; + line + &quot;-&quot; + myInt + &quot;-&quot; + value); } } Application.main(null); . Enter a line of text: Enter an integer: Enter a double: You wrote: Hey-7-7.7 . Do While . Notes: . In Java, for variables in the same scope of code, each variable has to have a unique name (case-sensitive). | To multi-line comment in Java, type / /, and anything between that container will pass as a comment. | In a do while loop, the statement within the do code block will always execute at least once, since the condition within the while keyword comes after the do keyword. After one execution, the condition in the while loop will be checked. If the condition is still true, then the code block will run again, and the condition will be checked again, and repeat. | A variable only exists within the inner-most brackets in which it is declared. It does however, exist within brackets that appear within the inner-most brackets that it itself is contained in (kinda like lower scopes or child brackets). For example, variables within global scope typically exist within the scopes created by functions inside the global scope. | . Examples: . public class Application { public static void main(String[] args) { Scanner input = new Scanner(System.in); /*System.out.println(&quot;Enter a number: &quot;); int value = input.nextInt(); while (value != 5) { System.out.println(&quot;Enter a number: &quot;); // No need to declare the variable value, since it has already been defined by type int. Here, its value is updated. value = input.nextInt(); }*/ // Variable scope accounted for, so that the variable value exists within the do while statement int value = 0; // do statement is always executed at least once. After one execution the while condition is checked. do { System.out.println(&quot;Enter a number: &quot;); value = input.nextInt(); System.out.println(value); } while(value != 5); System.out.println(&quot;Got 5!&quot;); } } Application.main(null); . Enter a number: 7 Enter a number: 8 Enter a number: 5 Got 5! . Switch . Notes: . The switch statement allows you to define a variety of actions that can be taken depending on a particular value. | The argument passed to a switch statement is typically a variable name. Within the switch, case keywords are used to define different possible values of that variable, as well as the actions that will be taken if the variable happens to have their respective value. The break keyword should be used at the end of each case to prevent more than one case action being run (if you only want one case to be run). You can have multiple cases for each switch statement. | The default keyword is used within a switch statement, acting sort of like a case itself and defining the code that will be run if none of the cases are met. | The values defined by cases need to constant. In other words, they are usually constant values of the variable passed to the switch statement. | . Examples: . public class Application { public static void main(String[] args) { Scanner input = new Scanner(System.in); // The most common variable types that are checked by a switch statement are String and int. System.out.println(&quot;Please enter a command: &quot;); String text = input.nextLine(); System.out.println(text); switch (text) { // Indent code block under each case for proper syntax. case &quot;start&quot;: System.out.println(&quot;Machine started!&quot;); break; case &quot;stop&quot;: System.out.println(&quot;Machine stopped!&quot;); break; default: System.out.println(&quot;Command not recognized&quot;); } } } Application.main(null); . Please enter a command: start Machine started! . Arrays . Notes: . The key distinction between value types (e.g. int) and reference types (e.g. arrays) is that memory is created to hold value types, while reference types refer to a list of value types. So, think of a value type as a bucket that stores something, and a reference type as sort of a label that refers to value types. | The values within an array allocate memory to value types. | In Java, arrays and many other data structures followed 0-based indexing, where the 1st element is located at the 0th index, 2nd is located at the 1st index, and so on. | . Examples: . public class Application { public static void main(String[] args) { // int value type int value = 7; // Declare array that stores values of type int. int[] values; // Initialize array values to have a size of 3 int values. The new keyword allocates a specified amount of memory. values = new int[3]; // Access the element at the 0th index of the array. Java sets the default value for arrays to 0. System.out.println(values[0]); // Change the element at index 0 to 10. values[0] = 10; values[1] = 20; values[2] = 30; System.out.println(values[0]); System.out.println(values[1]); System.out.println(values[2]); // Iterating through the array, making sure to access the elements at all indexes in the array. // The length method returns the size of the array. for (int i = 0; i &lt; values.length; i++) { System.out.println(values[i]); } // Initializing an array in one line. Allocating memory and setting data values at the same time. int[] numbers = {5, 6, 7}; for (int i = 0; i &lt; numbers.length; i++) { System.out.println(numbers[i]); } } } Application.main(null); . 0 10 20 30 10 20 30 5 6 7 . Arrays of Strings . Notes: . Enhanced for loops are an alternative way (alternate to the conventional for loop) of iterating through an array. In an enhanced for loop, the counter is always incremented by one, which means the loop executes in sequence. Nonetheless, it still simplifies the process of array iteration. | The core difference between instantiation and initialization is that instantiation involves creating an object of a particular class using the new keywords, while initialization involves assigned a value to a particular variable. | For primitive data types, the variable stores enough memory to hold any valid (within integer size constraints) integer value. Integer is a primitive type, as indicated by the lowercase declaration of int. | String is a non-primitive data type, as indicated by the capitalization in the declaration of String. Non-primitive data types allocate enough memory for a reference (the program does not initially know how long the string will be based on the declaration), or address, to some values. | To recap, reference variable types store references to the actual data, while value type variable directly store the actual data. When working with reference types, it is possible for two variables to reference the same data (objects), which means that changes to one variable can impact the object referenced by the other variable. | The main difference between primitive types and non-primitive data types is that primitive types are predefined (enough memory for data is allocated during declaration), while non-primitive types are not predefined, as their values are specified by the programmer. | . Examples: . public class Application { public static void main(String[] args) { // Declare an array that stores String value types, and has a size of 3. String[] words = new String[3]; words[0] = &quot;Hello&quot;; words[1] = &quot;to&quot;; words[2] = &quot;you&quot;; System.out.println(words[2]); // Each String value type is wrapped within double quotation marks. String[] fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;kiwi&quot;}; // Enhanced for loop - The : symbol indicates &quot;in&quot;. For every &quot;fruit&quot; or value in the array &quot;fruits&quot;, print it to the console. for(String fruit : fruits) { System.out.println(fruit); } // Non-primitive type int int value = 123; // Non-primitive type String. The null value means the variable points to &quot;nothing&quot; String text = null; System.out.println(text); // An array further references String data type references to actual values. The array is allocating enough memory for 2 references to String values. String[] texts = new String[2]; // Java sets the default values for Strings in an array to 0. System.out.println(texts[0]); // Change the value of the element at the 0th index to &quot;one&quot;, causing the array to allocate memory to a String reference to an actual String value (memory). texts[0] = &quot;one&quot;; } } Application.main(null); . you apple banana pear kiwi null null .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/20/2023-Java-Fundamentals-Part-1.html",
            "relUrl": "/jupyter/2023/05/20/2023-Java-Fundamentals-Part-1.html",
            "date": " • May 20, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Intelligence AI Post",
            "content": "import java.util.Scanner; public class Data { private HashMap&lt;String, String&gt; replies; private String[] greetings = {&quot;Hello&quot;, &quot;Hey&quot;, &quot;Hi&quot;, &quot;What&#39;s up&quot;, &quot;Howdy&quot;}; private String[] convoStarters = { &quot;How has your day been&quot; }; public String[] getGreetings() { return greetings; } public String[] getConvoStarters() { return convoStarters; } } public class Physics { public double kinematics() { } } public class Intelligence { private String mode; private Data data; private Physics phys; public Scanner userInput = new Scanner(System.in); public Intelligence(String m) { mode = m; data = new Data(); } public void initialize() { switch (mode) { case &quot;conversation&quot;: conversation(); break; case &quot;physics&quot;: physics(); break; } } public void conversation() { int greetingIndex = (int) (Math.random() * (data.getGreetings().length)); System.out.println(data.getGreetings()[greetingIndex] + &quot; Dylan&quot;); int starterIndex = (int) (Math.random() * (data.getConvoStarters().length)); System.out.println(data.getConvoStarters()[starterIndex]); String talk = userInput.nextLine(); while (!(talk.equals(&quot;goodbye&quot;))) { System.out.println(talk); talk = userInput.nextLine().toLowerCase(); } } public void physics() { System.out.println(&quot;What kind of physics problem would you like me to solve, sir?&quot;); String physTopic = userInput.nextLine(); } public static void main(String[] args) { Intelligence ai = new Intelligence(&quot;physics&quot;); ai.initialize(); } } Intelligence.main(null); . Hello Dylan How has your day been good .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/05/Intelligence-AI.html",
            "relUrl": "/jupyter/2023/05/05/Intelligence-AI.html",
            "date": " • May 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "FRQ 2011 Post",
            "content": "// Part a public static int arraySum(int[] arr) { int sum = 0; for (int element : arr) { sum += element; } return sum; } // Part b public static int[] rowSums(int[][] arr2D) { int[] sums = new int[arr2D.length]; for (int i = 0; i &lt; arr2D.length; i++) { sums[i] = arraySum(arr2D[i]); } return sums; } // Part c public static boolean isDiverse(int[][] arr2D) { for (int i = 0; i &lt; rowSums[arr2D]; i++) { for (int j = i + 1; j &lt; rowSums[arr2D]; j++) { if (rowSums[arr2D][j] == rowSums[arr2D][i]) { return false; } } } return true; } . public class HiddenWord { private String hiddenWord; public HiddenWord(String word) { hiddenWord = word; } public static String getHint(String guess) { String hint = &quot;&quot;; for (int i = 0; i &lt; guess.length(); i++) { if (guess.charAt(i) == hiddenWord.charAt(i)) { hint += guess.charAt(i); } else if (word.contains(guess.charAt(i))) { hint += &quot;+&quot;; } else { hint += &quot;*&quot;; } } return hint; } } . // Part a public int getValueAt(int row, int col) { int value = 0; for (SparseArrayEntry item : entries) { if (item.getRow() == row &amp;&amp; item.getCol() == col) { value = item.getValue(); break; } } return value; } // Part b public void removeColumn(int col) { for (SpaceArrayEntry item : entries) { if (item.getCol() == col) { entries.remove(item); } else if (item.getCol() &gt; col) { item.getCol()--; } } } . // Part a public interface NumberGroup { public boolean contains(int num); } // Part b public class Range implements NumberGroup { private int[] nums; public Range(int min, int max) { nums = new int[max - min]; int i = min; int index = 0; while (i &lt;= max) { nums[index] = i; index++; i++; } } public int[] getNums() { return nums; } } // Part c public boolean contains(int num) { for (Range range : groupList) { if (nums &gt;= range.getNums()[0] &amp;&amp; nums &lt;= range.getNums()[range.getNums().length - 1]) { return true; } } return false; } . | | | // Part b | public class Range implements NumberGroup {} Range is not abstract and does not override abstract method contains(int) in NumberGroup . // Part a public boolean simulate() { int travel = 0; for (int i = 0; i &lt; maxHops; i++) { travel += hopDistance(); if (travel &gt;= goalDistance) { return true; } else if (travel &lt; 0) { return false; } } return false; } // Part b public double runSimulations(int num) { double proportion = 0; for (int i = 0; i &lt; num; i++) { if (simulate() == true) { proportion++; } } proportion /= num; return proportion; } . // Part a public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for (int i = 0; i &lt; words.length - 1; i++) { for (int j = i + 1; j &lt; words.length; j++) { WordPair pair = new WordPair(words[i], words[j]); allPairs.add(pair); } } } // Part b public int numMatches() { int matches = 0; for (WordPair pair : allPairs) { if (pair.getFirst().equals(pair.getSecond())) { matches++; } } return matches; } . // Part a public static int[] getColumn(int[][] arr2D, int c) { int[] column = new int[arr2D.length]; int index = 0; for (int[] row : arr2D) { column[index] = row[c]; index++; } return column; } // Part b public static boolean isLatin(int[][] square) { if (containsDuplicates(square[0]) == true) { return false; } for (int i = 1; i &lt; square.length; i++) { if (hasAllValues(square[0], square[i]) == false) { return false; } } for (int j = 0; j &lt; square[0].length; j++) { if (hasAllValues(square[0], getColumn(square, j)) == false) { return false; } } return true; } . public static int firstAvailableBlock(int period, int duration) { int minutes = 0; for (int i = 0; i &lt;= 59; i++) { if (freeMinute(period, i) == true) { minutes++; } else { minutes = 0; } if (minutes == duration) { return i - duration + 1; } } return -1; } . 12 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/02/FRQ-Practice.html",
            "relUrl": "/jupyter/2023/05/02/FRQ-Practice.html",
            "date": " • May 2, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "FRQ 2011 Post",
            "content": "2011 FRQ Question 1: . public class Level { public boolean goalReached() { } public int getPoints() { } } public class Game { private Level levelOne; private Level levelTwo; private Level levelThree; public Game() { } public boolean isBonus() { } public void play() { } public int getScore() { int score = 0; if (levelOne.goalReached() == true) { score += levelOne.getPoints(); if (levelTwo.goalReached() == true) { score += levelTwo.getPoints(); if (levelThree.goalReached() == true) { score += levelThree.getPoints(); } } } if (isBonus() == true) { score *= 3; } return score; } public int playManyTimes(int num) { int[] scores = new int[num]; int index = 0; for (int i = 0; i &lt; num; i++) { play(); scores[index] = getScore(); index++; } int high = scores[0]; for (int j = 0; j &lt; scores.length; j++) { if (scores[j] &gt; high) { high = scores[j]; } } return high; } } . public class Book { private String title; private double price; public Book() { } } public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int editionNumber) { super(bookTitle, bookPrice); edition = editionNumber; } public String getBookInfo() { return title + &quot;-&quot; + price + &quot;-&quot; + edition; } public int getEdition() { return edition; } public boolean canSubstituteFor(Textbook previousTextbook) { if (title.equals(previousTextbook.getTitle()) &amp;&amp; edition &gt;= previousTextbook.getEdition()) { return true; } return false; } } . public class ReviewAnalysis { private Review[] allReviews; public ReviewAnalysis() { } public double getAverageRating() { double average = 0; for (Review review : allReviews) { average += review.getRating(); } average /= (double) review.length; return average; } public ArrayList&lt;String&gt; collectComments() { ArrayList&lt;String&gt; comments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String finalString = &quot;&quot;; String comment = allReviews[i].getComment(); if (comment.contains(&quot;!&quot;) == true) { finalString += i + &quot;-&quot; + comment; if (comment.substring(comment.length() - 1).equals(&quot;!&quot;) || comment.substring(comment.length() - 1).equals(&quot;.&quot;)) { } } } } } . | } illegal start of statement | comments.add() &#39;;&#39; expected .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/01/FRQ-2011.html",
            "relUrl": "/jupyter/2023/05/01/FRQ-2011.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "FRQ 2012 Post",
            "content": "2012 FRQ Question 1: . public class ClimbInfo { // Initialization of parameters peakName and climbTime not shown public ClimbInfo(String peakName, int climbTime) { /* implementation not shown */ } public String getName() { /* implementation not shown */ } public int getTime() { /* implementation not shown */ } } public class ClimbingClub { private List&lt;ClimbInfo&gt; climbList; public ClimbingClub() { climbList = new ArrayList&lt;ClimbInfo&gt;(); } public void addClimb(String peakName, int climbTime) { /* part a ClimbInfo climb = new ClimbInfo(peakName, climbTime); climbList.add(climb); */ // part b // Instantiate new ClimbInfo object to store in the ArrayList ClimbInfo climb = new ClimbInfo(peakName, climbTime); // Loop through current items of ArrayList for (int i = 0; i &lt; climbList.size(); i++) { // Check where the new object should be inserted in order to maintain alphabetical order if (peakName.compareTo(climbList.get(i).getName()) &lt;= 0) { // Once the right position is found, insert the new object into that position, and adjust the other elements as needed // Instantiate temp which will hold the next element that will be moved ClimbInfo temp = climbList.get(i); // current marks the element to be currently moved ClimbInfo current = climb; for (int j = i; j &lt; climbList.size(); j++) { // Set current index with the currently moved element climbList.set(j, current); // Set current to temp to get ready for the next iteration current = temp; // If at last index, add current as a new element to ArrayList if (j == climbList.size() - 1) { climbList.add(current); } else { // Else, set next element to be moved to temp temp = climbList.get(j + 1); } } break; } } } public int distinctPeakNames() { // Given implementation if (climbList.size() == 0) { return 0; } ClimbInfo currInfo = climbList.get(0); String prevName = currInfo.getName(); String currName = null; int numNames = 1; for (int k = 1; k &lt; climbList.size(); k++) { currInfo = climbList.get(k); currName = currInfo.getName(); // Check if object next to current object has the same peakName if (prevName.compareTo(currName) != 0) { numNames++; prevName = currName; } } return numNames; // i. This would not work as intended all the time if addClimb stores objects the way they were added, // because some objects added may have the same name, but are not next to each other and so are not detected // to be the same by distinctPeakNames. // ii. This would work as intended if addClimb stores objects in alphabetical order (using peakName), since objects with the same name // will be placed next to each other, and so will be detected to be the same by distinctPeakNames. } } .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/30/FRQ-2012.html",
            "relUrl": "/jupyter/2023/04/30/FRQ-2012.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Merge Sort and Binary Search Homework Post",
            "content": "Merge Sort Hacks: . public class State { public String name; public String governor; public State(String nameInput, String governorInput) { name = nameInput; governor = governorInput; } public String getName() { return name; } public String getGovernor() { return governor; } } public class MergeSort { public void toString(State[] states) { String output = &quot;&quot;; for (int i = 0; i &lt; states.length; i++) { if (i == states.length - 1) { output += states[i].getName() + &quot;-&quot; + states[i].getGovernor(); } else { output += states[i].getName() + &quot;-&quot; + states[i].getGovernor() + &quot;, &quot;; } } System.out.println(output); } public void sort(String arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } public void merge(String[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array String[] L = new String[n1]; // Right array String[] R = new String[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i].compareTo(R[j]) &lt;= 0) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public void sort2(State arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort2(arr, l, m); sort2(arr, m + 1, r); merge2(arr, l, m, r); } } public void merge2(State[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array State[] L = new State[n1]; // Right array State[] R = new State[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i].getName().compareTo(R[j].getName()) &lt;= 0) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static void main(String[] args) { String[] words = {&quot;apple&quot;, &quot;cucumber&quot;, &quot;egg&quot;, &quot;banana&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;, &quot;kiwi&quot;}; System.out.println(&quot;Unsorted array:&quot;); for (String item : words) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); MergeSort myObj = new MergeSort(); myObj.sort(words, 0, words.length - 1); System.out.println(&quot;Sorted array:&quot;); for (String item : words) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); State ohio = new State(&quot;Ohio&quot;, &quot;DeWine&quot;); State california = new State(&quot;California&quot;, &quot;Newsom&quot;); State newYork = new State(&quot;New York&quot;, &quot;Hochul&quot;); State massachusetts = new State(&quot;Massachusetts&quot;, &quot;Healey&quot;); State indiana = new State(&quot;Indiana&quot;, &quot;Holcomb&quot;); State[] states = {ohio, california, newYork, massachusetts, indiana}; System.out.println(&quot;Unsorted states:&quot;); myObj.toString(states); System.out.println(&quot;&quot;); myObj.sort2(states, 0, states.length - 1); System.out.println(&quot;Sorted states:&quot;); myObj.toString(states); System.out.println(&quot;&quot;); } } MergeSort.main(null); . Unsorted array: apple cucumber egg banana strawberry blueberry kiwi Sorted array: apple banana blueberry cucumber egg kiwi strawberry Unsorted states: Ohio-DeWine, California-Newsom, New York-Hochul, Massachusetts-Healey, Indiana-Holcomb Sorted states: California-Newsom, Indiana-Holcomb, Massachusetts-Healey, New York-Hochul, Ohio-DeWine . Binary Search Hacks: . public class BinarySearch { public static int search(int[] arr, int key, int min, int max) { // Check if current min and max have a range between them if (min &lt;= max) { // Get middle index of current searchable range int mid = (min + max)/2; // Conditionals to check if element is found or if the range should be changed if (arr[mid] == key) { return mid; } else if (arr[mid] &lt; key) { // No need to check elements below previous mid min = mid; } else if (arr[mid] &gt; key) { // No need to check elements above previous mid max = mid; } // Recursive calls until index of searched element is found return search(arr, key, min, max); } return -1; } public void sort(int arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } public void merge(int[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array int[] L = new int[n1]; // Right array int[] R = new int[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static void main(String[] args) { // Combining merge sort and binary search to sort and search an array int[] array = {1, 67, 45, 5, 9, 23, 7, 3}; for (int item : array) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); BinarySearch myObj = new BinarySearch(); myObj.sort(array, 0, array.length - 1); for (int item : array) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Index of 45: &quot; + myObj.search(array, 45, 0, array.length - 1)); } } BinarySearch.main(null); . 1 67 45 5 9 23 7 3 1 3 5 7 9 23 45 67 Index of 45: 6 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/26/merge-sort-binary-search.html",
            "relUrl": "/jupyter/2023/04/26/merge-sort-binary-search.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Arrays and More Homework Post",
            "content": "Hack: Create method that sets all elements in array to n . // Function to set all elements in array to specified integer void setArray(int[] arr, int n) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = n; } } int[] array = new int[10]; // Set all elements to 10 setArray(array, 10); for (int i = 0; i &lt; array.length; i++) { System.out.println(array[i]); } // Should print all 10s when working properly . 10 10 10 10 10 10 10 10 10 10 . Hack: Write an array to find the average of an array . //Example finding the average an array. //Finds the average of an array public static double average(int[] array) { // Initialize sum to be 0 int sum = 0; // Add all elements to sum for (int item : array) { sum += item; } // Divide sum by total number of elements to get the average. Note the double cast double average = (double) sum/array.length; return average; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 5.4 System.out.println(average(test)); . 5.4 . Hack: Find the average number of a diagonal in a 2d array . For example, here find the average of the bolded #s 1 2 3 4 5 6 7 8 9 1 2 3 . public static double averageDiagonal (int[][] array2D) { // Initialize important variables to control the function int sum = 0; int index = 0; int count = 0; // Loop through the 2d array by checking each row for (int[] array : array2D) { // Using the index variable, check the elements in a diagonal (going bottom right), // adding them to the sum until there is no more elements in the current diagonal position try { sum += array[index]; index++; count++; } catch (Exception e) { break; } } // Divide sum by total number of elements and double cast in order to find the average value double average = (double) sum/count; return average; } int[][] arr = { {1,2,3,4,5,6}, {7,8,9,10,11,12}, {0,1,2,3,4,5}, {10,11,12,13,14,15}, {15,16,17,18,19,20} }; System.out.println(averageDiagonal(arr)); . 8.6 . FRQ 2018 Q4 . public class ArrayTester { public static int[] getColumn(int[][] arr2D, int c) { // Create 1D array that will contain the column values int[] column = new int[arr2D.length]; // Add all values in the specified column to the column array. Iterate through each row for (int i = 0; i &lt; arr2D.length; i++) { column[i] = arr2D[i][c]; } return column; } public static boolean hasAllValues(int[] arr1, int[] arr2) { // Implementation not shown } public static boolean containsDuplicates(int[] arr) { // Implementation not shown } public static boolean isLatin(int[][] square) { // Get the first row array of the 2D array int[] firstRow = square[0]; // Check if the first row contains any duplicate values if (containsDuplicates(firstRow) != true) { return false; } // For each row under the first, check if it contains all of the values of the first row for (int i = 1; i &lt; square.length; i++) { if (hasAllValues(firstRow, square[i]) != true) { return false; } } // For each column in the square, check if it contains all of the values of the first row for (int j = 0; j &lt; square[0].length; j++) { int[] column = getColumn(square, j); if (hasAllValues(firstRow, column) != true) { return false; } } return true; } } . FRQ 2017 Q4 . // Position class that will be processed by the Successors class public class Position { public Position(int r, int c) { // Implementation not shown } } public class Successors { // Static function to return the position (row and column) of the searched value public static Position findPosition(int num, int[][] intArr) { boolean found = false; // Iterate through rows and columns to search through every element of the 2D array for (int i = 0; i &lt; intArr.length; i++) { for (int j = 0; j &lt; intArr[i].length; j++) { // Stop the search once the element is found if (intArr[i][j] == num) { found = true; Position positionObject = new Position(i, j); break; } } } // Return null if the element is not found if (found == false) { return null; } else { return positionObject; } } // Static function public static Position[][] getSuccessorArray(int[][] intArr) { // Instantiate new array with the same dimensions as intArr Position[][] successorArray = new Position[intArr.length][intArr[0].length]; // Set a Position object (position of respective intArr element + 1) for each element of successorArray for (int i = 0; i &lt; successorArray.length; i++) { for (int j = 0; j &lt; successorArray[i].length; j++) { successorArray[i][j] = findPosition(intArr[i][j] + 1, intArr); } } return successorArray; } } . FRQ 2016 Q4 . public class StringFormatter { public static int totalLetters(List&lt;String&gt; wordList) { int total = 0; // Add the length of every word in wordList to get the total letters for (int i = 0; i &lt; wordList.size(); i++) { total += wordList.get(i).length(); } return total; } public static int basicGapWidth(List&lt;String&gt; wordList, int formattedLen) { // Get the number of gaps for the wordList int numGaps = wordList.size() - 1; // Get the number of spaces by subtracting the total letters from the formatted sentence length int numSpaces = formattedLen - totalLetters(wordList); // Divide using int type to get rid of remainders, effectively getting the basic gap width int gapWidth = numSpaces/numGaps; return gapWidth; } public static int leftoverSpaces(List&lt;String&gt; wordList, int formattedLen) { // Implementation not shown } public static String format(List&lt;String&gt; wordList, int formattedLen) { // Instantiate empty string that will ultimately contain the formatted string String formattedString = &quot;&quot;; // Get leftover spaces int leftover = leftoverSpaces(wordList, formattedLen); // Get basic gap width int gapWidth = basicGapWidth(wordList, formattedLen); for (int i = 0; i &lt; wordList.size(); i++) { // Add each word to formattedString formattedString += wordList.get(i); // If not the last word, add the basic gap width, as well as a leftover space if applicable if (i &lt; wordList.size() - 1) { for (int j = 0; j &lt; gapWidth; j++) { formattedString += &quot; &quot;; } if (leftover &gt; 0) { formattedString += &quot; &quot;; leftover--; } } } return formattedString; } } .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/25/arraysandmore-homework.html",
            "relUrl": "/jupyter/2023/04/25/arraysandmore-homework.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Surprise Test Post",
            "content": "import java.util.*; import java.lang.Thread; public class Book { public int id; public static int newID = 0; public String title; public int pages; public long time; public long expirationTime; public int stampRenews; public Book(String titleInput, int pageInput) { title = titleInput; pages = pageInput; id = newID; time = System.currentTimeMillis(); expirationTime = 5000; newID++; } public String getTitle() { return title; } public int getPage() { return pages; } public int getID() { return id; } public long getTime() { return time; } public long getExpirationTime() { return expirationTime; } public void setExpirationTime(int stampRenewsInput) { this.expirationTime += 5000 * (stampRenewsInput/3); } public void setStampRenews(int stampRenewsInput) { this.stampRenews = stampRenewsInput; } public int getStampRenews() { return stampRenews; } public String getAuthor() { return &quot;&quot;; } public void setAuthor(String authorInput) {} public String getPublishingCompany() {return &quot;&quot;;} public void setPublishingCompany(String publishingCompanyInput) {} } public class Novel extends Book { public String author; public Novel(String title, int page, String authorInput) { super(title, page); author = authorInput; } public String getAuthor() { return author; } public void setAuthor(String authorInput) { this.author = authorInput; } } public class Textbook extends Book { public String publishingCompany; public Textbook(String title, int page, String publishingCompanyInput) { super(title, page); publishingCompany = publishingCompanyInput; } public String getPublishingCompany() { return publishingCompany; } public void setPublishingCompany(String publishingCompanyInput) { this.publishingCompany = publishingCompanyInput; } } public class Main { public void toString(ArrayList&lt;Book&gt; bookList) { String output = &quot;[&quot;; for (int i = 0; i &lt; bookList.size(); i++) { if (i == bookList.size() - 1) { output += &quot;{&quot; + bookList.get(i).getTitle() + &quot;-&quot; + bookList.get(i).getPage() + &quot;-&quot; + bookList.get(i).getID() + &quot;-&quot; + bookList.get(i).getTime() + &quot;-&quot; + bookList.get(i).getExpirationTime() + &quot;}&quot;; } else { output += &quot;{&quot; + bookList.get(i).getTitle() + &quot;-&quot; + bookList.get(i).getPage() + &quot;-&quot; + bookList.get(i).getID() + &quot;-&quot; + bookList.get(i).getTime() + &quot;-&quot; + bookList.get(i).getExpirationTime() + &quot;},&quot;; } } output += &quot;]&quot;; System.out.println(output); } public int getBookCount(ArrayList&lt;Book&gt; bookList) { return bookList.size(); } public long getShelfLife(Book bookInQuestion) { long shelfLife = System.currentTimeMillis() - bookInQuestion.getTime(); return shelfLife; } public void checkIfExpired(Book bookInQuestion, long shelfLife) { boolean expired = false; if (shelfLife &gt; bookInQuestion.getExpirationTime()) { expired = true; } System.out.println(&quot;Expired: &quot; + expired); } public static void main(String[] args) throws InterruptedException { System.out.println(&quot;Part 1:&quot;); System.out.println(&quot;-&quot;); ArrayList&lt;Book&gt; bookList = new ArrayList&lt;Book&gt;(); Book book1 = new Book(&quot;Maze Runner&quot;, 500); Book book2 = new Book(&quot;Hunger Games&quot;, 700); Book book3 = new Book(&quot;Fahrenheit 451&quot;, 800); bookList.add(book1); bookList.add(book2); bookList.add(book3); Main myObj = new Main(); System.out.println(&quot;All books in library:&quot;); System.out.println(book1.getTitle()); System.out.println(book2.getTitle()); System.out.println(book3.getTitle()); System.out.println(&quot;&quot;); System.out.println(&quot;Number of books in library:&quot;); System.out.println(myObj.getBookCount(bookList)); System.out.println(&quot;&quot;); System.out.println(&quot;toString():&quot;); myObj.toString(bookList); System.out.println(); System.out.println(&quot;Part 2:&quot;); System.out.println(&quot;-&quot;); bookList.clear(); Book novel1 = new Novel(&quot;Computer Science Fundamentals&quot;, 800, &quot;Mark Wahlberg&quot;); Book textbook1 = new Textbook(&quot;How to be good&quot;, 700, &quot;Generic Publishing Company&quot;); bookList.add(novel1); bookList.add(textbook1); System.out.println(&quot;Author of novel: &quot; + novel1.getAuthor()); textbook1.setPublishingCompany(&quot;Specific Publishing Company&quot;); System.out.println(&quot;Publishing company of textbook: &quot; + textbook1.getPublishingCompany()); System.out.println(&quot;Date and time novel was added to library: &quot; + novel1.getTime()); myObj.toString(bookList); System.out.println(); System.out.println(&quot;Part 3:&quot;); System.out.println(&quot;-&quot;); Book newBook = new Book(&quot;Baron&#39;s Computer Science Adventures&quot;, 500); bookList.add(newBook); myObj.toString(bookList); Thread.sleep(3500); System.out.println(myObj.getShelfLife(newBook)); myObj.checkIfExpired(newBook, myObj.getShelfLife(newBook)); Thread.sleep(1500); System.out.println(myObj.getShelfLife(newBook)); myObj.checkIfExpired(newBook, myObj.getShelfLife(newBook)); Book newBookAgain = new Book(&quot;Generic Book&quot;, 700); bookList.add(newBookAgain); newBookAgain.setExpirationTime(3); Thread.sleep(6000); System.out.println(myObj.getShelfLife(newBookAgain)); myObj.checkIfExpired(newBookAgain, myObj.getShelfLife(newBookAgain)); } } Main.main(null); . Part 1: - All books in library: Maze Runner Hunger Games Fahrenheit 451 Number of books in library: 3 toString(): [{Maze Runner-500-0-1682699976779-5000},{Hunger Games-700-1-1682699976779-5000},{Fahrenheit 451-800-2-1682699976779-5000}] Part 2: - Author of novel: Mark Wahlberg Publishing company of textbook: Specific Publishing Company Date and time novel was added to library: 1682699976851 [{Computer Science Fundamentals-800-3-1682699976851-5000},{How to be good-700-4-1682699976851-5000}] Part 3: - [{Computer Science Fundamentals-800-3-1682699976851-5000},{How to be good-700-4-1682699976851-5000},{Baron&#39;s Computer Science Adventures-500-5-1682699976868-5000}] 3504 Expired: false 5009 Expired: true 6001 Expired: false .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/20/Surpise-Test.html",
            "relUrl": "/jupyter/2023/04/20/Surpise-Test.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Checkpoint 3 Post",
            "content": "import java.util.LinkedList; public class Sorting { // Initialize different Linked Lists to be sorted public LinkedList&lt;Integer&gt; linkedListName = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameBubble = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameSelection = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameInsertion = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameMerge = new LinkedList&lt;Integer&gt;(); public Sorting(int[] numbers) { for (int i = 0; i &lt; numbers.length; i++) { linkedListName.add(numbers[i]); linkedListNameBubble.add(numbers[i]); linkedListNameSelection.add(numbers[i]); linkedListNameInsertion.add(numbers[i]); linkedListNameMerge.add(numbers[i]); } } // Iterate through each element of the linked list, and in each iteration, swap 2 elements if they are not in the correct order. // After one full loop of the linked list, decrease the loop condition by one, since the last element has to be the highest in the linked list. public void bubbleSort() { int capacity = linkedListNameBubble.size() - 1; for (int i = 0; i &lt; capacity; i++) { if (linkedListNameBubble.get(i) &gt; linkedListNameBubble.get(i + 1)) { int temp = linkedListNameBubble.get(i + 1); linkedListNameBubble.set(i + 1, linkedListNameBubble.get(i)); linkedListNameBubble.set(i, temp); } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } } // In one loop of the selection sort, the algorithm finds the minimum value of the linked list. // After one full loop, the minimum value is set at the minimum index, and the starting index of the loop moves up by one. public void selectionSort() { int tempIndex = 0; for (int i = tempIndex; i &lt; linkedListNameSelection.size(); i++) { int min = linkedListNameSelection.get(tempIndex); int minIndex = tempIndex; if (i == tempIndex) { min = linkedListNameSelection.get(i); } else if (linkedListNameSelection.get(i) &lt; min) { minIndex = i; min = linkedListNameSelection.get(i); } int temp = linkedListNameSelection.get(tempIndex); linkedListNameSelection.set(tempIndex, min); linkedListNameSelection.set(minIndex, temp); if (i == linkedListNameSelection.size() - 1 &amp;&amp; tempIndex &lt; linkedListNameSelection.size() - 2) { tempIndex++; i = tempIndex - 1; } } } // In each iteration, take the current element and compare it to all of the other elements in the linked list, then insert it to the position before the first element it is lower than in value. public void insertionSort() { for (int i = 0; i &lt; linkedListNameInsertion.size(); i++) { for (int j = 0; j &lt; i; j++) { if (linkedListNameInsertion.get(j) &gt; linkedListNameInsertion.get(i)) { int temp = linkedListNameInsertion.get(j); linkedListNameInsertion.set(j, linkedListNameInsertion.get(i)); linkedListNameInsertion.remove(i); linkedListNameInsertion.add(j + 1, temp); break; } } } } public static void main(String[] args) { int[] numbers = {1, 7, 2, 5, 3, 6, 4, 8}; Sorting myObj = new Sorting(numbers); System.out.println(&quot;LinkedList before bubble sort: &quot; + myObj.linkedListName.toString()); myObj.bubbleSort(); System.out.println(&quot;LinkedList after bubble sort: &quot; + myObj.linkedListNameBubble.toString()); System.out.println(&quot;LinkedList before selection sort: &quot; + myObj.linkedListName.toString()); myObj.selectionSort(); System.out.println(&quot;LinkedList after selection sort: &quot; + myObj.linkedListNameSelection.toString()); System.out.println(&quot;LinkedList before insertion sort: &quot; + myObj.linkedListName.toString()); myObj.insertionSort(); System.out.println(&quot;LinkedList after insertion sort: &quot; + myObj.linkedListNameInsertion.toString()); } } Sorting.main(null); . LinkedList before bubble sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after bubble sort: [1, 2, 3, 4, 5, 6, 7, 8] LinkedList before selection sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after selection sort: [1, 2, 3, 4, 5, 6, 7, 8] LinkedList before insertion sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after insertion sort: [1, 2, 3, 4, 5, 6, 7, 8] . Collectable . public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } public class Sport extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Sport.key = key;} public enum KeyType implements KeyTypes {title, name, numPlayers} // Instance data private final String name; private final int numPlayers; // Constructor Sport(String name, int numPlayers) { this.setType(&quot;Sport&quot;); this.name = name; this.numPlayers = numPlayers; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Sport.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.numPlayers.equals(this.getKey())) { output += &quot;00&quot; + this.numPlayers; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.numPlayers; } return output; } // Test data initializer public static Sport[] sports() { return new Sport[]{ new Sport(&quot;Soccer&quot;, 22), new Sport(&quot;Basketball&quot;, 10), new Sport(&quot;Volleyball&quot;, 12), new Sport(&quot;Tennis&quot;, 2), new Sport(&quot;Football&quot;, 22) }; } public static void main(String[] args) { // Inheritance Hierarchy Sport[] objs = sports(); // print with title Sport.setOrder(KeyType.title); Sport.print(objs); // print flavor only Sport.setOrder(KeyType.name); Sport.print(objs); // print numPlayers only Sport.setOrder(KeyType.numPlayers); Sport.print(objs); } } Sport.main(null); . class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by title Sport: Soccer, 22 Sport: Basketball, 10 Sport: Volleyball, 12 Sport: Tennis, 2 Sport: Football, 22 class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by name Soccer Basketball Volleyball Tennis Football class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by numPlayers 22 10 12 02 22 . Big O Complexity Notes . Space complexity is basically the total amount of memory space used by a certain program, and it includes space allocated to input values. | Time complexity is basically the total amount of time it takes to run a certain program. | An ideal program involves low space complexity and low time complexity, as it minimizes the amount of resources that need to be used. | . import java.util.*; public class BigOAnalyze { public int[] numbers = new int[5000]; public BigOAnalyze() { for (int i = 0; i &lt; numbers.length; i++) { numbers[i] = (int) (Math.random() * 1000); } } public void bubbleSort() { int capacity = numbers.length - 1; for (int i = 0; i &lt; capacity; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } } public void selectionSort() { int tempIndex = 0; for (int i = tempIndex; i &lt; numbers.length; i++) { int min = numbers[tempIndex]; int minIndex = tempIndex; if (i == tempIndex) { min = numbers[i]; } else if (numbers[i] &lt; min) { minIndex = i; min = numbers[i]; } int temp = numbers[tempIndex]; numbers[tempIndex] = min; numbers[minIndex] = temp; if (i == numbers.length - 1 &amp;&amp; tempIndex &lt; numbers.length - 2) { tempIndex++; i = tempIndex - 1; } } } public void insertionSort() { for (int i = 0; i &lt; numbers.length; i++) { for (int j = 0; j &lt; i; j++) { if (numbers[j] &gt; numbers[i]) { for (int x = i; x &gt; j; x--) { int temp = numbers[x]; numbers[x] = numbers[x-1]; numbers[x-1] = temp; } break; } } } } public static void main(String[] args) { int averageBubbleTime = 0; int averageSelectionTime = 0; int averageInsertionTime = 0; for (int i = 0; i &lt; 12; i++) { BigOAnalyze myObj = new BigOAnalyze(); long startTime = System.currentTimeMillis(); myObj.bubbleSort(); long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; averageBubbleTime += time; System.out.println(&quot;Bubble sort time: &quot; + time); BigOAnalyze myObj2 = new BigOAnalyze(); startTime = System.currentTimeMillis(); myObj2.selectionSort(); stopTime = System.currentTimeMillis(); time = stopTime - startTime; averageSelectionTime += time; System.out.println(&quot;Selection sort time: &quot; + time); BigOAnalyze myObj3 = new BigOAnalyze(); startTime = System.currentTimeMillis(); myObj3.insertionSort(); stopTime = System.currentTimeMillis(); time = stopTime - startTime; averageInsertionTime += time; System.out.println(&quot;Insertion sort time: &quot; + time); } averageBubbleTime /= 12; averageSelectionTime /= 12; averageInsertionTime /= 12; System.out.println(&quot;Average bubble sort time: &quot; + averageBubbleTime); System.out.println(&quot;Average selection sort time: &quot; + averageSelectionTime); System.out.println(&quot;Average insertion sort time: &quot; + averageInsertionTime); } } BigOAnalyze.main(null); . Bubble sort time: 56 Selection sort time: 121 Insertion sort time: 21 Bubble sort time: 36 Selection sort time: 84 Insertion sort time: 8 Bubble sort time: 23 Selection sort time: 63 Insertion sort time: 22 Bubble sort time: 24 Selection sort time: 67 Insertion sort time: 10 Bubble sort time: 17 Selection sort time: 51 Insertion sort time: 9 Bubble sort time: 21 Selection sort time: 49 Insertion sort time: 5 Bubble sort time: 24 Selection sort time: 54 Insertion sort time: 6 Bubble sort time: 19 Selection sort time: 51 Insertion sort time: 6 Bubble sort time: 24 Selection sort time: 52 Insertion sort time: 5 Bubble sort time: 18 Selection sort time: 51 Insertion sort time: 4 Bubble sort time: 18 Selection sort time: 49 Insertion sort time: 6 Bubble sort time: 19 Selection sort time: 49 Insertion sort time: 4 Average bubble sort time: 24 Average selection sort time: 61 Average insertion sort time: 8 . Big O Analysis: . Bubble Sort: Space complexity: O(1) | Time complexity: O(n^2) | . | Selection sort: Space complexity: o(1) | Time complexity: o(n^2) | . | Insertion sort: Space complexity: o(1) | Time complexity: o(n) | . | In our program, the insertion sort took the least time to perform its task. Since the space complexities are about the same for all three sorts, I believe the insertion sort is the most optimal. | . HashMap . import java.util.HashMap; import java.util.Scanner; public class MapAnalyze { public long hashMapAnalyze(HashMap&lt;Integer, Integer&gt; numbersMap, int inputNumber) { long startTime = System.currentTimeMillis(); numbersMap.containsValue(inputNumber); long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; return time; } public int[] bubbleSort(int[] numbers) { int capacity = numbers.length - 1; for (int i = 0; i &lt; capacity; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } return numbers; } public long binarySearchAnalyze(int[] numbers, int inputNumber) { int[] newNumbers = bubbleSort(numbers); long startTime = System.currentTimeMillis(); int midIndex = newNumbers.length/2; int length = newNumbers.length/2; while(length &gt; 1) { if (newNumbers[midIndex] == inputNumber) { break; } else if (newNumbers[midIndex] &gt; inputNumber) { length /= 2; midIndex -= length; } else if (newNumbers[midIndex] &lt; inputNumber) { length /= 2; midIndex += length; } } long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; return time; } public static void main(String[] args) { int[] numbers = new int[5000]; HashMap&lt;Integer, Integer&gt; numbersMap = new HashMap&lt;Integer, Integer&gt;(); for (int i = 0; i &lt; numbers.length; i++) { numbers[i] = (int) (Math.random() * 1000); numbersMap.put(i, (int) (Math.random() * 1000)); } MapAnalyze myObj = new MapAnalyze(); Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter a number between 1 and 1000:&quot;); int inputNumber = userInput.nextInt(); System.out.println(&quot;Time for binary search: &quot; + myObj.hashMapAnalyze(numbersMap, inputNumber)); System.out.println(&quot;Time for HashMap lookup: &quot; + myObj.binarySearchAnalyze(numbers, inputNumber)); } } MapAnalyze.main(null); . Enter a number between 1 and 1000: Time for binary search: 0 Time for HashMap lookup: 308 . Collection HashMap . Pros | Pros | . + Simple | + Fast access and retrieval | . + Stores a lot of data, | + Efficient for large data sets | . can iterate over small | + Provides key-value pairs | . data sets | + No duplicates allowed | . + Allows duplicates to emerge in multiple indexes | | . | | . Cons | Cons | . - Slower | - Complexity | . - No efficient key-based | - memory-intensive | . access | - Not thread-safe | . - No order like, only based on a key | - Requires more code to | . | iterate, not as | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/05/Checkpoint-3.html",
            "relUrl": "/jupyter/2023/04/05/Checkpoint-3.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Stack Hack Post",
            "content": "public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } public class Stack&lt;T&gt; { private LinkedList&lt;T&gt; upper; private int size; // constructor initiates null LinkedList&lt;T&gt; object + set size to 0 public Stack() { this.upper = null; this.size = 0; } // push method for a new element to the upper value public void push(T data) { LinkedList&lt;T&gt; newNode = new LinkedList&lt;T&gt;(data, this.upper); this.upper = newNode; this.size++; } // peek method, return upper public T peek() { // try/catch to either return upper or print message if upper doesn&#39;t exist try { return this.upper.getData(); } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // pop method, return upper and remove public T pop() { // try/catch to either return + pop upper or print message if upper doesn&#39;t exist try { T data = this.upper.getData(); this.upper = this.upper.getPrevious(); this.size--; return data; } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // get size method public int size() { return this.size; } // isEmpty method, compare size to 0 public boolean isEmpty() { return this.size == 0; } // toString method, from top to bottom public String toString() { String s = &quot;[ &quot;; LinkedList&lt;T&gt; currentNode = upper; // gets upper node, then keeps going down to previous until previous is null while (currentNode != null) { s += currentNode.getData(); currentNode = currentNode.getPrevious(); if (currentNode != null) { s += &quot;, &quot;; } } s += &quot; ]&quot;; return s; } } public class Main { public static void main(String[] args) { Stack&lt;Integer&gt; stackName = new Stack&lt;Integer&gt;(); stackName.push(1); stackName.push(3); stackName.push(5); stackName.push(7); stackName.push(9); stackName.push(11); System.out.println(&quot;Whole stack: &quot; + stackName.toString()); System.out.println(&quot;Item on top: &quot; + stackName.peek()); stackName.pop(); System.out.println(&quot;Item on top after one remove: &quot; + stackName.peek()); System.out.println(&quot;Stack size: &quot; + stackName.size()); System.out.println(&quot;Check if stack is empty: &quot; + stackName.isEmpty()); } } Main.main(null); . | public class LinkedList&lt;T&gt; { a type with the same simple name is already defined by the single-type-import of java.util.Stack .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/26/Stack-Hack.html",
            "relUrl": "/jupyter/2023/03/26/Stack-Hack.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Stack Hack 2 Post",
            "content": "import java.util.Stack; public class StackSorter { public void sort() { Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;(); ArrayList&lt;Integer&gt; usedNumbers = new ArrayList&lt;Integer&gt;(); stack.push(3); stack.push(7); stack.push(5); stack.push(1); stack.push(2); stack.push(10); stack.push(7); System.out.println(&quot;Stack before sort: &quot; + stack.toString()); int[] tempValues = new int[stack.size()]; int index = 0; while (!stack.isEmpty()) { tempValues[index] = stack.pop(); index++; } int swapCount = 0; for (int i = 0; i &lt; tempValues.length - 1; i++) { if (tempValues[i] &gt; tempValues[i + 1]) { int temp = tempValues[i + 1]; tempValues[i + 1] = tempValues[i]; tempValues[i] = temp; swapCount++; } if (i == tempValues.length - 2 &amp;&amp; swapCount != 0) { swapCount = 0; i = -1; } } for (int item : tempValues) { stack.push(item); } System.out.println(&quot;Stack after sort: &quot; + stack.toString()); } public static void main(String[] args) { StackSorter myObj = new StackSorter(); myObj.sort(); } } StackSorter.main(null); . Stack before sort: [3, 7, 5, 1, 2, 10, 7] Stack after sort: [1, 2, 3, 5, 7, 7, 10] .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/26/Stack-Hack-2.html",
            "relUrl": "/jupyter/2023/03/26/Stack-Hack-2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Checkpoint 1 Post",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } public class Car extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Car.key = key; } public enum KeyType implements KeyTypes {title, name, year, model} // Instance data private final String name; private final int year; private final String model; /* constructor * */ public Car(String name, int year, String model) { super.setType(&quot;Car&quot;); this.name = name; this.year = year; this.model = model; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Car.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.year.equals(this.getKey())) { output += &quot;00&quot; + this.year; output = output.substring(output.length() - 2); } else if (KeyType.model.equals(this.getKey())) { output += this.model; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.model + &quot;, &quot; + this.year; } return output; } // Test data initializer public static Car[] cars() { return new Car[]{ new Car(&quot;Honda&quot;, 2016, &quot;Odyssey&quot;), new Car(&quot;Toyota&quot;, 2012, &quot;Corolla&quot;), new Car(&quot;Lexus&quot;, 2019, &quot;UX&quot;), new Car(&quot;Acura&quot;, 2016, &quot;Integra&quot;), new Car(&quot;Kia&quot;, 2023, &quot;Forte&quot;), new Car(&quot;Lamborghini&quot;, 2022, &quot;Huracan EVO&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Car[] objs = cars(); // print with title Car.setOrder(KeyType.title); Car.print(objs); // print name only Car.setOrder(KeyType.name); Car.print(objs); } } Car.main(null); public class Sport extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Sport.key = key;} public enum KeyType implements KeyTypes {title, name, numPlayers} // Instance data private final String name; private final int numPlayers; // Constructor Sport(String name, int numPlayers) { this.setType(&quot;Sport&quot;); this.name = name; this.numPlayers = numPlayers; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Sport.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.numPlayers.equals(this.getKey())) { output += &quot;00&quot; + this.numPlayers; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.numPlayers; } return output; } // Test data initializer public static Sport[] sports() { return new Sport[]{ new Sport(&quot;Soccer&quot;, 22), new Sport(&quot;Basketball&quot;, 10), new Sport(&quot;Volleyball&quot;, 12), new Sport(&quot;Tennis&quot;, 2), new Sport(&quot;Football&quot;, 22) }; } public static void main(String[] args) { // Inheritance Hierarchy Sport[] objs = sports(); // print with title Sport.setOrder(KeyType.title); Sport.print(objs); // print flavor only Sport.setOrder(KeyType.name); Sport.print(objs); // print numPlayers only Sport.setOrder(KeyType.numPlayers); Sport.print(objs); } } Sport.main(null); /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Car.setOrder(Car.KeyType.name); Sport.setOrder(Sport.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Car.cars(), Sport.sports() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( Car.cars(), Sport.sports() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . class [LREPL.$JShell$13$Car; 6 Generic: Car listed by title Car: Honda, Odyssey, 2016 Car: Toyota, Corolla, 2012 Car: Lexus, UX, 2019 Car: Acura, Integra, 2016 Car: Kia, Forte, 2023 Car: Lamborghini, Huracan EVO, 2022 class [LREPL.$JShell$13$Car; 6 Generic: Car listed by name Honda Toyota Lexus Acura Kia Lamborghini class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by title Sport: Soccer, 22 Sport: Basketball, 10 Sport: Volleyball, 12 Sport: Tennis, 2 Sport: Football, 22 class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by name Soccer Basketball Volleyball Tennis Football class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by numPlayers 22 10 12 02 22 My Generics count: 11 My Generics data: Honda Toyota Lexus Acura Kia Lamborghini Soccer Basketball Volleyball Tennis Football Mixed count: 11 Mixed data: Start Honda Toyota Lexus Acura Kia Lamborghini Soccer Basketball Volleyball Tennis Football End .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/19/Checkpoint-1.html",
            "relUrl": "/jupyter/2023/03/19/Checkpoint-1.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Generic Types and Collections Post",
            "content": "Classes and Objects: . A class is like a &quot;blueprint&quot; for creating objects. | Class attributes are variables within a class, and class methods are methods within a class. | Constructors: A constructor is essentially a special method that is ran whenever an object of a class is initialized, and is typically used to set initial object attribute values. | The constructor name has to match the class name. | All classes have constructors by default. The default constructor does not set any values in the class. | . | Access Modifiers: Access modifiers control the access level of classes, their attributes, and their methods. | Class Access Modifiers: public - class is accessible by any other class. | default - class is only accessible by any classes in the same package. | . | Attribute, Method, and Constructor Access Modifiers: public - Code is accessible for all classes. | private - Code is only accessible within the class. | default - Code is only accessible in the same package. | protected - Code is accessible in the same package and any subclasses. | . | . | Modifiers: Non-access modifiers provide different kinds of functionality regarding the behavior of classes, attributes, and methods. | Class Non-Access Modifiers: final - Class cannot be inherited by other classes. | abstract - Objects cannot be created from the class, as it can only be accessed from a subclass that inherits it. | . | Attribute, Method, and Constructor Non-Access Modifier: final - Code cannot be modified. | static - Code belongs to the class instead of an object. | abstract (methods) - Code can only be located in an abstract class. Body of code is provided in the subclass. | transient - Code is skipped over when the object containing it is serialized. | synchronized (methods) - Code is accessed one thread at a time. | volatile (attributes) - The value of code is not cached thread-locally, but is stored in the main memory. | . | Getters and Setters: Getters and Setters are typically used to provide access to private variables. | Encapsulation is basically the process of keeping sensitive data hidden or &quot;private&quot; from users. | get and set methods are typically public, allowing us to access private variables from outside the class. | Getters return the variable value, while Setters set the variable value. | get method: private String name; | public String getName() { return name; } | . | set method: private String name; | public void setName(String newName) { this.name = newName; } | . | . | . | . Linked List: . In Java, a LinkedList is very similar to an ArrayList. | A LinkedList is essentially a collection that can contain multiple variables or objects of the same type. | Since LinkedList implements the same interface (List) as ArrayList, it has similar methods. | The main difference between an ArrayList and a LinkedList: An ArrayList contains an array that stores items. If new variables are added and the array is not big enough, a new one is created to replace it. | A LinkedList basically saves items in containers, in which it has a link to the first container, and each container has a link to the next container in order. Whenever a new item is added to the list, it is placed into a new container, which is linked a container already in the list. | . | To initialize LinkedList: LinkedList&lt;Type&gt; linkedListName = new LinkedList&lt;&gt;(); | or: LinkedList&lt;Type&gt; linkedListName = new LinkedList&lt;Type&gt;(); | Notice how the object instantiation of LinkedList does not have a type parameter. | . | LinkedList methods: addFirst() - self-explanatory. | addLast() - self-explanatory. | removeFirst() - self-explanatory. | removeLast() - self-explanatory. | getFirst() - self-explanatory. | getLast() - self-explanatory. | . | A LinkedList is a linear data structure, meaning within in it, each node is connected to the previous and next node. Each node has 3 fundamental fields: prev (address of previous element), next (address of next element), and data (actual data of current element). | Elements in a LinkedList are not stored sequentially, but rather scattered and connected with links. This means a LinkedList stores 3 values in an element position. Whenever a new element is added to LinkedList, prev and next addresses are changed for some elements. | . Queue: . A queue is a type of collection that implements the First In First Out (FIFO) element ordering system. It is essentially an order list of variables or objects where elements are inserted at the end of the list and elements are deleted at the start of the list. | Generics in Java allow variable types (e.g. Strings and integers) to be parameters in methods, interfaces, and classes. Generic classes can take variable types as parameters, separated by commas. | Since Queue is an interface, we need other classes in order to directly implement it (e.g. ArrayDeque, LinkedList, and PriorityQueue). | To initialize Queue (3 different ways): Queue&lt;Type&gt; queueName = new LinkedList&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new LinkedList&lt;Type&gt;(); | Queue&lt;Type&gt; queueName = new ArrayDeque&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new ArrayDeque&lt;Type&gt;(); | Queue&lt;Type&gt; queueName = new PriorityQueue&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new PriorityQueue&lt;Type&gt;(); | Notice how the instantiations of LinkedList, ArrayDeque, and PriorityQueue do not have type parameters. | . | Important Queue Methods: add(element) - Inserts element into queue. | offer(element) - Inserts element into queue. Returns false if not successful. | element() - Returns head of queue. | peek() - Returns head of queue. Returns null if queue is empty. | remove() - Returns and removes head of queue. | poll() - Returns and removes head of queue. Returns null if queue is empty. #### Stack: #### | . | A stack is a type of collection that implements the Last In First Out (LIFO) element ordering system, where elements are added to the top of the stack and elements are removed from the top of the stack. | To initialize a stack: Stack&lt;Type&gt; stackName = new Stack&lt;&gt;(); | or: Stack&lt;Type&gt; stackName = new Stack&lt;Type&gt;(); | Notice how the object instantiation of Stack does not have a type parameter. | . | Since Stack inherits the Vector class, it has methods and properties similar to that of Vector. | Important Stack Methods: push() - Add element to top of stack. | pop() - Remove element from top of stack. | peek() - Return element at the top of the stack. | search(element) - Return the index/position of the element from the top of the stack. | empty() - Check whether or not the stack is empty. | . | . import java.util.*; public class Examples { private LinkedList&lt;Integer&gt; linkedListName; private Queue&lt;Integer&gt; queueName; private Stack&lt;Integer&gt; stackName; public Examples(int[] array) { linkedListName = new LinkedList&lt;&gt;(); queueName = new LinkedList&lt;&gt;(); stackName = new Stack&lt;&gt;(); for (int i = 0; i &lt; array.length; i++) { linkedListName.add(array[i]); queueName.add(array[i]); stackName.push(array[i]); } } public void displayExamples() { System.out.println(&quot;LinkedList:&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot;Implementing get method&quot;); for (int i = 0; i &lt; linkedListName.size(); i++) { if (i == 9) { System.out.println(&quot;index &quot; + i + &quot;: &quot; + linkedListName.get(i)); } else { System.out.print(&quot;index &quot; + i + &quot;: &quot; + linkedListName.get(i) + &quot;, &quot;); } } System.out.println(&quot;Implementing set method&quot;); for (int j = 0; j &lt; linkedListName.size()/2; j++) { int lastIndex = linkedListName.size() - (j + 1); int temp = linkedListName.get(j); linkedListName.set(j, lastIndex); linkedListName.set(lastIndex, temp); } for (int element : linkedListName) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Implementing remove method&quot;); for (int i = 0; i &lt; linkedListName.size(); i++) { if (linkedListName.get(i) % 2 != 0) { linkedListName.remove(i); } } for (int element : linkedListName) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Queue:&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Removing every element of the queue then adding it again&quot;); for (int i = 0; i &lt; queueName.size(); i++) { int temp = queueName.remove(); System.out.print(temp + &quot; &quot;); queueName.add(temp); } System.out.println(&quot;&quot;); System.out.println(&quot;Queue Size: &quot; + queueName.size()); System.out.println(&quot;&quot;); System.out.println(&quot;Stack:&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Reversing the order of a stack&quot;); String before = &quot;Before: &quot;; int[] reverseArray = new int[10]; for (int i = 0; i &lt; reverseArray.length; i++) { int temp = stackName.pop(); before += temp + &quot; &quot;; reverseArray[i] = temp; } System.out.println(before); String after = &quot;After: &quot;; for (int j = 0; j &lt; reverseArray.length; j++) { after += reverseArray[reverseArray.length - (j + 1)] + &quot; &quot;; stackName.push(reverseArray[j]); } System.out.println(after); } public static void main(String[] args) { int[] exampleArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; Examples myObj = new Examples(exampleArray); myObj.displayExamples(); } } Examples.main(null); . LinkedList: -- Implementing get method index 0: 1, index 1: 2, index 2: 3, index 3: 4, index 4: 5, index 5: 6, index 6: 7, index 7: 8, index 8: 9, index 9: 10 Implementing set method 9 8 7 6 5 5 4 3 2 1 Implementing remove method 8 6 5 4 2 Queue: Removing every element of the queue then adding it again 1 2 3 4 5 6 7 8 9 10 Queue Size: 10 Stack: Reversing the order of a stack Before: 10 9 8 7 6 5 4 3 2 1 After: 1 2 3 4 5 6 7 8 9 10 . import java.util.Queue; import java.lang.Math; import java.util.ArrayList; import java.util.Stack; public class LinkedListPractice { public void hack1() { Queue&lt;String&gt; queue1 = new LinkedList&lt;String&gt;(); String[] words = {&quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; for (String word : words) { queue1.add(word); System.out.println(displayData(queue1, true)); } for (String word: words) { String head = &quot;&quot;; for (String item : queue1) { head += item; break; } System.out.println(&quot;Dequeued data: &quot; + head); queue1.remove(); System.out.println(displayData(queue1, false)); } } public String displayData(Queue&lt;String&gt; queueName, boolean enqueue) { if (enqueue) { String data = &quot;Enqueued data: &quot;; String head = &quot;&quot;; String items = &quot;&quot;; if (queueName.size() == 0) { items = null; } else { int index = 0; for (String item : queueName) { if (index == queueName.size() - 1) { head += item; } else { index++; } items += item + &quot; &quot;; } } data += head + &quot; n&quot; + &quot;Words count: &quot; + queueName.size() + &quot;, data: &quot; + items; return data; } else { String data = &quot;&quot;; String items = &quot;&quot;; if (queueName.size() == 0) { items = null; } else { for (String item : queueName) { items += item + &quot; &quot;; } } data += &quot;Words count: &quot; + queueName.size() + &quot;, data: &quot; + items; return data; } } public void hack2() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); Queue&lt;Integer&gt; queue2 = new LinkedList&lt;Integer&gt;(); Queue&lt;Integer&gt; mergedQueue = new LinkedList&lt;Integer&gt;(); queue1.add(1); queue1.add(4); queue1.add(5); queue1.add(8); queue2.add(2); queue2.add(3); queue2.add(6); queue2.add(7); System.out.println(&quot;1st Sorted Queue:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;2nd Sorted Queue:&quot;); for (int item : queue2) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); while (queue1.size() != 0 || queue2.size() != 0) { if (queue1.peek() == null) { mergedQueue.add(queue2.remove()); } else if (queue2.peek() == null) { mergedQueue.add(queue1.remove()); } else { if (queue1.peek() &lt;= queue2.peek()) { mergedQueue.add(queue1.remove()); } else { mergedQueue.add(queue2.remove()); } } } System.out.println(&quot;Sorted Merged Queue:&quot;); for (int item : mergedQueue) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public void hack3() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); queue1.add(1); queue1.add(2); queue1.add(3); queue1.add(4); queue1.add(5); queue1.add(6); queue1.add(7); queue1.add(8); System.out.println(&quot;Queue before shuffle:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } int[] tempValues = new int[queue1.size()]; int index = 0; for (int item : queue1) { tempValues[index] = item; index++; } int queueIndex = 0; for (int item : queue1) { int randIndex = (int) (Math.random() * 7); int temp = tempValues[randIndex]; tempValues[randIndex] = tempValues[queueIndex]; tempValues[queueIndex] = temp; queueIndex++; } while (queue1.size() != 0) { queue1.remove(); } for (int value : tempValues) { queue1.add(value); } System.out.println(&quot;&quot;); System.out.println(&quot;Queue after shuffle:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public void hack4() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;(); queue1.add(1); queue1.add(2); queue1.add(3); System.out.println(&quot;Queue before reverse:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); while (queue1.size() != 0) { stack1.push(queue1.remove()); } while (stack1.size() != 0) { queue1.add(stack1.pop()); } System.out.println(&quot;Queue after reverse:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public static void main(String[] args) { LinkedListPractice myObj = new LinkedListPractice(); System.out.println(&quot;Hack 1:&quot;); System.out.println(&quot;-&quot;); myObj.hack1(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 2:&quot;); System.out.println(&quot;-&quot;); myObj.hack2(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 3:&quot;); System.out.println(&quot;-&quot;); myObj.hack3(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 4:&quot;); System.out.println(&quot;-&quot;); myObj.hack4(); } } LinkedListPractice.main(null); . Hack 1: - Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: null Hack 2: - 1st Sorted Queue: 1 4 5 8 2nd Sorted Queue: 2 3 6 7 Sorted Merged Queue: 1 2 3 4 5 6 7 8 Hack 3: - Queue before shuffle: 1 2 3 4 5 6 7 8 Queue after shuffle: 6 5 1 7 8 2 4 3 Hack 4: - Queue before reverse: 1 2 3 Queue after reverse: 3 2 1 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/16/Generic-Types-Collections.html",
            "relUrl": "/jupyter/2023/03/16/Generic-Types-Collections.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Data Types Post",
            "content": "2015 Practice Exam MCQ: 34/39 . Test Corrections: . Generate random value of number cubes | Original Answer: C. Correct Answer: E. Math.random() generates a number between 0 and 1, 1 exclusive. By multiplying Math.random() by 6 and adding 1 to it, we are able to generate a number between 1 and 6, both inclusive. | . showMe method with int parameter | Original Answer: B. Correct Answer: A. The showMe method calls itself recursively until arg is equal to 10 (It calls itself with a value that is one more than arg each iteration). The recursion ends when the method prints out &quot;10.&quot; | . Loop that prints nothing | Original Answer: C. Correct Answer: E. In condition 1, nothing will print out since the base case is already not satisfied. In condition 2, the initialized value of x is not even so nothing will be printed. In condition 3, since x starts off as 1 and always increments by 2, nothing will be printed since x is never even. | . Methods start and changeIt aliases | Original Answer: B. Correct Answer: E. In this case, the changeIt method creates copies of the parameters, instead actually changing the values of them. Since we are referencing the original variable names, the original variable values will be printed instead of the values of the new variables. | . Consider the following code segment type question | Original Answer: A. Correct Answer: C. When the set method is called, it returns the original value that was at the index, instead of the new one. Thus, the first for loop will print out &quot;Alex Bob Carl&quot;, as those are the original values before they are changed. The second for loop will print out &quot;Alex Alex Alex&quot;, since it just prints out the current elements in the ArrayList students. | . public class dataTypes { public static void main(String[] args) { System.out.println(&quot;Integers:&quot;); System.out.println(&quot;&quot;); int[] intArray = {1, 2, 3, 4, 5, 6, 7, 8}; for (int i = 0; i &lt; intArray.length; i++) { System.out.print(intArray[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Doubles:&quot;); System.out.println(&quot;--&quot;); int a = 10; int b = 7; System.out.println(&quot;No Casting: 10/6 = &quot; + a/b); System.out.println(&quot;With Casting: 10/6 = &quot; + (double) a/b); System.out.println(&quot;&quot;); System.out.println(&quot;Booleans:&quot;); System.out.println(&quot;&quot;); boolean c = true; boolean d = false; System.out.println(c); System.out.println(d); System.out.println(c || d); System.out.println(c &amp;&amp; d); System.out.println(!(c &amp;&amp; d) || (c &amp;&amp; !d)); System.out.println(&quot;&quot;); System.out.println(&quot;Characters:&quot;); System.out.println(&quot;--&quot;); char[] partialAlphabet = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;}; for (char alpha : partialAlphabet) { Character newAlpha = alpha; System.out.print(newAlpha + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Strings:&quot;); System.out.println(&quot;--&quot;); String phrase = &quot;Hello, World!&quot;; System.out.println(phrase); phrase = phrase.substring(7, phrase.length()); System.out.println(phrase); for (int j = 0; j &lt; phrase.length(); j++) { System.out.print(phrase.charAt(j) + &quot; &quot;); } } } dataTypes.main(null); . Integers: 1 2 3 4 5 6 7 8 Doubles: -- No Casting: 10/6 = 1 With Casting: 10/6 = 1.4285714285714286 Booleans: true false true false true Characters: -- a b c d e f g Strings: -- Hello, World! World! W o r l d ! . Questions . . What are methods and control structures? | Methods in Java serve as functions, which when called, perform the certain actions written within its code block. Control structures are programming blocks that are used to alter the linear path that a program follows. . Control Structures AP FRQ | . Look at Diverse Arrays and Matrix in Teacher code and see if you think this is Methods and Control structures. | Matrix.java contains a variety of methods that change the contents of a given matrix, and a variety of for loops that serve as iteration control structures, used to iterate through the contents of a matrix. DiverseArray.java contains a method that checks if an array has all distinct values, and it does so by iterating through a given array with both a conventional and enhanced for loop. . Look at Diverse Arrays and Matrix in Teacher code and see if you think this fits Data Types. | In Matrix.java, we can see a variety of data types, as there are 2-dimensional matrices that contain primitive integer type data values. The same goes for DiverseArray.java, which contains both 1-dimensional and 2-dimensional arrays that contain primitive integer data type values. . Describing Math.random | By default, Math.random returns a value between 0 and 1, 1 exclusive. Generate a random number between a minimum value and maximum value, both inclusive, write Math.random() * (max - min) + min; . Review DoNothingByValue, what is key knowledge here? | When you want to change the values of variables passed to a method, you need to make changes to them directly, instead of creating reference variables with the new values. . Review IntByReference, what is key knowledge here? | Wrapper classes can be used to turn primitive types into objects that can be called. Using wrapper classes, methods can be performed on primitive types. . Define &quot;Method and Control Structures&quot;. To the Teacher, the Menu Code has the most work of methodDataTypes files that is related to the &quot;Methods and Control Structures&quot; topic. Such exploration would begin by asking &quot;describe Java Methods and Control structures&quot;. Are instances of MenuRow and Runnable data types, control structures? Does Driver have control structures, enumerate them. | Try, catch, and runnable are all used to prevent errors from negatively affecting the program. When an error happens, the program presents a custom error message that does not take up too much space or time. Menu and Driver both contain control structures and data types, since they both integrate wrapper classes and object types, as well as use for loops and try-catch to display outputs and control the flow of the program. . . Users of a website are asked to provide a review of the website at the end of each visit. Each review, represented by an object of the Review class, consists of an integer indication the user&#39;s rating of the website and an optional String comment field. The comment field in a Review object ends with a period (&quot;.&quot;), exclamation point (&quot;!&quot;), or letter, or is a String of length 0 if the user did not enter a comment. . a. Write the ReviewAnalysis method getAverageRating, which returns the average rating (arithmetic mean) of all elements of allReviews. . b. Write the ReviewAnalysis method collectComments, which collects and formats only comments that contain an exclamation point. The method returns an ArrayList of String objects containing copies of user comments from allReviews that contain an exclamation point, formatted as follows. An empty ArrayList is returned if no comment in allReviews contains an exclamation point. . The String inserted into the ArrayList to be returned begins with the index of Review in allReviews. | The index is immediately followed by a hyphen (&quot;-&quot;). | The hyphen is followed by a copy of the original comment. | The String must end with either a period or an exclamation point. If the original comment from allReviews does not end in either a period or an exclamation point, a period is added. | . | // Review class for initializing individual Review objects from users public class Review { private int rating; private String comment; // Review constructor for setting rating and comment values public Review(int r, String c) { rating = r; comment = c; } // Method for getting rating data from another class public int getRating() { return rating; } // Method for getting comment data from another class public String getComment() { return comment; } } // ReviewAnalysis class for taking all of the user reviews and making analyses about them public class ReviewAnalysis { private Review[] allReviews; private ArrayList&lt;String&gt; sortedComments; // Constructor for initializing the allReviews array, which contains all user Review objects public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } // Method for finding the average rating given by all of the users, which it does by adding all of the ratings up, // then dividing the sum by the number of reviews public double getAverageRating() { double averageRating = 0; for (Review review : allReviews) { averageRating += review.getRating(); } averageRating /= allReviews.length; return averageRating; } // Method for sorting all of the comments that contain an exclamation point, which it does by iterating through the allReviews array, // then looping through the characters of the selected Review object&#39;s comment property, and adds the comment if it contains an exclamation point, // adding a period to the end of it if it does not already end with an exclamation point or period public ArrayList&lt;String&gt; collectComments() { sortedComments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String comment = allReviews[i].getComment(); String finalComment = &quot;&quot;; for (int j = 0; j &lt; comment.length(); j++) { if (comment.charAt(j) == &#39;!&#39;) { finalComment += i + &quot;-&quot; + comment; if (comment.charAt(comment.length() - 1) != &#39;!&#39; &amp;&amp; comment.charAt(comment.length() - 1) != &#39;.&#39;) { finalComment += &#39;.&#39;; } break; } } sortedComments.add(finalComment); } return sortedComments; } } // Main class for presenting test cases public class Main { public static void main(String[] args) { Review firstReview = new Review(4, &quot;Good! Thx&quot;); Review secondReview = new Review(3, &quot;OK site&quot;); Review thirdReview = new Review(5, &quot;Great!&quot;); Review fourthReview = new Review(2, &quot;Poor! Bad.&quot;); Review fifthReview = new Review(3, &quot;&quot;); Review[] reviews = {firstReview, secondReview, thirdReview, fourthReview, fifthReview}; ReviewAnalysis myObj = new ReviewAnalysis(reviews); System.out.println(myObj.getAverageRating()); for (String sortedComment : myObj.collectComments()) { System.out.print(sortedComment + &quot; &quot;); } } } Main.main(null); . 3.4 0-Good! Thx. 2-Great! 3-Poor! Bad. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/07/Data-Types.html",
            "relUrl": "/jupyter/2023/03/07/Data-Types.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Extra Seed Post",
            "content": "import java.util.Scanner; import java.util.ArrayList; public class seedExtra { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); int a = userInput.nextInt(); int b = userInput.nextInt(); int c = a + b; ArrayList&lt;Integer&gt; binary = new ArrayList&lt;Integer&gt;(); int sum = 0; for (int i = 7; i &gt;= 0; i--) { sum += Math.pow(2, i); if (sum == c) { binary.add(1); for (int j = i - 1; j &gt;= 0; j--) { binary.add(0); } break; } else if (sum &gt; c) { sum -= Math.pow(2, i); binary.add(0); } else if (sum &lt; c) { binary.add(1); } } String finalAnswer = &quot;&quot;; int zeroCount = 0; for (int x = 0; x &lt; binary.size(); x++) { finalAnswer += binary.get(x); } for (int y = 0; y &lt; finalAnswer.length(); y++) { if (finalAnswer.charAt(y) == &#39;1&#39;) { finalAnswer = finalAnswer.substring(y, finalAnswer.length()); break; } else if (y == finalAnswer.length() - 1) { finalAnswer = &quot;0&quot;; break; } } System.out.println(finalAnswer); } } seedExtra.main(null); . 1100100 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/06/Seed-Extra.html",
            "relUrl": "/jupyter/2023/03/06/Seed-Extra.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Tri 2 Test Corrections 2",
            "content": "Tri 2 Test Corrections 2: . Question 15 Original Answer: A. Correct Answer: E. | A is incorrect because in a string that has one or more occurrences of the letter “A,” the statement would discard the portion of str from the first occurence of “A” to the end. E is correct because the statement selects characters of str starting one character after pos. | . | Question 25 Original Answer: D. Correct Answer: B. | D is incorrect because this would be the result if the loop condition was k &gt; 1 instead of k &gt; 0. B is correct the provided method contains a for loop with a loop control variable k, which starts at the last index of animals, decrements by 1 each iteration, until k is equal to 0. | . | Question 35 Original Answer: D. Correct Answer: C. | D is incorrect because this would be the result if the print statement given printed the value at index k instead of the index itself. C is correct because it is the result when the print statement prints the correct index. | . | Question 38 Original Answer: C. Correct Answer: D. | C is incorrect because this would be the result if the loop control variable in the for loop was str.length() instead of str.length() - 1. D is correct because when i is 4, temp is assigned l, when i is 3, p is appended to temp, when i is 2, p is appended to temp, and finally when i is 1, a is appended to temp, leading to a final result String of “lppa.” | . |",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2023/01/30/Tri-2-Test-Corrections-2.html",
            "relUrl": "/2023/01/30/Tri-2-Test-Corrections-2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Title",
            "content": "class Solution { public String removeDuplicates(String s) { String finalString = s; int stringLength = finalString.length(); while (stringLength &gt; 1) { for (int i = 0; i &lt; finalString.length() - 1; i++) { if (finalString.charAt(i) == finalString.charAt(i + 1)) { finalString = finalString.substring(0 , i) + finalString.substring(i + 2, finalString.length()); stringLength -= 2; } } } return finalString; } public static void main(String[] args) { Solution myObj = new Solution(); System.out.println(myObj.removeDuplicates(&quot;abbaca&quot;)); } } Solution.main(null); . aaca ca ca ca . public class Main { public static void main(String[] args) { int[] numbers = {5, 12, 8, 2, 91, 23, 16, 56, 38, 72}; int swapCount = 0; for (int i = 0; i &lt; numbers.length - 1; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; swapCount++; } if (i == numbers.length - 2 &amp;&amp; swapCount != 0) { swapCount = 0; i = -1; } } for (int number : numbers) { System.out.println(number); } } } Main.main(null); . 2 5 8 12 16 23 38 56 72 91 . public class Country { // properties } public class Main { // properties, methods, and ArrayList public static void main(String[] args) { } } public void Pyramid(int n) { for (int i = 1; i &lt;= n; i++) { System.out.println(&quot;*&quot;); System.out.println(); Pyramid(n - 1); } } Pyramid(10); public void drawLine(int n) { for (int i = 1; i &lt;= n; i++) { System.out.print(&quot;*&quot;); System.out.println(); drawLine(n - 1); } } drawLine(10); Main.main(null); . 0 1 2 3 4 5 6 7 8 9 10 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/12/19/Test-Code.html",
            "relUrl": "/2022/12/19/Test-Code.html",
            "date": " • Dec 19, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Recursion HW Post",
            "content": "Notes . A recursive method is basically a method that calls itself. It usually contains a case that halts recursion and another that continues recursion. | Each recursive call has its own local variables, and parameter values check the progress of a recursion process. | A recursion is essentially another form of iteration. | Recursion is typically used to traverse through Strings, arrays, and ArrayLists. | A merge sort utilizes a divide and conquer algorithm to sort ArrayLists. It first divides the ArrayList into halves, then calls itself in both halves to sort them, and finally combines them when they are sorted. | Recursion trees are used to visualize each recursive case for recursion code. | There are 2 main cases in recursion. The base case serves as the lowest level condition for which recursion will halt. The recursive case continuously calls the method itself at lower levels until the base case is reached. | . public class Recursion { public int fac(int num) { if (num == 1) { return 1; } else { return num * fac(num - 1); } } public static void main(String[] args) { Recursion myObj = new Recursion(); System.out.println(&quot;1! = &quot; + myObj.fac(1)); System.out.println(&quot;2! = &quot; + myObj.fac(2)); System.out.println(&quot;3! = &quot; + myObj.fac(3)); System.out.println(&quot;4! = &quot; + myObj.fac(4)); } } Recursion.main(null); . 1! = 1 2! = 2 3! = 6 4! = 24 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/15/Recursion-HW.html",
            "relUrl": "/jupyter/2022/12/15/Recursion-HW.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "2019 FRQ 4 Post",
            "content": "The LightBoard class models a two-dimensional display of lights, where each light is either on or off, as represented by a Boolean value. You will implement a constructor to initialize the display and a method to evaluate a light. . public class LightBoard { // 2D array storing all of the boolean light values (true indicates a light is on, while false indicates a light is off) private boolean[][] lights; // Constructor that initializes all of the random boolean values in the 2D array. Each light has a 40% chance of being on public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int i = 0; i &lt; numRows; i++) { for (int j = 0; j &lt; numCols; j++) { int randNumber = (int) Math.floor(Math.random() * 10) + 1; // Use of ternary operator to concise code boolean boolValue = (randNumber &lt;= 4) ? true : false; lights[i][j] = boolValue; } } } // boolean method that returns false if the selected light is on and if the number of lights that are on in its column is even // returns true if the selected light is off and if the number of lights that are on in its column is divisible by 3 (Note that 0 is divisible by any number except itself) // returns lightStatus if the previous 2 conditions are not met public boolean evaluateLight(int row, int col) { boolean lightStatus = lights[row][col]; int lightOnCount = 0; for (int i = 0; i &lt; lights[col].length; i++) { if (lights[i][col] == true) { lightOnCount++; } } if (lightStatus == true &amp;&amp; lightOnCount % 2 == 0) { return false; } else if (lightStatus == false &amp;&amp; lightOnCount % 3 == 0) { return true; } return lightStatus; } // main tester method for running the code in the LightBoard class public static void main(String[] args) { LightBoard myObj = new LightBoard(4, 4); for (int x = 0; x &lt; myObj.lights.length; x++) { for (int y = 0; y &lt; myObj.lights[x].length; y++) { System.out.print(myObj.lights[x][y] + &quot; &quot;); } System.out.println(&quot;&quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;evaluateLight method output: &quot; + myObj.evaluateLight(1, 1)); } } LightBoard.main(null); . false false false false true true false false false false true true false false true false evaluateLight method output: true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/08/LightBoard.html",
            "relUrl": "/jupyter/2022/12/08/LightBoard.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Two Dimensional Arrays HW Post",
            "content": "Notes: . A 2D array is essentially an array of arrays. To elaborate, it is a type of multidimensional array. | To initialize a 2D array, specify the type, follow it with &quot;[][]&quot;, then follow that with the name of the 2D array (e.g. int[][] numbers) | Method 1 of initializing 2D arrays: int[][] numbers1 = | When you initialize a 2D array using method 1, each row can have a different number of columns, or in other words, each array within the array can have a different number of values. | Method 2 of initializing 2D arrays: int[][] numbers2 = new int[4][4]; | Normally, to iterate through a 2D array, you use a for loop, which iterates through the rows, as well as a nested for loop, which iterates through the columns. | To access and change elements of 2D arrays, you would use indices to specify which row and which column. | . Homework: . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . // import Scanner library to take in user input import java.util.Scanner; // Class containing all of the 2D array methods public class TwoDimensionalArrays { public int[][] numberList; public int[][] numberListReverse; Scanner userInput = new Scanner(System.in); // Constructor for initializing all of the randomly generated values in the 4 by 4 2D array public TwoDimensionalArrays() { numberList = new int[4][4]; numberListReverse = new int[4][4]; for (int a = 0; a &lt; numberList.length; a++) { for (int b = 0; b &lt; numberList[a].length; b++) { int randNum = (int) Math.floor(Math.random() * 101); numberList[a][b] = randNum; numberListReverse[a][b] = randNum; } } } // Method for printing a 2D array public void printArray(int[][] numberListPrint) { for (int x = 0; x &lt; numberListPrint.length; x++) { for (int y = 0; y &lt; numberListPrint[x].length; y++) { System.out.print(numberListPrint[x][y] + &quot; &quot;); } System.out.println(&quot;&quot;); } } // Method for reversing the rows and columns of the original 2D array public void reverseArray() { for (int i = 0; i &lt; numberListReverse.length; i++) { for (int j = 0; j &lt; (numberListReverse[i].length)/2; j++) { int numOfColumns = numberListReverse[i].length; int temp = numberListReverse[i][j]; numberListReverse[i][j] = numberListReverse[i][numOfColumns - (j + 1)]; numberListReverse[i][numOfColumns - (j + 1)] = temp; } } for (int i = 0; i &lt; (numberListReverse.length)/2; i++) { int numOfRows = numberListReverse.length; int[] temp = numberListReverse[i]; numberListReverse[i] = numberListReverse[numOfRows - (i + 1)]; numberListReverse[numOfRows - (i + 1)] = temp; } printArray(numberListReverse); } // Method for getting the value of the original 2D array at the inputted coordinates public void getCorrespondingValue() { System.out.println(&quot;Choose the desired row (Starting with 0):&quot;); int rowNumber = userInput.nextInt(); System.out.println(&quot;Choose the desired column (Starting with 0):&quot;); int columnNumber = userInput.nextInt(); int correspondingValue = numberList[rowNumber][columnNumber]; System.out.println(&quot;The corresponding value to the position you entered in the 2D array numberList is: &quot; + correspondingValue); } // Method for multiplying each value of a row together, then adding all of the products together public void addProducts() { int sum = 0; for (int i = 0; i &lt; numberList.length; i++) { int product = 1; for (int j = 0; j &lt; numberList[i].length; j++) { product *= numberList[i][j]; } sum += product; } System.out.println(&quot;The sum of all products in the original 2D array is: &quot; + sum); } } // Main class that contains the main tester function class Main { // Tester function to run all of the code outputs public static void main(String[] args) { // TwoDimensionalArrays object used for accessing and running the 2D array methods TwoDimensionalArrays myObj = new TwoDimensionalArrays(); System.out.println(&quot;Original randomly generated 2D array:&quot;); System.out.println(&quot;-&quot;); myObj.printArray(myObj.numberList); System.out.println(&quot;&quot;); System.out.println(&quot;Reversed 2D array:&quot;); System.out.println(&quot;&quot;); myObj.reverseArray(); System.out.println(&quot;&quot;); System.out.println(&quot;Enter a position to get a corresponding value:&quot;); System.out.println(&quot;-&quot;); myObj.getCorrespondingValue(); System.out.println(&quot;&quot;); System.out.println(&quot;Sum of all row products of the original 2D array:&quot;); System.out.println(&quot;-&quot;); myObj.addProducts(); System.out.println(&quot;&quot;); } } Main.main(null); . Original randomly generated 2D array: - 19 79 24 17 96 84 91 18 89 97 94 77 13 59 85 81 Reversed 2D array: 81 85 59 13 77 94 97 89 18 91 84 96 17 24 79 19 Enter a position to get a corresponding value: - Choose the desired row (Starting with 0): Choose the desired column (Starting with 0): The corresponding value to the position you entered in the 2D array numberList is: 19 Sum of all row products of the original 2D array: - The sum of all products in the original 2D array is: 81587689 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/06/Two-Dimensional-Arrays-HW.html",
            "relUrl": "/jupyter/2022/12/06/Two-Dimensional-Arrays-HW.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "ArrayLists HW Post",
            "content": "Notes: . An ArrayList is a reference type that is mutable (changeable) and contains object references. | To initialize an ArrayList, write: ArrayList courses = new ArrayList();&lt;/li&gt; To add an element to a particular index in an ArrayList, use the add(int index, element); method. To add all elements in a specified collection to an ArrayList, use the addAll(int index, Collection collection); method. | To get the size of an ArrayList, use the size(); method. | To remove an element of an ArrayList at a particular index, use the remove(element or int index); method. | To retrieve the element at a particular index of an ArrayList, use the get(int index); method. | Searching involves locating data within linear structures (e.g. arrays, lists, stacks, etc.). Searching a linear structure can be done with control structures, which include sequential, selection, and iteration. | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Homework: . Create an ArrayList that includes 2 of the 4 factors listed below. . Sort an ArrayList in descending order and swap the first and last elements | Find and display the hashCode of an ArrayList before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list | . // Import Java Collections library import java.util.Collections; // Class containing ArrayList methods public class ArrayLists { public ArrayList&lt;Integer&gt; numberList; public ArrayList&lt;Integer&gt; numberList2; Scanner userInput = new Scanner(System.in); // Constructor for initializing ArrayList elements public ArrayLists() { numberList = new ArrayList&lt;Integer&gt;(); numberList.add(1); numberList.add(10); numberList.add(7); numberList.add(8); numberList2 = new ArrayList&lt;Integer&gt;(); numberList2.add(3); numberList2.add(9); numberList2.add(21); } // Method for sorting the ArrayList in descending order and swapping the first and last elements. public void descend() { ArrayList&lt;Integer&gt; numberListDescend = new ArrayList&lt;Integer&gt;(); numberListDescend.addAll(numberList); Collections.sort(numberListDescend, Collections.reverseOrder()); int temp = numberListDescend.get(0); numberListDescend.set(0, numberListDescend.get(numberListDescend.size() - 1)); numberListDescend.set(numberListDescend.size() - 1, temp); System.out.println(&quot;Descending ArrayList with the first and last elements swapped:&quot;); for (int item : numberListDescend) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); getHashCode(numberListDescend); } // Method that gets the hash code of the ArrayList before and after it is sorted in descending order public void getHashCode(ArrayList&lt;Integer&gt; numberListDescend) { System.out.println(&quot;Hash code of ArrayList before sorting: &quot; + numberList.hashCode()); System.out.println(&quot;Hash code of ArrayList after sorting: &quot; + numberListDescend.hashCode()); } // Check if given ArrayList is in ascending order public boolean isAscending() { for (int i = 0; i &lt; numberList.size() - 1; i++) { if (numberList.get(i) &gt; numberList.get(i + 1)) { return false; } } return true; } // Check if given ArrayList is in descending order public boolean isDescending() { for (int i = 0; i &lt; numberList.size() - 1; i++) { if (numberList.get(i) &lt; numberList.get(i + 1)) { return false; } } return true; } // Method for identifying ArrayList as either ascending, descending, or neither public void sortCheck() { if (isAscending() == true) { System.out.println(&quot;ArrayList numberList is ascending&quot;); } else if (isDescending() == true) { System.out.println(&quot;ArrayList numberList is descending&quot;); } else { System.out.println(&quot;ArrayList numberList is neither ascending nor descending&quot;); } } // Method that replaces 3 elements of an ArrayList with elements of another ArrayList, then reverses the former ArrayList public void replacement() { ArrayList&lt;Integer&gt; numberListReplacement = new ArrayList&lt;Integer&gt;(); numberListReplacement.addAll(numberList); numberListReplacement.set(0, numberList2.get(0)); numberListReplacement.set(1, numberList2.get(1)); numberListReplacement.set(2, numberList2.get(2)); Collections.reverse(numberListReplacement); System.out.println(&quot;ArrayList with 3 values replaced and is reversed:&quot;); for (int item : numberListReplacement) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } } // Main class for running code class Main { // Tester function for visualizing outputs public static void main(String[] args) { ArrayLists myObj = new ArrayLists(); System.out.println(&quot;Original ArrayList:&quot;); for (int item : myObj.numberList) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); myObj.descend(); myObj.sortCheck(); myObj.replacement(); } } Main.main(null); . Original ArrayList: 1 10 7 8 Descending ArrayList with the first and last elements swapped: 1 8 7 10 Hash code of ArrayList before sorting: 963147 Hash code of ArrayList after sorting: 961227 ArrayList numberList is neither ascending nor descending ArrayList with 3 values replaced and is reversed: 8 21 9 3 . &lt;/div&gt; | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/05/ArrayLists-HW.html",
            "relUrl": "/jupyter/2022/12/05/ArrayLists-HW.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Vocabulary Part 4 Post",
            "content": "Subclass Constructor and super Keywords: Since constructors are not members, they are not inherited by the subclasses. However, the constructor of the superclass can be invoked from the subclass. The super keyword makes this possible, as it refers to superclass objects. It can be used to call superclass methods, as well as access the superclass constructor. | Method Overloading: A feature that allows a class to have multiple method with the same name, but they each have to have different parameters. | Method Overriding: A feature that occurs when a subclass has a method with the same name as a method in the superclass. Essentially, the subclass implements a method declared by the superclass. | Abstract Class and Abstract Method: An abstract class is a type of restricted class that cannot be be used to create objects. To access it, it has to be inherited from another class. An abstract method can only be used in an abstract class, and it does not comprise of a body. The body of an abstract method is provided by the subclass that inherits it. | toString(), equals(), and hashCode() standard methods: toString() converts an object variable into a string. equals() is typically used to check for equality between two string variables. hashCode() returns the integer hash code value of an object. | Object Late Binding: Also known as dynamic linkage, late binding occurs when the name of the method being called upon an object is looked up at runtime. | Polymorphism: Referring to &quot;many forms&quot;, polymorphism occurs when there are many classes that relate to each other by inheritance. Polymorphism generally involves using inherited attributes and methods to perform different kinds of tasks among different subclasses. | Big O Notation: A mathematical notation that deals with the limiting behavior of a function when the argument goes toward a particular value or infinity. | . public class VocabFour { int a; public VocabFour() { a = 7; } public void methodOne() { System.out.println(&quot;Method one works!&quot;); } public void methodOne(int i) { System.out.println(&quot;Method one with integer &quot; + i + &quot; works!&quot; ); } public void methodTwo() { System.out.println(&quot;Superclass method two works!&quot;); } } class SubVocabFour extends VocabFour { // Method overriding public void methodTwo() { // super keyword super.methodTwo(); System.out.println(&quot;Subclass method two works!&quot;); } public static void main(String[] args) { SubVocabFour myObj = new SubVocabFour(); // Method overloading myObj.methodOne(); myObj.methodOne(7); myObj.methodTwo(); Integer num = 7; num.toString(); System.out.println(&quot;toString() method: &quot; + num.getClass()); String one = &quot;Sup&quot;; String two = &quot;Sup&quot;; System.out.println(&quot;equals() method: &quot; + one.equals(two)); System.out.println(&quot;hashCode() method for String variable two: &quot; + two.hashCode()); } } SubVocabFour.main(null); . Method one works! Method one with integer 7 works! Superclass method two works! Subclass method two works! toString() method: class java.lang.Integer equals() method: true hashCode() method for String variable two: 83502 . // Abstract class and method public abstract class AbsVocabFour { public abstract void printMessage(); } // Child class inherits the abstract class defines body for the abstract method class SubAbsVocabFour extends AbsVocabFour { public void printMessage() { System.out.println(&quot;Abstract message successful!&quot;); } public static void main(String[] args) { SubAbsVocabFour myObj = new SubAbsVocabFour(); myObj.printMessage(); } } SubAbsVocabFour.main(null); . Abstract message successful! . // Polymorphism class Sport { public void typeOfBall() { System.out.println(&quot;The sport uses this kind of ball&quot;); } } class Basketball extends Sport { public void typeOfBall() { System.out.println(&quot;The sport uses a basketball&quot;); } } class Soccer extends Sport { public void typeOfBall() { System.out.println(&quot;The sport uses a soccer ball&quot;); } } class Main { public static void main(String[] args) { Sport mySport = new Sport(); // Late object binding Sport myBasketball = new Basketball(); Sport mySoccer = new Soccer(); mySport.typeOfBall(); myBasketball.typeOfBall(); mySoccer.typeOfBall(); } } Main.main(null); . The sport uses this kind of ball The sport uses a basketball The sport uses a soccer ball .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-4.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-4.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Vocabulary Part 3 Post",
            "content": "Accessor Methods: A method that fetches private data that is stored in an object. This method is related to &quot;getting&quot; data. | Mutator Methods: A method that controls changes to a variable. This method is related to &quot;setting&quot; data. Usually, a setter method is accompanied by a getter method. | Static Variables and Class Variables: A static variable is a variable that has been statically allocated, which means that its lifetime is the entire run of the program. A class variable is a variable that is defined in a class in which only a single copy exists, regardless of how many instances of objects of that class exist. | Public, Private, and Protected Access Modifiers: The public access modifier makes it so that the code is accessible for all classes. The private access modifier makes it so that the code is only accessible within the declared class. The protected access modifier makes it so that the code is only accessible in the same package and subclasses. | Static Methods and Class Methods: A static method is a method that can be called directly, without the need of creating an object of the class the static method is in. A class method is a method that is bound to a class instead of its object. It can be called by both a class and an object. | this Keyword: The this keyword is a reference variable that refers to the current object in a method or constructor. | main method and tester methods: The main method serves as an entry point for executing a Java program. It can contain code and call methods to execute. Tester methods are basically instances of main methods being used. | Inheritance: An OOP concept that allows subclasses to acquire the properties of a superclass. With inheritance, children classes can inherit the features of a parent class. | . public class VocabThree { // Initialized private int variable private int num; // Accessor method public int getNum() { return num; } // Mutator method public void setNum(int numInput) { // this keyword this.num = numInput; } // Static variable static int staticVar = 7; // Class variable public int classVar = 7; // Protected variable protected int protectedVar = 7; //Static method static void runStatic() { System.out.println(&quot;Static method is working!&quot;); } //Class method public void runClass() { System.out.println(&quot;Class method is working!&quot;); } // main/tester method public static void main(String[] args) { // Create an object to access class variables VocabThree myObj = new VocabThree(); System.out.println(&quot;Printing Static Variable: &quot; + staticVar); System.out.println(&quot;Printing Class Variable: &quot; + myObj.classVar); runStatic(); myObj.runClass(); } } VocabThree.main(null); . Printing Static Variable: 7 Printing Class Variable: 7 Static method is working! Class method is working! . // Inheritance class SubVocabThree extends VocabThree { // main/tester method public static void main(String[] args) { // Running inherited class method SubVocabThree myObj = new SubVocabThree(); myObj.runClass(); } } SubVocabThree.main(null); . Class method is working! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-3.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-3.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Vocabulary Part 2 Post",
            "content": "Comparing Numbers: To compare 2 numbers in Java, we mainly use the &gt;, &lt;, and == operators. == Checks if 2 numbers are equal to each others. &gt; checks if the first number is greater than the second number. &lt; checks if the second number is greater than the first number. | Comparing Strings: To compare 2 strings in Java, we mainly use the equals() and compareTo() method. The equals() method checks if 2 strings are equal to each other, and the compareTo() method compares string values lexicographically. | Comparing Objects: To compare 2 objects in Java, we mainly use the equals() method to check for equality between 2 objects. | For Loop and Enhanced For Loop: A for loop basically iterates through a given group of statements multiple times, and keeps running as long as the set condition evaluates to true. A for loop generally has some kind of incrementing in one of its parameter. An enhanced for loop as also known as a for-each loop, which is a type of control flow statement that iterates through each element of a data collection (e.g. arrays). | While Loop vs. Do-While Loop: A while loop executes a given group of statements multiple times as long as the boolean condition is met, and a do-while loop is also used to do the same thing, although it executes at least once, even if the boolean condition is not met. | Nested Loop: A nested loop is a loop statement inside another loop statement, or in other words, an inner loop statement within the body of an outer loop statement. It is typically used to print dimensions as in rows and loops. | Class Creation: In Java, a class is user-defined blueprint that is used to create objects. To create a class, write &quot;class ClassName {}.&quot; The naming convention for creating classes in Java is generally to capitalize the first letter of each word. | Constructor: A constructor is a special method in Java that is used to initialize values in objects, as it is called whenever an object of a class is created. To create a constructor, write &quot;public ClassName(){}.&quot; | . public class VocabTwo { public static void main(String[] args) { System.out.println(&quot;Comparing Numbers:&quot;); int a = 5; int b = 10; int c = 3; System.out.println(a == a); System.out.println(a &lt; b); System.out.println(a &gt; c); System.out.println(&quot;&quot;); System.out.println(&quot;Comparing Strings:&quot;); String string1 = &quot;Hello World&quot;; String string2 = &quot;Hello!&quot;; System.out.println(string1.equals(string2)); System.out.println(string1.compareTo(string2)); System.out.println(&quot;&quot;); System.out.println(&quot;Comparing Objects&quot;); Integer int1 = new Integer(7); Integer int2 = new Integer(7); Integer int3 = new Integer(8); System.out.println(int1.equals(int2)); System.out.println(int1.equals(int3)); System.out.println(&quot;&quot;); System.out.println(&quot;For Loop and Enhanced For Loop:&quot;); for (int i = 0; i &lt; 10; i++) { System.out.print(i + &quot; &quot;); } System.out.println(&quot;&quot;); int[] forLoopArray = {0, 1, 2, 3, 4, 5, 6, 7}; for (int element : forLoopArray) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;While Loop vs. Do-While Loop:&quot;); int w = 0; while(w &lt; forLoopArray.length) { System.out.print(forLoopArray[w] + &quot; &quot;); w++; } System.out.println(&quot;&quot;); int z = 0; do { System.out.println(z); } while (z &lt; 0); System.out.println(&quot;&quot;); System.out.println(&quot;Nested Loop:&quot;); int[][] multiDimensionalArray = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { System.out.print(multiDimensionalArray[i][j] + &quot; &quot;); } System.out.println(&quot;&quot;); } System.out.println(&quot;&quot;); } } VocabTwo.main(null); . Comparing Numbers: true true true Comparing Strings: false -1 Comparing Objects true false For Loop and Enhanced For Loop: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 While Loop vs. Do-While Loop: 0 1 2 3 4 5 6 7 0 Nested Loop: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . // Class Creation public class Main { // Variable x is declared int x; // Constructor public Main() { // Variable x is assigned a value 7 x = 7; } public void printMessage() { System.out.println(&quot;Hello, World!&quot;); } } class Tester { public static void main(String[] args) { // Create an object with an attribute &quot;x&quot; immediately initialized due to the constructor. Main myObj = new Main(); System.out.println(myObj.x); myObj.printMessage(); } } Tester.main(null); . 7 Hello, World! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-2.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Vocabulary Part 1 Post",
            "content": "Casting (Division): In coding, float/float = float, float/int = float, int/float = float, and int/int. As shown, you only need to cast one of each number in division operations. | Casting (Truncating and Rounding): Truncation removes the decimal portion of the number, while rounding alters a number to the nearest one less precise decimal place. Casting from double to int will result in truncation. | Wrapper Classes: Wrapper classes allow primitive data types such as int and boolean to be used as objects. The wrapper class of int is Integer. When using ArrayLists, which only store objects, we use the wrapper class Integer instead of int. | Concatenation: The &quot;+&quot; operator is used to achieve concatenation, which is typically used to combine strings. When combining a string and 2 ints, the 2 ints will not be mathematically computed and will be transformed into strings from the beginning. | Math Class: The Math class can be utilized to perform various math operations such as power and square root on number variables. The Math.random() method can be used to generate a random number. Math.random() * (max - min) + min; will generate a random number between min and max, including min but excluding max. | Compound Boolean Expression: Created by the &amp;&amp; symbol and multiple boolean expressions, a compound boolean expression makes it so that if the first expression is false, then the whole expression will also be false. All expressions need to be true in order for a compound boolean expression to return true. | Truth Tables: Truth tables display all of the possible values of a logic function. Truth tables generally comprise of several rows and columns, with the top row containing all of the logical variables and combinations, and the bottom rows containing all of the possible outputs. | De Morgan&#39;s Law: De Morgan&#39;s Law basically states that the complement of the union of 2 sets is the intersection of their complements and that the complement of the intersection of 2 sets is the union of their complements. | . import java.util.ArrayList; public class VocabOne { public static void main(String[] args) { System.out.println(&quot;Casting (Division):&quot;); int x = 2; int y = 3; System.out.println(y/x); System.out.println((float) y/ x); System.out.println(y/ (float) x); System.out.println((float) y/ (float) x); System.out.println(&quot;&quot;); System.out.println(&quot;Casting (Truncating and Rounding):&quot;); double w = 3.7; System.out.println((int) w); System.out.println(&quot;&quot;); System.out.println(&quot;Wrapper Classes:&quot;); ArrayList&lt;Integer&gt; testArrayList = new ArrayList&lt;Integer&gt;(); System.out.println(&quot;ArrayList&lt;Integer&gt; works, but ArrayList&lt;int&gt; does not; &quot; + testArrayList); System.out.println(&quot;&quot;); System.out.println(&quot;Concatenation:&quot;); String one = &quot;Hey&quot;; int two = 2; int three = 3; System.out.println(&quot;one + two + three = &quot; + one + two + three); System.out.println(&quot;two + three + one = &quot; + two + three + one); System.out.println(&quot;two + one + three = &quot; + two + one + three); System.out.println(&quot;&quot;); System.out.println(&quot;Math Class:&quot;); int min = 1; int max = 11; int randInt = (int) Math.floor(Math.random() * (max - min) + min); System.out.println(&quot;Randomly generated number between 1 and 10, inclusive: &quot; + randInt); System.out.println(&quot;&quot;); System.out.println(&quot;Compound Boolean Expression:&quot;); int i = 5; int j = 10; System.out.println(i == 5 &amp;&amp; j == 10); System.out.println(i == 5 &amp;&amp; j == 5); System.out.println(&quot;&quot;); System.out.println(&quot;De Morgan&#39;s Law:&quot;); System.out.println(!(i == 5 &amp;&amp; j == 5)); System.out.println(!(i == 5) || !(j == 5)); System.out.println(&quot;&quot;); } } VocabOne.main(null); . Casting (Division): 1 1.5 1.5 1.5 Casting (Truncating and Rounding): 3 Wrapper Classes: ArrayList&lt;Integer&gt; works, but ArrayList&lt;int&gt; does not; [] Concatenation: one + two + three = Hey23 two + three + one = 23Hey two + one + three = 2Hey3 Math Class Randomly generated number between 1 and 10, inclusive: 9 Compound Boolean Expression true false De Morgan&#39;s Law true true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-1.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Test Corrections Trimester 2",
            "content": "2014 Practice Exam MCQ Test Corrections . Question 3: Original Answer: E. A method that is made private means that other classes will not be able to call it. | Correct Answer: B. An accessor method lets other objects access the value of instance variables without actually changing them. The accessor method should be public. | . | Question 8: Original Answer: B. Choice II is not the only program that will compile without error. | Correct Answer C. Choice I successfully create a new object Student and assigns it to variable a of type Student using a no parameter constructor. Choice II uses a two-parameter constuctor with parameters String and int in order to successfully a create a new object Student and assign it to variable b of type Student. | . | Question 17: Original Answer: B. Since the size of the given array is immutable, when the program is run, no values are actually removed from the array. | Correct Answer: C. In the first iteration of the program, arr[3] is assigned the value[4]. In each iteration, the current value corresponding to the current index is copied to the element to the left. | . | Question 18: Original Answer: C. The statement given will result in an error, since the indices for myList range from 0 to myList.size() - 1, not 1 to myList.size(). | Correct Answer: B. The indices for myList range from 0 to myList.size() - 1, and since Math.random() randomly generates a random float point number between 0 and 1, excluding 1, this range will be satisfied. With the int type cast, an integer index value between 0 and myList.size() - 1, inclusive, will be generated. | . | Question 19: Original Answer: E. The opposite of !(a != b) is (a != b), due to the precense of a logic operator. With De Morgan’s Law, the logic operator &amp;&amp; becomes |   | and vice versa. The opposite of (b &gt; 7) is (b &lt;= 7). | . | Correct Answer: B. De Morgan’s Law states that !(a &amp;&amp; b) is equal to !a |   | !b. After negating the first expression, we get (!(a != b)) |   | !(b &gt; 7). After negative the second expression, we get (a != b) |   | (b &lt;= 7). | . | . | Question 22: Original Answer: C. Objects of a subclass inherit the methods of the super class. This means that the AudioBook object can call the toString method from the Book class. | Correct Answer: B. Because the books array has been declared of type Book, all objects saved in books are consided the Book object regardless of their actual type. As such, any methods that are called on elements of books must be declared Book. This means that in order to call the pagesPerMinute() method on Book[0], we need to use typecasting to allow the compiler to know that the object saved in the books array at this index is actually an AudioBook object. | . | Question 23: Original Answer: D. This would’ve been the result if the loop condition was k &gt; 1 instead of k &gt; 0. In other words, this would’ve been the output if the loop incremented one less. | Correct Answer: B. The loop basically looks at the element of the array at a specific index, checking if it starts with “b”. If it does, then it is inserted near beginning of the array. | . | Question 28: Original Answer: B. If the value of n is 2 or less in the original call of the method mystery, then the loop will be skipped and x will be 1 at //Point C. | Correct Answer: E. The while loop implemented only interates while n is greater than 2, and //Point B is in the body of the while loop prior to any change in the value n. During this time, n will always be greater than 2. | . | Question 30: Original Answer: B. This would’ve been the result if the first substring call was word.substring(howFar, word.length()). | Correct Answer: C. The substring method basically returns a substring beginning at the first parameter and ending at the second parameter - 1. The result of word.substring(howFar + 1, word.length()) is “iler”. The result of word.substring(0, howFar) is “com”. All in all, the method will return “ilercom”. | . | Question 33: Original Answer: C. This would be the correct answer if the boolean condition was changed from |   | to &amp;&amp;. However, since k is never incremented, |   | will always be true since k will always be less than 4. | . | Correct Answer: E. Since k is never changed in the body of the while loop, it will always have a value 1 and thus less than 4. This means the boolean expression |   | for the while loop will always evaluate to true, and therefore lead to an infinite loop. | . | . | Question 34: Original Answer: D. Choice III uses the default constructor Point to assign center to a new Point with x and y both equal to 0. However, it attempts to update x and y, which are both private instance variables in Point, leading to a compile time error since x and y are not able to be accessed directly in the class Circle. | Correct Answer: B. Choice II successfully creates a new Point with x assigned to value b and y assigned to value b using the two-parameter Point constructor. | . | Question 39: Original Answer: E. Although the return value of recur(9) is 18, this call is made within another recursive call, which means that it is not the true final return value. | Correct Answer: D. The inital call recur(27) has a return value of recur(recur(9)). The inner call recur(9) returns 18, which means the outer call becomes recur(18). The call recur(18) returns recur(recur(6)). The inner call recur(6) returns 12, which means the outer call becomes recur(12). The call recur(12) returns recur(recur(4)). The inner call recur(4) returns 8, which means the outer call becomes recur(8). The call recur(8) returns 16, which is the final return value of the initial call recur(27). | . | Question 40: Original Answer: A. This would’ve been the result if System.out.println(temp); was before the recursive call to whatsItDo(temp); When the recursive call is executed, the current sequence of statements are paused. | Correct Answer: C. The call whatsItDo(“WATCH”) first assigns a substring of “WATCH” starting at 0 and ending at 3, which is “WATC”, to the local variable temp. The next call sets local temp to “WAT”, the call after that sets local temp to “WA”, and so on. The call whatsItDo(“W”) reaches the base case. The call becomes whatsItDo(“WA”), which prints out the value of its local variable temp, which is “W”. The next call becomes whatsItDo(“WAT”), which prints out “WA”, the call after that beomces whatsItDo(“WATC”), which prints out “WAT”, and the final call whatsItDo(“WATCH”) prints out “WATC”. After this call, all of the recursive calls in the program are complete. | . | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/11/08/Test-Corrections-Trimester-2.html",
            "relUrl": "/2022/11/08/Test-Corrections-Trimester-2.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Arrays HW Post",
            "content": "Notes: . An array is a type of data structure that contains collections of data. | The data in an array can be primitive or referenced. | The parts of an array comprise of elements and indices. An element is a singular value in an array, while an index is the position of a value in the array. Java uses 0-based indexing, meaning the first value of an array is at index 0. | Method 1 of initializing arrays: int[] array = new int[10]; This declares an array with 10 elements with int type. | Method 2 of initializing arrays: int[] array = {1, 2, 3, 4}; This specifies the initial values of an array. | To traverse through an array, any sort of iteration, specifically basic for loops and enhanced for loops, should be used. | The array.length method returns the length of an array, or in other words the number of values in an array. The array[i] method returns the element of an array at index i. | . Homework: . Swap the first and last element in the array | Replace all even elements with 0 | . // Import Java Arrays library import java.util.Arrays; public class ArrayMethods { // Initialized array with private modifiers private int[] values = {1, 4, 3, 5, 6, 8, 7}; // Swap method for reversing the entire array public int[] swap() { int[] valuesSwap = values.clone(); for (int i = 0; i &lt; valuesSwap.length/2; i++) { // Store the ith value of the array in a temp variable int temp = valuesSwap[i]; int lastIndex = valuesSwap.length - (i + 1); valuesSwap[i] = valuesSwap[lastIndex]; valuesSwap[lastIndex] = temp; } return valuesSwap; } // Replace method for replacing all even numbers in the array with 0 public int[] replace() { int[] valuesReplace = values.clone(); for (int a = 0; a &lt; valuesReplace.length; a++) { // If % produces a remainder of 0, the element is even if (valuesReplace[a] % 2 == 0) { valuesReplace[a] = 0; } } return valuesReplace; } // Running method for visualizing outputs public static void main(String[] args) { ArrayMethods myObj = new ArrayMethods(); for (int num : myObj.swap()) { System.out.print(num + &quot; &quot;); } System.out.println(&quot;&quot;); for (int num : myObj.replace()) { System.out.print(num + &quot; &quot;); } } } ArrayMethods.main(null); . 7 8 6 5 3 4 1 1 0 3 5 0 0 7 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/28/Arrays-HW.html",
            "relUrl": "/jupyter/2022/10/28/Arrays-HW.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Writing Classes HW Post",
            "content": "2021 FRQ 1a . public class WordMatch { private String secret; // Constructor for WordMatch that initializes the secret variable public WordMatch(String word) { secret = word; } // Method for comparing guess with secret public int scoreGuess(String guess) { int score = 0; int occurrences = 0; int guessLength = guess.length(); // The for loop&#39;s condition changes with respect to the length of guess, and counts the number of occurrences of guess in secret for (int i = 0; i &lt;= secret.length() - guessLength; i++) { String secretComponent = secret.substring(i, i + guessLength); if (guess.equals(secretComponent)) { occurrences++; } } score = occurrences * (int) Math.pow(guessLength, 2); return score; } // Running method for visualizing outputs public static void main(String[] args) { WordMatch myObj = new WordMatch(&quot;mississippi&quot;); System.out.println(myObj.scoreGuess(&quot;i&quot;)); } } WordMatch.main(null); . 4 . 2021 FRQ 3a . public class MemberInfo { public String memberName; public int memberGradYear; public boolean memberGoodStanding; // Constructor that initializes detail variables for a member public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { memberName = name; memberGradYear = gradYear; memberGoodStanding = hasGoodStanding; } // Returns graduation year of a member public int getGradYear() { return memberGradYear; } // Returns the good standing status of a member public boolean inGoodStanding() { return memberGoodStanding; } } public class ClubMembers { // memberList ArrayList private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { // memberList is initialized memberList = new ArrayList&lt;MemberInfo&gt;(); // for loop adds all specified new member objects to MemberList for (int i = 0; i &lt; names.length; i++) { // Alternate method: Create a memberInfo object first then append it to memberList // MemberInfo memberObject = new MemberInfo(names[i], gradYear, true); memberList.add(new MemberInfo(names[i], gradYear, true)); } } // Running method for visualizing outputs public static void main(String[] args) { ClubMembers myObj = new ClubMembers(); String[] names = {&quot;Dylan&quot;, &quot;Ritvik&quot;, &quot;Aryan&quot;}; myObj.addMembers(names, 2023); // for loop retrieves all member objects from MemberList, then retrieves memberName, memberGradYear, and memberGoodStanding from each member object and prints them for (int i = 0; i &lt; myObj.memberList.size(); i++) { String memberNameRetrieve = myObj.memberList.get(i).memberName; int memberGradYearRetrieve = myObj.memberList.get(i).memberGradYear; boolean memberGoodStanding = myObj.memberList.get(i).memberGoodStanding; System.out.println(memberNameRetrieve + &quot;; &quot; + memberGradYearRetrieve + &quot;; &quot; + memberGoodStanding); } } } ClubMembers.main(null); . Dylan; 2023; true Ritvik; 2023; true Aryan; 2023; true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/27/Classes-HW.html",
            "relUrl": "/jupyter/2022/10/27/Classes-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Boolean Expressions and If Else Statements Post",
            "content": "2009 FRQ 3b . public class BatteryCharger { // Initialized array containing the costs at each hour (0 - 23) private int[] rateTable = {50, 60, 160, 60, 80, 100, 100, 120, 150, 150, 150, 200, 40, 240, 220, 220, 200, 200, 180, 180, 140, 100, 80, 60}; // Method for determining the total charge cost based on the given startHour and chargeTime private int getChargingCost(int startHour, int chargeTime) { int totalCost = 0; for (int i = startHour; i &lt; startHour + chargeTime; i++) { if (i &gt;= 24) { int temp = i % 24; totalCost += rateTable[temp]; } else { totalCost += rateTable[i]; } } return totalCost; } // Method for determining the most cost efficient startHour based on the given chargeTime public int getChargeStartTime(int chargeTime) { int optimalStartHour = 23; for (int i = 22; i &gt;= 0; i--) { if (getChargingCost(i, chargeTime) &lt; getChargingCost(optimalStartHour, chargeTime)) { optimalStartHour = i; } } return optimalStartHour; } // Running method for visualizing outputs public static void main(String[] args) { BatteryCharger myObj = new BatteryCharger(); System.out.println(myObj.getChargingCost(22, 30)); System.out.println(myObj.getChargeStartTime(30)); } } BatteryCharger.main(null); . 3710 23 . 2017 FRQ 1b . public class Digits { private ArrayList&lt;Integer&gt; digitList; // Constructor that adds all digits of an integer to an ArrayList public Digits(int num) { Integer number = num; digitList = new ArrayList&lt;Integer&gt;(); String numberNew = number.toString(); for (int i = 0; i &lt; numberNew.length(); i++) { int numberNewDigit = Character.getNumericValue(numberNew.charAt(i)); digitList.add(numberNewDigit); } } // Method for checking if all the numbers in the digit list are strictly increasing public boolean isStrictlyIncreasing() { // Returns true if there is only 1 digit if (digitList.size() &lt; 2) { return true; } for (int a = 0; a &lt; digitList.size() - 1; a++) { // Returns false if at least one of the digits does not follow the strictly increasing rule if (digitList.get(a) &gt;= digitList.get(a + 1)) { return false; } } return true; } // Running method for visualizing outputs public static void main(String[] args) { Digits myObj = new Digits(1234578); System.out.println(myObj.isStrictlyIncreasing()); } } Digits.main(null); . true 1 2 3 4 5 7 8 . 2019 FRQ 3b . public class Delimiters { private String openDel; private String closeDel; ArrayList&lt;String&gt; delimitersList; // Constructor that initializes openDel, closeDel, and delimitersList public Delimiters(String open, String close) { openDel = open; closeDel = close; delimitersList = new ArrayList&lt;String&gt;(); } // Method for collecting all delimiters from a text public ArrayList&lt;String&gt; getDelimitersList (String[] tokens) { for (String token : tokens) { if (token == openDel || token == closeDel) { delimitersList.add(token); } } return delimitersList; } // Method to check whether or not the open delimiters and close delimiters are balanced. public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { // Counters for the number of open delimiters and close delimiters int openCount = 0; int closeCount = 0; for (String delimiter : delimiters) { if (delimiter == openDel) { openCount++; } else if (delimiter == closeDel) { closeCount++; } // First condition is broken if (openCount &lt; closeCount) { return false; } } // First and second condition are both met if (openCount == closeCount) { return true; } // Second condition is broken else { return false; } } // Running method for visualizing outputs public static void main(String[] args) { Delimiters myObj = new Delimiters(&quot;(&quot;, &quot;)&quot;); String[] tokens = {&quot;(&quot;, &quot;yy&quot;, &quot;)&quot;, &quot;zz&quot;, &quot;(&quot;, &quot;)&quot;}; ArrayList&lt;String&gt; delimiters = myObj.getDelimitersList(tokens); System.out.println(delimiters); System.out.println(myObj.isBalanced(delimiters)); } } Delimiters.main(null); . [(, ), (, )] true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/26/Conditional-HW.html",
            "relUrl": "/jupyter/2022/10/26/Conditional-HW.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Using Objects HW Post",
            "content": "// Class for initializing values for each Goblin trait public class Goblin { // Initialize all trait variables private String name; private int HP; private int DMG; private double hitChance; // Get methods for each trait value public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } // Set methods for each trait value public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . // Math import for randomization import java.lang.Math; // Class that simulates the outcome of fights between 2 goblins public class Duel { // Method that simulates each goblin&#39;s attack. Every attack either leads to a miss or some amount damage to a goblin. public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } // Start up method that runs as long as both goblins are alive public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Satoru Gojo&quot;); goblin1.setHP(10); goblin1.setDMG(3); goblin1.setHitChance(0.85); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Toji Fushiguro&quot;); goblin2.setHP(12); goblin2.setDMG(2); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 9 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 8 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 6 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 3 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro misses... Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 0 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 4 Toji Fushiguro has perished .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Objects-HW.html",
            "relUrl": "/jupyter/2022/10/25/Objects-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Iteration HW Post",
            "content": "Part #1: Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . // Java utility imports necessary for the program import java.util.Scanner; import java.util.Random; public class Iteration { // Initialize Random library object Random randNumber = new Random(); int randomNumber = randNumber.nextInt(100 - 1) + 1; // Initialize Scanner object Scanner userInput = new Scanner(System.in); // Startup method public void play() { System.out.println(&quot;Guess an integer from 1 to 100&quot;); int guess = userInput.nextInt(); System.out.println(guess); // Calls checkGuess method that checks if the guess matches the randomly generated number from 1-100 checkGuess(guess); } // Simulates binary search random number guessing game. This essentially a recursive method that keeps running until the randomly generated number is guessed correctly public void checkGuess(int guess) { // Win condition if (guess == randomNumber) { System.out.println(&quot;Congratulations, you guessed correctly!&quot;); } // Condition when guess is less than randomNumber else if (guess &lt; randomNumber) { System.out.println(&quot;Too low&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } // Condition when guess is greater than randomNumber else if (guess &gt; randomNumber) { System.out.println(&quot;Too high&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } } } // Running method for visualizing outputs public class runProgram { public static void main(String[] args) { Iteration myObj = new Iteration(); myObj.play(); } } runProgram.main(null); . Guess an integer from 1 to 100 50 Too high Guess again 25 Too low Guess again 37 Congratulations, you guessed correctly! . Part #2: .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Iteration-HW.html",
            "relUrl": "/jupyter/2022/10/25/Iteration-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Primitives Types HW Post",
            "content": "2006 FRQ 2a . public interface Item { double purchasePrice(); } // Class TaxableItem implements the interface Item, which contains the method purchasePrice() public abstract class TaxableItem implements Item { private double taxRate; public abstract double getListPrice(); // Constructor for initializing the tax rate, if there is any public TaxableItem(double rate){ taxRate = rate; } // Calculates the purchase price of an item by multiplying the tax rate by the list price, then adding that to the original list price // If there is no tax rate, then the purchase price is simply equal to the list price public double purchasePrice() { double purchasePriceValue = getListPrice() + (taxRate * getListPrice()); return purchasePriceValue; // Alternate way: // return getListPrice() * (1.0 + taxRate); } } // Since we are working with an abstract class, we would have to extend to it with another class in order to run our program // As of right now, the class hierarchy seems to be very complicated, so I will further research ways to output the program results . 2006 FRQ 3a . public class Customer { private String cName; private int cID; // Constructor to initialize customer name and id public Customer(String name, int idNum) { cName = name; cID = idNum; } // Gets the name of the specified customer public String getName() { return cName; } // Gets the unique ID of the specified customer public int getID() { return cID; } // Compares given customer with another customer. Returns a positive integer if the customer is greater than the other customer, // 0 if they are equal, and a negative integer if the customer is less than the other customer. public int compareCustomer(Customer other) { int nameComparison = getName().compareTo(other.getName()); if (nameComparison != 0) { return nameComparison; } else { if (getID() != other.getID()) { return getID() - other.getID(); } } return 0; } // Running method for visualizing outputs public static void main(String[] args) { Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); Customer c4 = new Customer(&quot;Will&quot;, 1004); System.out.println(c1.compareCustomer(c4)); } } Customer.main(null); . -4 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/24/Primitive-Types-HW.html",
            "relUrl": "/jupyter/2022/10/24/Primitive-Types-HW.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "POJO Post",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/03/POJO.html",
            "relUrl": "/jupyter/2022/10/03/POJO.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Arrays and Images Post",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;gojo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; private final String outDir = &quot;images/tmp/&quot;; private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; private long bytes; private int width; private int height; public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } public static BufferedImage convertToBufferedImage(Image img) { BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=6) { for (int j = 0; j &lt; img.getWidth(); j+=3) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public void GrayScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red+green+blue)/3; Color colorGray = new Color(avg, avg, avg); img.setRGB(j, i, colorGray.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graygojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (green)/3; Color colorGreen = new Color(avg, green, avg); img.setRGB(j, i, colorGreen.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greengojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red)/3; Color colorRed = new Color(red, avg, avg); img.setRGB(j, i, colorRed.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void PurpleScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;purplegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void CyanScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;cyangojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void YellowScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, avg); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;yellowgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void WhiteScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;whitegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) throws IOException { Pics gojo = new Pics(&quot;gojo&quot;, &quot;png&quot;); gojo.GrayScale(); gojo.GreenScale(); gojo.RedScale(); gojo.BlueScale(); gojo.PurpleScale(); gojo.CyanScale(); gojo.YellowScale(); gojo.WhiteScale(); gojo.printStats(&quot;Original&quot;); gojo.resize(33); gojo.printStats(&quot;Scaled&quot;); gojo.convertToAscii(); } } Pics.main(null); . Original: 78183 1200x628 images/gojo.png . java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11.XToolkit at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:315) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:588) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:583) at java.base/java.security.AccessController.doPrivileged(Native Method) at java.desktop/java.awt.Toolkit.getDefaultToolkit(Toolkit.java:582) at java.desktop/java.awt.Image.getScaledInstance(Image.java:178) at Pics.resize(#32:1) at Pics.main(#32:1) at .(#35:1) .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/27/Arrays-and-Images.html",
            "relUrl": "/jupyter/2022/09/27/Arrays-and-Images.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Fibonacci Post",
            "content": "import java.util.Scanner; import java.util.Arrays; import java.lang.System; public class Fibonacci { public void checkNthPosition() { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter an integer for n to get the nth integer of the Fibonacci Sequence:&quot;); int n = userInput.nextInt(); forLoop(n); whileLoop(n); long timeStartRecursion = System.nanoTime(); recursion(n); double timeElapsedRecursion = (double) (System.nanoTime() - timeStartRecursion)/ (double) (1000); System.out.println(&quot;Using a recursion loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsedRecursion); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + recursion(n)); } public int forLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); for (int i = 2; i &lt;= n; i++) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a for loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int whileLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); int i = 2; while (i &lt;= n) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; i++; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a while loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int recursion(int n) { if (n == 0) { return 0; } else if (n == 1) { return 1; } return recursion(n-2) + recursion(n-1); } } public class Fibo extends Fibonacci { public static void main(String[] args) { Fibonacci play = new Fibonacci(); play.checkNthPosition(); } } Fibo.main(null); . Enter an integer for n to get the nth integer of the Fibonacci Sequence: Using a for loop: Computational Time (In Microseconds): 7.409 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a while loop: Computational Time (In Microseconds): 4.479 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a recursion loop: Computational Time (In Microseconds): 13.698 The nth integer of the Fibonacci sequence: 13 . Questions . Skill 1.B: Determine code that would be used to complete code segments (i.e. For, While, Recursion). | To complete the code segments, I used loop statements such as for, while, and recursion. | . Skill 4.C: Determine if two or more code segments yield equivalent results (Be sure to discuss how you know the results are the same). | All code segments yield the same results, because although they are different kinds of statements, they essentially use the same operations and ultimately return the same result. | . Skill 5.A: Describe the behavior of a given segment of program code (Describe the different in recursion versus for and while loops; perhaps add timing to determine speed). | Using the timeStart and timeElapsed variables to determine the computational time of each program code, I found out the the recursion loop takes slightly longer than the for and while loops. This is likely because it has to calculate a lot of the values due to the multiple return statements it has. The for and whiles loops likely took less time because their caching methods (Appending values to and iterating through arrays) are faster. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/24/Fibonacci.html",
            "relUrl": "/jupyter/2022/09/24/Fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "CSA FRQ",
            "content": "import java.util.Scanner; import java.util.Arrays; public class Level { int level; String levelStatus; public boolean goalReached() { if (levelStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getPoints() { if (level == 1 &amp;&amp; goalReached() == true) { return 200; } else if (level == 2 &amp;&amp; goalReached() == true) { return 100; } else if (level == 3 &amp;&amp; goalReached() == true) { return 500; } return 0; } } public class Game { private Level levelOne = new Level(); private Level levelTwo = new Level(); private Level levelThree = new Level(); //Default constructor created // public Game() { } String bonusStatus; public void play() { System.out.println(&quot;Game Simulation&quot;); Scanner numInput = new Scanner(System.in); System.out.println(&quot;How many times are you playing the game?&quot;); int num = numInput.nextInt(); playManyTimes(num); } public boolean isBonus() { if (bonusStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getScore() { int score = 0; if (levelOne.goalReached() == true) { score += levelOne.getPoints(); if (levelTwo.goalReached() == true) { score += levelTwo.getPoints(); if (levelThree.goalReached() == true) { score += levelThree.getPoints(); } } } if (isBonus() == true) { score *= 3; } return score; } public int playManyTimes(int num){ Scanner userInput = new Scanner(System.in); int[] scoreArray = new int[]{}; scoreArray = Arrays.copyOf(scoreArray, scoreArray.length + num); for (int w = 0; w &lt; num; w++) { scoreArray[w] = 0; } for (int i = 0; i &lt; num; i++) { System.out.println(&quot;Did you complete level 1? (y/n)&quot;); levelOne.levelStatus = userInput.nextLine(); levelOne.level = 1; levelOne.goalReached(); System.out.println(&quot;Did you complete level 2? (y/n)&quot;); levelTwo.levelStatus = userInput.nextLine(); levelTwo.level = 2; levelTwo.goalReached(); System.out.println(&quot;Did you complete level 3? (y/n)&quot;); levelThree.levelStatus = userInput.nextLine(); levelThree.level = 3; levelThree.goalReached(); System.out.println(&quot;Is this a bonus game? (y/n)&quot;); bonusStatus = userInput.nextLine(); int individualScore = getScore(); System.out.println(individualScore); scoreArray[i] = individualScore; } int highScore = 0; for (int a = 0; a &lt; scoreArray.length; a++) { if (a == 0) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &gt; scoreArray[a - 1]) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &lt; scoreArray[a - 1]) { highScore = scoreArray[a - 1]; } } System.out.println(&quot;Your high score was: &quot; + highScore); return highScore; } } public class testGame { public static void main(String[] args) { Game g = new Game(); g.play(); } } testGame.main(null); . Game Simulation How many times are you playing the game? Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 600 Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 2400 Your high score was: 2400 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/16/FRQ-1.html",
            "relUrl": "/jupyter/2022/09/16/FRQ-1.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Java Iteration Statements Post",
            "content": "class AnimeLoop { String [][] animeArray; public AnimeLoop() { animeArray = new String[][]{ //Toji { &quot; ,@&amp;@#&quot;, &quot; @@@@@@@@@%&quot;, &quot; @@@#@@&amp;&amp;@&amp;&quot;, &quot; .#@((/((/( /&quot;, &quot; ,@@@@#/(##( .&quot;, &quot; /@@@@@@@@@@@@*&quot;, &quot; @@@@@@@@@@@@@@@@@@&quot;, &quot; (@@@@@@@@@@@@@@@@@@@(&quot;, &quot; #@@@@@@@@@@@@@@@@@@@@@&quot;, &quot; @@@@@@@@@@@@@@@@@@@@@&quot;, &quot; &amp;@@@# @@@@@@@@@@@%%%#@&quot;, &quot;@@%%%% @@@@@@@@@@%&amp;&amp;%#&quot;, &quot; #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#%&quot;, &quot; &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%%&quot;, &quot; *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp;&quot; }, //Megumi 1 { &quot; @@@@@@@&quot;, &quot; @@@@@@@@@/&amp;&quot;, &quot; %@@@@(@@@@@@@@&quot;, &quot; &amp;@@@&amp;@@@@@@@%&quot;, &quot; /@@**.,*.. * #@&quot;, &quot; @@&amp;., , /.(&quot;, &quot; @@@@&amp;@&amp;, .*.@@, .,/&quot;, &quot; ,@****#@@@*%(/@@@@/, .&quot;, &quot;#@@@@@@@@&amp;/(*/*%@@@%,,**, *@&quot;, &quot;@@@@@@@@@@@*(#**(@@@@@, @@@@@@@&quot;, &quot; @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@&quot;, &quot; ,/@@@@*@@#@@@@@%@ ,&quot;, &quot; (#(%@@@@*@@@@@@@&quot;, &quot; (&amp;@@@#%@@*@%**///((# / , *&quot;, &quot; *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,.&quot;, &quot; ***@@@@@@@@@@@@@@@@@@@@ *&quot;, &quot; /*@@@@@@@@@@@@&amp;@@ #&quot;, &quot; .**@@%&amp;@%%@@@@@@@@ *&quot;, &quot; *@@@@@@@@@&amp;@@@@@@% * (&quot;, &quot; @@@@@@@@@@@@@@@@ , *&quot; }, //Megumi 2 { &quot; * @&quot;, &quot; @@*@@&amp;@@(&quot;, &quot; @@@@@@@@@@@@@@@%/&quot;, &quot; @@@@@@@@&amp;@@@@@,&quot;, &quot; /@@@@@@@/&amp;@@@@@@#&quot;, &quot; @@ ., ...*#@&quot;, &quot; . ( (/&quot;, &quot; &amp;@@@@/ ., .*/&quot;, &quot; @@@@@@@@@ .@&quot;, &quot; @@@@@&amp;@@&amp;@@#@@@@&quot;, &quot; .@&amp;##%@%@@@@@@@@@&quot;, &quot;(&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@&quot;, &quot;@%(##%@@@@@@@&amp;&amp;@@@@@&quot;, &quot;@%@@@@@@@&amp;#%%@@@@@@@&quot;, &quot;@%@&amp;@@@@@@@@%@@&amp;%@@@&amp;&quot;, &quot;&amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@&quot;, &quot;&amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@&quot;, &quot;@@&amp;@@@@#@&amp;@@@@@@@@@#@@@&quot;, &quot;@@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@&quot;, &quot;@@%%@@%@@%@@@@@@@%%@@&amp;*(@&quot;, &quot; &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@(&quot;, &quot; @@@&amp;@*. ,@@@@@@@@@&quot;, &quot; @@@@@@@@.. @@@@@@@&quot;, &quot; @@@@@@@@&amp;#. ..@@@@&quot; }, //Megumi 3 { &quot; .@@@@@@@@#*@&quot;, &quot; .@&amp;.@&amp;@@@@@@@@@@&quot;, &quot; %@@@@*@*@@@@,,@@@#&quot;, &quot; #@@@@@@@@@@@@@@@@@@ ( ((&quot;, &quot; @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@&quot;, &quot; ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;((&quot;, &quot; %&amp; . , *(/@@#@@@@@ @@ #((&quot;, &quot; ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .#&quot;, &quot; #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp;&quot;, &quot; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , %&quot;, &quot; #(#@(#((@(@@&amp;@@@@@#@@@(&quot;, &quot;(((%@@#@(@%@@@@@@@@@@@&amp; /, ,&quot;, &quot;(((%%@@@@(@%@@@@@@@@@@ (#@@@@@,&quot;, &quot;((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp;&quot;, &quot; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@*&quot;, &quot; .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@(&quot; }, //Megumi 4 { &quot; (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; *&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ .&quot;, &quot; @@@&amp;&amp;#*%&amp;&amp;&amp;@**&quot;, &quot; %,,.....,,&quot;, &quot; .#*/....,. ..&quot;, &quot; .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,,&quot;, &quot; *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*....&quot;, &quot;&amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,#&quot;, &quot;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;,&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/&quot;, &quot; @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@&quot;, &quot; @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp;&quot;, &quot; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp;&quot; }, }; } public void printAnime() { System.out.println(); System.out.println(&quot;Java Iteration Lab&quot;); int animeCount = animeArray.length; for (int i = animeCount; i &gt; 1; i--) { if (animeCount &gt; 2 || animeCount &lt; 2) { System.out.println(&quot;There are &quot; + (i-1) + &quot; Megumi Fushiguros standing around...&quot;); } else if (animeCount == 2) { System.out.println(&quot;There is &quot; + (i-1) + &quot; Megumi Fushiguro standing around...&quot;); } for (int row = 1; row &lt; animeCount; row++) { for (int col = 0; col &lt; animeArray[row].length; col++) { System.out.print(animeArray[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } System.out.println(&quot;Here comes Toji Fushiguro who is a menace to society&quot;); for (int col = 0; col &lt; animeArray[0].length; col++) { System.out.print(animeArray[0][col] + &quot; &quot;); System.out.println(); } System.out.println(); animeCount -= 1; } System.out.println(&quot;There are no more Megumi Fushiguros standing around&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new AnimeLoop().printAnime(); } } AnimeLoop.main(null); . Java Iteration Lab There are 4 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; * &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ . @@@&amp;&amp;#*%&amp;&amp;&amp;@** %,,.....,, .#*/....,. .. .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,, *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*.... &amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,# #&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;# %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;, %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/ @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@ @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;# %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp; Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 3 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 2 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There is 1 Megumi Fushiguro standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are no more Megumi Fushiguros standing around 0000000000000000000000000000000000 THE END .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/15/Java-Iteration.html",
            "relUrl": "/jupyter/2022/09/15/Java-Iteration.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Gratitude Post",
            "content": "What I Am Grateful for: . To start off, I am grateful for all my loved ones. I am thankful for my family, who have provided me with so much support and love through tje ups and downs of my life. I truly believe that I would not have succeeded nearly as much if it was not for my family. In addition, my friends have supported me greatly and have helped my through rough times. Looking back at how much they have aided me makes me feel extremely appreciative for all of them. Moving forward into the future, I seek to maintain a close group of friends and preserve a good relationship with my relatives, for the sake my own mental health, as well as for me to give support back to my loved ones. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/11/Gratitude.html",
            "relUrl": "/markdown/2022/09/11/Gratitude.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Title",
            "content": "Java If Else Statements . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Java If Else Statements&quot;); } } ifelse.main(null); . Java If Else Statements .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/09/08/ifelse.html",
            "relUrl": "/2022/09/08/ifelse.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Java Conditional Statements Post",
            "content": "Java if else statements are a type of conditional statement. If the Java if statement evaluates to true, it will perform a specific action designated to it. Otherwise, if it evaluates to false, it will perform another designated action. . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); if (schoolSubjectNew.equals(&quot;math&quot;)) { System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); } else if (schoolSubjectNew.equals(&quot;english&quot;)) { System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); } else if (schoolSubjectNew.equals(&quot;history&quot;)) { System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); } else if (schoolSubjectNew.equals(&quot;physical education&quot;)) { System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); } else if (schoolSubjectNew.equals(&quot;science&quot;)) { System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); } else if (schoolSubjectNew.equals(&quot;computer science&quot;)) { System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); } else { System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); } } } ifelse.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . import java.util.Scanner; import java.lang.Math; public class Switch { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); switch(schoolSubjectNew) { case &quot;math&quot;: System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); break; case &quot;english&quot;: System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); break; case &quot;history&quot;: System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); break; case &quot;physical education&quot;: System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); break; case &quot;science&quot;: System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); break; case &quot;computer science&quot;: System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); break; default: System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); break; } } } Switch.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . import java.util.Scanner; import java.lang.Math; public class DeMorgan1 { public static void main(String[] args) { System.out.println(&quot;Type the length in minutes of your average work out:&quot;); System.out.println(&quot;--&quot;); Scanner userInput = new Scanner(System.in); int minutesNew = userInput.nextInt(); if (minutesNew &gt; 0 &amp;&amp; minutesNew &lt;= 60) { System.out.println(&quot;Your average work outs should be a little longer unless it is really intense&quot;); } else if (minutesNew &gt; 60 &amp;&amp; minutesNew &lt;= 120) { System.out.println(&quot;Your work outs are at perfect length&quot;); } else if (minutesNew &gt; 120 &amp;&amp; minutesNew &lt;= 210) { System.out.println(&quot;Your work outs are at an above average length&quot;); } else { System.out.println(&quot;You are a beast&quot;); } } } DeMorgan1.main(null); . Type the length in minutes of your average work out: -- You are a beast . import java.util.Scanner; import java.lang.Math; public class DeMorgan2 { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter your first integer:&quot;); System.out.println(&quot;-&quot;); int numberOne = userInput.nextInt(); System.out.println(&quot;Enter your second integer:&quot;); System.out.println(&quot;-&quot;); int numberTwo = userInput.nextInt(); boolean booleanValue1 = numberOne == numberTwo; System.out.println(&quot;Enter your third integer:&quot;); System.out.println(&quot;-&quot;); int numberThree = userInput.nextInt(); System.out.println(&quot;Enter your fourth integer:&quot;); System.out.println(&quot;-&quot;); int numberFour = userInput.nextInt(); boolean booleanValue2 = numberThree == numberFour; if (booleanValue1 || booleanValue2) { System.out.println(&quot;Or Statement: True&quot;); } else { System.out.println(&quot;Or Statement: False&quot;); } if (booleanValue1 &amp;&amp; booleanValue2){ System.out.println(&quot;And Statement: True&quot;); } else { System.out.println(&quot;And Statement: False&quot;); } if (!(booleanValue1 || booleanValue2)){ System.out.println(&quot;Nor Statement: True&quot;); } else { System.out.println(&quot;Nor Statement: False&quot;); } if (!(booleanValue1 &amp;&amp; booleanValue2)){ System.out.println(&quot;Nand Statement: True&quot;); } else { System.out.println(&quot;Nand Statement: False&quot;); } } } DeMorgan2.main(null); . Enter your first integer: - Enter your second integer: - Enter your third integer: - Enter your fourth integer: - Or Statement: True And Statement: True Nor Statement: False Nand Statement: False .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/08/Java-Conditional.html",
            "relUrl": "/jupyter/2022/09/08/Java-Conditional.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Code.org Blog Post",
            "content": "Code.org Blog Post . Code.org with up to lesson 15 completed . . Code.org Key Learnings . In Java, an object can be created using the public objectName(){} command. | An object is an instance of a class, and it has its own identity, state, and purpose. The state of an object is stored in variables or fields, and it can be used using functions or methods. | In Java, the public class subclassName extends superclassName{} command links a subclass to a superclass. An example of subclassName could be soccer, while an example of superclassName could be sport. | A sub class that extends to a super class means that the sub class is inherited from the super class. | A Java constructor is a method used to initialize objects that does not have a return type (e.g. void). The constructor name must be the same as its class name counterpart. Every class has by default a constructor, and a constructor is called whenever an object is built. An example of a Java constructor code is public Main(){}. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/05/Codeorg.html",
            "relUrl": "/markdown/2022/09/05/Codeorg.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Week 1 - Java Objects Post",
            "content": "import java.util.Scanner; import java.lang.Math; public class Menu { public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Java Menu&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - NBA Player Personality Quiz&quot;); System.out.println(&quot;2 - Which kinematics equation should I use?&quot;); System.out.println(&quot;3 - Print out digits of PI&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; Scanner typeInput = new Scanner(System.in); switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot; nNBA Players Personality Test&quot;); int[] questionNumberList = {1, 2, 3, 4}; int count = 0; for (int a = 0; a &lt; questionNumberList.length; a++) { System.out.println(&quot;Question &quot; + questionNumberList[a]); if (questionNumberList[a] == 1) { System.out.println(&quot;What is your favorite basketball team?&quot;); System.out.println(&quot;A) Chicago Bulls&quot;); System.out.println(&quot;B) LA Lakers&quot;); System.out.println(&quot;C) Golden State Warriors&quot;); System.out.println(&quot;D) Oklahoma City Thunder&quot;); String userAnswer1 = typeInput.nextLine(); String userAnswer1Update = userAnswer1.toLowerCase(); if (userAnswer1Update.equals(&quot;a&quot;)) { count += + 1; } else if (userAnswer1Update.equals(&quot;b&quot;)) { count += + 2; } else if (userAnswer1Update.equals(&quot;c&quot;)) { count += + 3; } else if (userAnswer1Update.equals(&quot;d&quot;)) { count += 4; } } else if (questionNumberList[a] == 2) { System.out.println(&quot;What is your ideal height?&quot;); System.out.println(&quot;A) 7&#39;1&quot;); System.out.println(&quot;B) 6&#39;6&quot;); System.out.println(&quot;C) 6&#39;11&quot;); System.out.println(&quot;D) 6&#39;3&quot;); String userAnswer2 = typeInput.nextLine(); String userAnswer2Update = userAnswer2.toLowerCase(); if (userAnswer2Update.equals(&quot;a&quot;)) { count += 2; } else if (userAnswer2Update.equals(&quot;b&quot;)) { count += 1; } else if (userAnswer2Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer2Update.equals(&quot;d&quot;)) { count += 3; } } else if (questionNumberList[a] == 3) { System.out.println(&quot;What is your favorite basketball position?&quot;); System.out.println(&quot;A) Small Forward&quot;); System.out.println(&quot;B) Point Guard&quot;); System.out.println(&quot;C) Center&quot;); System.out.println(&quot;D) Shooting Guard&quot;); String userAnswer3 = typeInput.nextLine(); String userAnswer3Update = userAnswer3.toLowerCase(); if (userAnswer3Update.equals(&quot;a&quot;)) { count += 4; } else if (userAnswer3Update.equals(&quot;b&quot;)) { count += 3; } else if (userAnswer3Update.equals(&quot;c&quot;)) { count += 2; } else if (userAnswer3Update.equals(&quot;d&quot;)) { count += 1; } } else if (questionNumberList[a] == 4) { System.out.println(&quot;What is favorite basketball skill?&quot;); System.out.println(&quot;A) Shooting&quot;); System.out.println(&quot;B) Dunking&quot;); System.out.println(&quot;C) Dribbling&quot;); System.out.println(&quot;D) Defending&quot;); String userAnswer4 = typeInput.nextLine(); String userAnswer4Update = userAnswer4.toLowerCase(); if (userAnswer4Update.equals(&quot;a&quot;)) { count += 3; } else if (userAnswer4Update.equals(&quot;b&quot;)) { count += 2; } else if (userAnswer4Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer4Update.equals(&quot;d&quot;)) { count += 1; } } } System.out.println(&quot;You have completed the NBA personality quiz!&quot;); if (count &gt;= 13) { System.out.println(&quot;You are Kevin Durant!&quot;); } else if (count &gt; 10) { System.out.println(&quot;You are Stephen Curry!&quot;); } else if (count &gt; 7) { System.out.println(&quot;You are Shaq O&#39; Neal!&quot;); } else if (count &gt;= 4) { System.out.println(&quot;You are Michael Jordan!&quot;); } break; case 2: System.out.println(&quot;What is the information you need to find?&quot;); String kinematicsInput1 = typeInput.nextLine(); String kinematicsInput1LowerCase = kinematicsInput1.toLowerCase(); String kinematicsEquation1 = &quot;Vf = Vi + a * t&quot;; String kinematicsEquation2 = &quot;x = Vi * t + (a * t^2)/2&quot;; String kinematicsEquation3 = &quot;Vf^2 = Vi^2 + 2 * a * x&quot;; String kinematicsEquation4 = &quot;x = (Vi + Vf)/2 * t&quot;; String kinematicsEquation5 = &quot;x = Vf * t - (a * t^2)/2&quot;; if (kinematicsInput1LowerCase.equals(&quot;displacement&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation1); } else if (kinematicsInput1LowerCase.equals(&quot;final velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation2); } else if (kinematicsInput1LowerCase.equals(&quot;time&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation3); } else if (kinematicsInput1LowerCase.equals(&quot;acceleration&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation4); } else if (kinematicsInput1LowerCase.equals(&quot;initial velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation5); } break; case 3: Scanner piInput = new Scanner(System.in); System.out.println(&quot;How many digits of Pi do you want to print out?&quot;); int piDigits = piInput.nextInt(); int[] piArray = new int[]{3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8,0,3,4,8,2,5,3,4,2,1,1,7,0,6,7,9}; String piPrint = &quot;&quot;; for (int i = 0; i &lt; piDigits; i++) { if (piDigits &gt; 1 &amp;&amp; i == 0) { piPrint += piArray[i] + &quot;.&quot;; } else { piPrint += piArray[i]; } } System.out.println(piPrint); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Java Menu - 1 - NBA Player Personality Quiz 2 - Which kinematics equation should I use? 3 - Print out digits of PI 0 - Quit - 1: NBA Players Personality Test Question 1 What is your favorite basketball team? A) Chicago Bulls B) LA Lakers C) Golden State Warriors D) Oklahoma City Thunder Question 2 What is your ideal height? A) 7&#39;1 B) 6&#39;6 C) 6&#39;11 D) 6&#39;3 Question 3 What is your favorite basketball position? A) Small Forward B) Point Guard C) Center D) Shooting Guard Question 4 What is favorite basketball skill? A) Shooting B) Dunking C) Dribbling D) Defending You have completed the NBA personality quiz! You are Shaq O&#39; Neal! 0: Goodbye, World! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/31/GUI-menu.html",
            "relUrl": "/jupyter/2022/08/31/GUI-menu.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Collegeboard Topics",
            "content": "Home . AP Computer Science Principles A College Board Topics . . Unit 1: Primitive Types . . In Java, there are primitive and non-primitive data types. Some primitive data types include int, double and boolean, and some non-primitive data types include String and array. . Data Types: . int: Used for all integers. | double: Used for numbers with decimals. | boolean: Used for all boolean values, which are usually two return values that typically vary between true or false. | String: Used for all text values. | Java Input: . &quot;static&quot; or &quot;hard coded&quot; programs typically when all of the website information is displayed by default. There are no instances of user input in these types of programs. . To increase user interaction, having user inputs is important . In Java, Scanner is the utility class used for console user input . All programming has the means of formatting and combining data. An example of this is shown through concatenation (e.g. &quot;Hello,&quot; + &quot; World!&quot; = &quot;Hello, World!&quot;. The &quot;+&quot; symbol combined the two strings). . Unit 2: Using Objects . . The relationship between a class and an object is that a class is essentially a template for an object, and an object is an instance of a class. . Other College Board Topics related to this unit: . A 2D array can be used to store colors. | A control structure can be used to process menu selections. A switch can be used to run code that performs the related action of a selection. | A 1D array can be used to hold a menu. | A control structure such as if-else if-else can be used to process menu selections by running code that performs the related action of a selection. | Class inheritance. | Conditional statements, while loops, and boolean expressions. | Some Java imports are designated toward allowing user input and console output in the terminal. . The Scanner class makes an object to collect inputs / menu selections from users . The System class can be used to call static methods like System.out.print() and System.out.println() to output in the console. . The Math class can be used to call the static method Math.random() to generate a random number within a specified range. . Objects are often intended to encapsulate Frontend, Backend, Web Site control flow, Database CRUD Operations, and many more. . With Swing and AWT imports, Java has the ability to provide a Graphical User Interface (GUI) on the desktop. . Unit 3: Boolean Expressions and If Statements . . Conditional Statements: . A Boolean expression is a logical statement that can evaluate to only two values, which are usually true or false. . A Boolean expression may comprise of a combination of Boolean constants true or false. . An if else statement is a type of conditional statement that performs a specific action if it evaluates to true, and performs another specific action if it evaluates to false . An if else code block can involve the if(), else if(), and else statements. . A switch statement is similar to an if else statement, as it has an initial controlling expression and has a specific action designated for each case value, in which if the controlling expression matches the conditions of a case, the action for that case will be performed. . De Morgan&#39;s Law: . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . Unit 4: Iteration . . Iteration can include creating a loop to perform an action until a specified condition(s) is/are met. . Iteration can be used in standard arithmetic-based and String algorithms. . for and while loops are used in code to represent iterative processes. . Nesting loop and iteration statements basically involve having a loop integrated inside another loop. For example, consider an outside for loop that repeats 3 times and an inside for loop that repeats 7 times. For each iteration in the outside for loop, the inside for loop will iterate 7 times. This will result in the program iterating a total of 21 times. . A recursion loop, like the while loop and for loop, repeats itself over and over again until a certain condition is met. The uniqueness of recursion loops come from the fact that they involve a function calling itself to repeat a task. . Unit 5: Writing Classes . . The anatomy of an object typically consists of state, attributes, and behavior. An object is practically an instance of a class. . A class defines an abstract data type. Object references can be done with String variables, while instance variables contain attributes, behaviors, and data for objects. . Methods are behaviors or actions that can be done with objects, and constructors create the object itself. . The main method tests a class and contains instance variables which include attributes, fields, and properties. . Constructors are a special method for object instantiation in that is sets initial values for variables and can run methods. . A default constructor has no arguments and is used when no constructor is defined. A class can have multiple constructors. . Unit 6: Array . . In Java, arrays and ArrayLists are different data structures. . Java arrays can have primitive (e.g. int, char, float) or referenced (e.g. String, Array, classes) data types. . int[] array = new int[10]; creates an array with 10 elements with type into and value 0. . int[] array2 = {10, 9, 8, 7, 6}; is an example way of initializing an array. . Unit 7: ArrayList . . Unit 8: 2D Array . . Unit 9: Inheritance . . Unit 10: Recursion . . .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/08/27/collegeboard-topics.html",
            "relUrl": "/2022/08/27/collegeboard-topics.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 1 - Java Primitives Post",
            "content": "Java Primitives . import java.util.Scanner; public class primitives { public static void main(String[] args) { // int is for integers int x = 7; System.out.println(x); // double is for numbers with decimals double pi = 3.14159265358979; System.out.println(pi); // boolean has two return values, which are usually true and false boolean y = true; System.out.println(y); // String is for text values String z = &quot;Hello, World!&quot;; System.out.println(z); for (int a = 0; a &lt; 5; a++) { Scanner userInput1 = new Scanner(System.in); System.out.println(&quot;Type your first integer:&quot;); int first = userInput1.nextInt(); System.out.println(&quot;Type your second integer:&quot;); int second = userInput1.nextInt(); Scanner userInput2 = new Scanner(System.in); System.out.println(&quot;Type the desired mathematical operator:&quot;); String operator = userInput2.nextLine(); String operatorNew = operator.toLowerCase(); if (operatorNew.equals(&quot;addition&quot;)) { int sum = first + second; System.out.println(first + &quot; plus &quot; + second + &quot; equals &quot; + sum); } else if (operatorNew.equals(&quot;subtraction&quot;)) { int difference = first - second; System.out.println(first + &quot; subtracted by &quot; + second + &quot; equals &quot; + difference); } else if (operatorNew.equals(&quot;multiplication&quot;)) { int product = first * second; System.out.println(first + &quot; multiplied by &quot; + second + &quot; equals &quot; + product); } else if (operatorNew.equals(&quot;division&quot;)) { double quotient = (double) first / (double) second; System.out.println(first + &quot; divided by &quot; + second + &quot; equals &quot; + quotient); } else if (operatorNew.equals(&quot;modulation&quot;)) { int modResult = first % second; System.out.println(first + &quot; modulus &quot; + second + &quot; equals &quot; + modResult); } } } } primitives.main(null); . 7 3.14159265358979 true Hello, World! Type your first integer: Type your second integer: Type the desired mathematical operator: 7 plus 8 equals 15 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 subtracted by 1 equals 10 Type your first integer: Type your second integer: Type the desired mathematical operator: 7 multiplied by 7 equals 49 Type your first integer: Type your second integer: Type the desired mathematical operator: 121 divided by 11 equals 11.0 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 modulus 5 equals 1 . Java Compound Operators . public class javaCompound { public static void main(String[] args) { // Initial Values int x = 7; int y = 8; double a = 3.14; double b = 6.28; // The compound operators modify values x += 7; y += 8; a *= 2; b /= 2; System.out.println(x); System.out.println(y); System.out.println(a); System.out.println(b); } } javaCompound.main(null); . 14 16 6.28 3.14 . GPA Calculator . import java.util.Scanner; public class GPACalculator { public static void main(String[] args) { System.out.println(&quot;Trimester GPA Calculator&quot;); Scanner userInput = new Scanner(System.in); int sum = 0; System.out.println(&quot;Enter the number of classes this trimester or the most recent trimester with final grades:&quot;); int classes = userInput.nextInt(); System.out.println(classes + &quot; classes&quot;); System.out.println(&quot;Enter Class Grades:&quot;); for (int i = 0; i &lt;= classes; i++) { int gpa = 0; String grade = userInput.nextLine(); System.out.println(grade); if (grade.equals(&quot;A&quot;)) { gpa = 4; } else if (grade.equals(&quot;B&quot;)) { gpa = 3; } else if (grade.equals(&quot;C&quot;)) { gpa = 2; } else if (grade.equals(&quot;D&quot;)) { gpa = 1; } else if (grade.equals(&quot;F&quot;)) { gpa = 0; } sum = sum + gpa; } float gpaWhole = (float) sum/(float) classes; System.out.println(&quot;Your Overall GPA: &quot; + gpaWhole); } } GPACalculator.main(null); . Trimester GPA Calculator Enter the number of classes this trimester or the most recent trimester with final grades: 8 classes Enter Class Grades: A A B A A B A A Your Overall GPA: 3.75 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/27/Java-Primitives.html",
            "relUrl": "/jupyter/2022/08/27/Java-Primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Week 1 - Bash Post",
            "content": "python --version java --version javac --version conda --version npm --version . Python 3.9.12 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 conda 4.13.0 3.10.10 . jupyter kernelspec list . Available kernels: bash /home/dylanluo05/.local/share/jupyter/kernels/bash java /home/dylanluo05/.local/share/jupyter/kernels/java javascript /home/dylanluo05/.local/share/jupyter/kernels/javascript python3 /home/dylanluo05/.local/share/jupyter/kernels/python3 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . conda list . # packages in environment at /home/dylanluo05/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/26/My-First-Bash.html",
            "relUrl": "/jupyter/2022/08/26/My-First-Bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "My First Python Post",
            "content": "first = &quot;Hello World!&quot; print(first) . Hello World! . Jupyter Notebook seems to be working fine for Python . second = &quot;Hey, I&#39;m Dylan&quot; print(second) . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Python.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "My First Markdown Post",
            "content": "AP CSA First Markdown Post . Hey my name is Dylan Luo, and I am ready to take on the AP CSA class and its very many challenges! . Example Code Embed . &lt;h1 id = &quot;a&quot;&gt;&lt;/h1&gt; var A = document.getElementById(&quot;a&quot;); A.innerHTML = &quot;Hello World!&quot; .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/08/21/My-First-Markdown-Post.html",
            "relUrl": "/markdown/2022/08/21/My-First-Markdown-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "My First Java Post",
            "content": "String first = &quot;Hello World!&quot;; System.out.println(first); . Hello World! . Jupyter Notebook seems to be working fine for Java . String second = &quot;Hey, I&#39;m Dylan&quot;; System.out.println(second); . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Java.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "FRQ 2022 Review Question Post",
            "content": "Users of a website are asked to provide a review of the website at the end of each visit. Each review, represented by an object of the Review class, consists of an integer indication the user&#39;s rating of the website and an optional String comment field. The comment field in a Review object ends with a period (&quot;.&quot;), exclamation point (&quot;!&quot;), or letter, or is a String of length 0 if the user did not enter a comment. . a. Write the ReviewAnalysis method getAverageRating, which returns the average rating (arithmetic mean) of all elements of allReviews. . b. Write the ReviewAnalysis method collectComments, which collects and formats only comments that contain an exclamation point. The method returns an ArrayList of String objects containing copies of user comments from allReviews that contain an exclamation point, formatted as follows. An empty ArrayList is returned if no comment in allReviews contains an exclamation point. . The String inserted into the ArrayList to be returned begins with the index of Review in allReviews. | The index is immediately followed by a hyphen (&quot;-&quot;). | The hyphen is followed by a copy of the original comment. | The String must end with either a period or an exclamation point. If the original comment from allReviews does not end in either a period or an exclamation point, a period is added. | . | // Review class for initializing individual Review objects from users public class Review { private int rating; private String comment; // Review constructor for setting rating and comment values public Review(int r, String c) { rating = r; comment = c; } // Method for getting rating data from another class public int getRating() { return rating; } // Method for getting comment data from another class public String getComment() { return comment; } } // ReviewAnalysis class for taking all of the user reviews and making analyses about them public class ReviewAnalysis { private Review[] allReviews; private ArrayList&lt;String&gt; sortedComments; // Constructor for initializing the allReviews array, which contains all user Review objects public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } // Method for finding the average rating given by all of the users, which it does by adding all of the ratings up, // then dividing the sum by the number of reviews public double getAverageRating() { double averageRating = 0; for (Review review : allReviews) { averageRating += review.getRating(); } averageRating /= allReviews.length; return averageRating; } // Method for sorting all of the comments that contain an exclamation point, which it does by iterating through the allReviews array, // then looping through the characters of the selected Review object&#39;s comment property, and adds the comment if it contains an exclamation point, // adding a period to the end of it if it does not already end with an exclamation point or period public ArrayList&lt;String&gt; collectComments() { sortedComments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String comment = allReviews[i].getComment(); String finalComment = &quot;&quot;; for (int j = 0; j &lt; comment.length(); j++) { if (comment.charAt(j) == &#39;!&#39;) { finalComment += i + &quot;-&quot; + comment; if (comment.charAt(comment.length() - 1) != &#39;!&#39; &amp;&amp; comment.charAt(comment.length() - 1) != &#39;.&#39;) { finalComment += &#39;.&#39;; } break; } } sortedComments.add(finalComment); } return sortedComments; } } // Main class for presenting test cases public class Main { public static void main(String[] args) { Review firstReview = new Review(4, &quot;Good! Thx&quot;); Review secondReview = new Review(3, &quot;OK site&quot;); Review thirdReview = new Review(5, &quot;Great!&quot;); Review fourthReview = new Review(2, &quot;Poor! Bad.&quot;); Review fifthReview = new Review(3, &quot;&quot;); Review[] reviews = {firstReview, secondReview, thirdReview, fourthReview, fifthReview}; ReviewAnalysis myObj = new ReviewAnalysis(reviews); System.out.println(myObj.getAverageRating()); for (String sortedComment : myObj.collectComments()) { System.out.print(sortedComment + &quot; &quot;); } } } Main.main(null); . 3.4 0-Good! Thx. 2-Great! 3-Poor! Bad. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/03/10/FRQ-2022-Review-Question.html",
            "relUrl": "/jupyter/2022/03/10/FRQ-2022-Review-Question.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post50": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "JavaScript Soccer RapidAPI",
          "content": ". ID Country Team Name . . . . . . . . . . .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/FirstRapidAPI/",
          "relUrl": "/FirstRapidAPI/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "JavaScript Local Storage Login System",
          "content": ". . Sign In . . Username Password Sign Up . . Username Password Confirm Password .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/MyFirstJavaScript/",
          "relUrl": "/MyFirstJavaScript/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Programming Experience . JavaScript Example Basic Code: . &lt;h1 id = &quot;x&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;y&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;z&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;w&quot;&gt;&lt;/h1&gt; var x = document.getElementById(&quot;x&quot;); a.innerHTML = &quot;JavaScript is awesome!&quot;; var y = document.getElementById(&quot;y&quot;); y.innerHTML = &quot;Python is awesome!&quot;; var z = document.getElementById(&quot;z&quot;); z.innerHTML = &quot;Java is awesome!&quot;; var w = document.getElementById(&quot;w&quot;); w.innerHTML = &quot;HTML and CSS are awesome!&quot;; /* Basic use of the DOM */ . Python Example Basic Code: . userInput = str(input(&quot;What is your favorite NBA basketball team? &quot;)) if (userInput == &quot;Chicago Bulls&quot;) { print(&quot;Your favorite basketball team is going to win the NBA championships this year&quot;) } else { print(&quot;Your favorite basketball team is going to lose to the Chicago Bulls&quot;) } . Database Example Basic Code: . /* Local Storage */ var array = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]; localStorage.setItem(&quot;arrayKey&quot;, JSON.stringify(array)); var arrayRetrieve = JSON.parse(localStorage.getItem(&quot;arrayKey&quot;)); &lt;p id = &quot;database-retrieve&quot;&gt;&lt;/p&gt; var databaseRetrieve = document.getElementById(&quot;database-retrieve&quot;); databaseRetrieve.innerHTML = &quot;&quot;; for (var i = 0; i &lt; arrayRetrieve.length; i++) { databaseRetrieve.innerHTML += arrayRetrieve[i]; } /* Firebase */ firebase.initialize({ projectName: &quot;My Project&quot; }); var database = firebase.database(); var userAnswer = prompt(&quot;What is your full name?&quot;); function welcome(userAnswer) { database.ref(userAnswer).on(&quot;value&quot;, function(data) { if (data === null) { alert(&quot;You&#39;re new here, welcome!&quot;); firebase.ref(userAnswer).set({ visitedBefore: yes }); } else { alert(&quot;Welcome back!&quot;); } }) } welcome(userAnswer); . A computer science project called Business Nexus that I started with my friends . .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "AP CSA Vocab Terms: .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}