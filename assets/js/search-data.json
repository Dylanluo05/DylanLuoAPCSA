{
  
    
        "post0": {
            "title": "Java Fundamentals - Java Collections Framework Notes",
            "content": "49. ArrayLists . Notes: . The Java Collections framework defines a group of classes that each have some sort of architecture used for grouping collections of individual objects. A framework is basically a platform of pre-written code (typically includes multitudes of classes and interfaces) used to assist programmers with creating applications, usually in the form of providing useful attributes and methods to help keep programmers&#39; code concise. | The ArrayList class, which a part of the Java Collections framework, is essentially utilized to define a special type of array that is resizable and mutable. Basically, an ArrayList can change itself (size and content) dynamically. ArrayList is a Generic class, meaning it takes a parameterized type that specifies the data type it will work with (similar to defining the data type stored by an array). | An ArrayList basically stores an internal array within itself, and whenever the internal array is updated whenever the ArrayList has to account for added or removed elements. When the size of the ArrayList exceeds its capacity, the ArrayList copies all of the elements to a new internal array with the new changes implemented. | Whenever you remove an element from an ArrayList, the indices all of the elements after that element change (decrement by 1), as the ArrayList has to fill up the hole left by the removed element. | The capacity of an ArrayList is different from its size in that the capacity defines the number of elements the ArrayList can store without changing the size of its internal array, while the size is the number of actual data/elements saved within the ArrayList. The capacity of an ArrayList can be manually specified, but is by default 10 elements, and will dynamically grow with the elements appended to the ArrayList (after capacity has been exceeded), but will remain constant when elements are removed from the ArrayList (unless trimToSize() method is used). The size of an ArrayList starts off at 0 if the ArrayList is initialized as empty, and will change in correspondence to elements being added to or removed from the ArrayList. | The classes in the Collections framework are grouped by different interfaces (e.g. The list classes such as ArrayList and LinkedList implement the List interface). It is important to note that Lists are ordered data structures, meaning each of their elements are designated a specific consecutive position/index within the List. | . Examples: . // Import the ArrayList class, a part of the Collections framework, from the java.util package import java.util.ArrayList; // Import List interface import java.util.List; public class Application { public static void main(String[] args) { // Initialize ArrayList of parameterized type Integer, and defines its capacity as 3 // Cannot define parameterized type with primitive type directly; have to define with wrapper class counterpart, since Generics store objects // After defining wrapper class of int (Integer), we can store and access primitive integer data to and from the ArrayList ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(3); // Append elements to ArrayList (can append values directly or values of variables) will dynamically change its size numbers.add(10); numbers.add(100); numbers.add(40); // Get size of ArrayList System.out.println(numbers.size()); // Retrieving elements of ArrayList via their index, since ArrayLists are ordered, as well as zero-indexed, just like arrays System.out.println(numbers.get(0)); System.out.println(&quot; nFirst iteration:&quot;); // Iterate through elements of ArrayList using normal for loop // Define for loop capacity with size of ArrayList. size() method to get number of elements in ArrayList for (int i = 0; i &lt; numbers.size(); i++) { System.out.println(numbers.get(i)); } System.out.println(&quot; nRemoving Elements:&quot;); // Removing elements from ArrayList via their index will also dynamically change its size // Print the element that was removed from ArrayList System.out.println(numbers.remove(numbers.size() - 1)); // Removing the first element may cause the program to take more time than removing the last element, since removing the first element will cause the indices of all subsequent elements to change numbers.remove(0); System.out.println(&quot; nSecond Iteration:&quot;); // Enhanced for loop to iterate through ArrayList // Can use type Integer instead of int, since both data types equate to each other in terms of what the data they can store (int is primitive counterpart while Integer is object counterpart) // Just a reminder that Integer and int can be converted to each other without manual type casting. Just assigning the value will be automatically converted, since their is no conversion risks (e.g. there is low risk of lossy conversion) for (int value : numbers) { System.out.println(value); } // The values object variable is of object type ArrayList but of interface variable type List. Notice how List also takes parameterized types // This means that values can only implement the attributes and methods defined in List, but not those exclusive to ArrayList (if there are any) // Nonetheless, values can still be considered an ArrayList, and can call the properties of ArrayList that are defined in List List&lt;String&gt; values = new ArrayList&lt;String&gt;(); values.add(&quot;hi&quot;); System.out.println(&quot; nUpdating Elements:&quot;); System.out.println(values.get(0)); // Update the element at the 0th index to a value of &quot;hey&quot; values.set(0, &quot;hey&quot;); System.out.println(values.get(0)); } } Application.main(null); . 3 10 First iteration: 10 100 40 Removing Elements: 40 Second Iteration: 100 Updating Elements: hi hey . 50. LinkedLists . Notes: . Like an ArrayList, a LinkedList is a linear dynamic data structure used for saving a collection of elements. However, a LinkedList stores each element as a node, as opposed to an ArrayList which stores elements in consecutive memory blocks. Each node composes of a value and two pointers (pointers require memory) to the previous and next nodes in the LinkedList. By default, LinkedLists implement a Doubly-LinkedList structure, where each node has both a previous and next pointer. But, LinkedLists can be modified to implement a Singly-LinkedList structure, where each node only has a next pointer. | A general rule of thumb is that when you want to add or remove elements toward the end of a List, you should use an ArrayList, but if you want to add or remove elements just about anywhere else in the List, you should use a LinkedList. This is due to the fact that adding new elements anywhere but the end of the List will cause an ArrayList to shift the positions of all the elements after the index at which the new element is added, while a LinkedList does not. | An ArrayList essentially organizes and manages an internal array, in which is creates a continuous memory location chain (requiring an internal array as its container) for all of its elements. Because of this, it is easy for an ArrayList to access and traverse through elements by index (can access any element in ArrayList by index in constant time because program can calculate location with index and consecutive memory locations within internal array, but for LinkedList, accessing an element by index causes the LinkedList to start at the head node, then use the next pointers of the subsequent nodes to reach the desired index), as well as add items toward the end of the List, since doing so does not really affect the indices of the other elements in the List. To add on, whenever the size of an ArrayList exceeds the capacity, the current capacity of the ArrayList will double, and the ArrayList will create a new copy of the internal array with the new element changes implemented. | Since a LinkedList does not store elements in consecutive memory blocks (each node could be anywhere in memory, but each node&#39;s pointers refer to the memory locations), its dynamic memory allocation helps be more efficient in cases such as adding or removing elements within the beginning and middle of the List. A standard LinkedList starts off at the head/first node, and each node within it points to the previous element and next element in the List (basically the pointers of a node refer to the memory locations of the previous and next nodes), where the head node&#39;s previous pointer refers to a null value and the last node&#39;s next pointer also refers to a null value. | Since a node in a LinkedList can be placed anywhere in memory, resizing operations are efficient; adding or removing an element to or from a LinkedList does not shift the positions (memory locations) of the elements around it. Adding an element to a LinkedList causes it to create a new node and insert it to the desired position in the List, then adjust the pointers of the nodes around it, and cause the new node to point to the nodes before and after it. Removing an element from a LinkedList causes it to remove the node at the desired position, then adjusting the pointers of the nodes around with the absence of teh removed element. Note that it will take some time for the LinkedList to traverse to the the desired index, but it is still efficient in that it does not need to change the positions of the other elements to accommodate for the changes. | . Examples: . import java.util.ArrayList; // Import LinkedList class from java.util package import java.util.LinkedList; // Import List interface from java.util package import java.util.List; public class Application { public static void main(String[] args) { // Since most of the attributes and methods of the classes that implement the List interface appear in the List interface itself, making the variable type List does not really affect anything // Here, it is practical to make the arrayList variable of variable type List, because we are planning to pass it a method that takes parameters of variable type List (although you could still pass it with a variable type class that implements the List interface) List&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;(); // Instantiate LinkedList that contains parameterized type integer LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;Integer&gt;(); System.out.println(&quot;Comparing times between ArrayList and LinkedList:&quot;); doTimings(&quot;ArrayList&quot;, arrayList); doTimings(&quot;LinkedList&quot;, linkedList); // ArrayList and LinkedList have a lot of common methods, but LinkedList does not have the set() and trimToSize() methods // To update values in a LinkedList, you need to create a custom class whose objects represent each node in a LinkedList, and make that class have attributes such as its actual data, previous pointer, and next pointer // You can manually implement a set() method for a LinkedList by updating the data attribute of the targeted node LinkedList&lt;Integer&gt; numbers = new LinkedList&lt;Integer&gt;(); numbers.add(1); numbers.add(2); numbers.add(3); System.out.println(&quot;LinkedList before changes:&quot;); // Use toString() method to print LinkedList in presentable way System.out.println(numbers.toString()); // LinkedList specific methods // Method names are self-explanatory numbers.addFirst(0); numbers.addLast(7); System.out.println(numbers.removeFirst()); System.out.println(numbers.removeLast()); System.out.println(numbers.getFirst()); System.out.println(numbers.getLast()); System.out.println(numbers.indexOf(2)); System.out.println(&quot;LinkedList after changes:&quot;); System.out.println(numbers.toString()); } // Make one of the method&#39;s parameters of variable type List, which accounts for both ArrayLists and LinkedLists, since List is the parent interface for both of these classes private static void doTimings(String type, List&lt;Integer&gt; list) { // Populate List with 100,000 items for (int i = 0; i &lt; 1E5; i++) { list.add(i); } // The currentTimeMillis() method returns the current time in milliseconds from the universal UNIX reference point (start of 1970) long start = System.currentTimeMillis(); /* // Adding items to end of list // It should take the ArrayList less time to add elements to the end of the List than the LinkedList for (int i = 0; i &lt; 1E5; i++) { list.add(i); } */ // Adding items to the beginning of the List // It should take the ArrayList more time to add elements to the beginning of the List than the LinkedList, because doing so causes the ArrayList to shift the positions of all the other elements in the List (increment indices by 1), whereas the LinkedList does not (adjust the pointers of the nodes around the new element) for (int i = 0; i &lt; 1E5; i++) { // Use add method that takes 2 parameters, the first parameter being the index of the List in which the new element is inserted, and the second parameter being the element being inserted list.add(0, i); } long end = System.currentTimeMillis(); // Put end and start numerical values inside parentheses, so that their subtracted answer is computed before it is computed as a String to the rest of the String // By performing the observed operations between the instantiation of the start and end values, we can subtract start from end to determine the time it took for the operations to perform in milliseconds System.out.println(&quot;Time taken: &quot; + (end - start) + &quot; ms for &quot; + type); } } Application.main(null); . Comparing times between ArrayList and LinkedList: Time taken: 1351 ms for ArrayList Time taken: 3 ms for LinkedList LinkedList before changes: [1, 2, 3] 0 7 1 3 1 LinkedList after changes: [1, 2, 3] . 51. HashMap: Retrieving Objects via a Key . Notes: . In Java, the HashMap, which is a part of the Java Collections framework, is a data structure that saves items as key-value pairs. This means that a specific element in a HashMap consists of 2 parts: a key and a value, where the key is used to access its corresponding value. HashMaps are Generics, as they ask for 2 parameterized types, one to define the data type of the keys and the other to define that of the values. Basically, think of a HashMap as a look-up table that stores key-value pairs, with every key being unique and each key giving access to a certain value. If a key-value pair is appended to a HashMap but the key already exists, the new value will replace the already-existing value in the HashMap, and the key will remain the same (you can have duplicate values, but keys must be unique). | Most data structures, such as ArrayLists and HashMaps which are designed to hold objects, that are a part of the Java Collections framework use auto-boxing to automatically convert primitive data into their non-primitive/object counterparts (wrapper classes. e.g. int to Integer, which happens when appending primitive variables to data structures such as ArrayList). Unboxing is the process fo converting a wrapper class into its primitive data type counterpart (e.g. Integer to int, which happens when retrieving primitive values from data structures such as ArrayList). | HashMap is not an ordered data structure, as its appended element order does not necessarily match its retrieved element order (the retrieved element order is not always the same every time for HashMaps, since their elements are typically retrieved by their value properties via keys, not indices). HashMaps implement a hashing function, which essentially allows them to map keys to certain indices within an internal array, giving them the ability to have fast access times when retrieving values based on keys. | The Map.Entry&lt;Key Type, Value Type&gt; Generic method of the Map interface is used to retrieve a specific entry/element of a HashMap into an object that stores the key and value pair. The entrySet() method of the HashMap class creates a Set (collection of unique elements, focusing on the keys, which should be unique) and returns a set-view of all of the elements/entries in the HashMap. These 2 methods are essentially used in correspondence with each other to iterate through HashMaps, allowing programmers to access a specific entry, as well as useful properties such as the entry&#39;s key and value pair. The keySet() method of the HashMap class creates a Set/collection of all of the keys in the HashMap for iteration, while the values() method of the HashMap class creates a collection of all of the values (can have duplicates and values do not have to be unique) in the HashMap for iteration. Just like HashMaps, the collections created by keySet() and values() are not ordered. | . Examples: . // Import HashMap class from java.util package import java.util.HashMap; // Import Map interface, which HashMap implements, from java.util package import java.util.Map; public class Application { public static void main(String[] args) { // Instantiate HashMap with key parameterized type Integer and value parameterized type String HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;(); // Add key-value pairs to the HashMap // Notice how key is passed first, then value // Auto-boxing converts key of type int to Integer map.put(5, &quot;Five&quot;); map.put(6, &quot;Six&quot;); map.put(7, &quot;Seven&quot;); // Putting a key-value pair with a key that has already been appended will result in the value being updated with the new passed value map.put(5, &quot;New Five&quot;); // Retrieve the corresponding value to the 5 key in the HashMap String text = map.get(5); System.out.println(text); // HashMap will return value of null for keys that don&#39;t exist within it System.out.println(map.get(0)); // Iterate through key-value pairs of HashMap // Use Map.Entry to represent the variable type of a specific element (key-value pair), as well as its properties, in the map collection (HashMap) // Use entrySet() method to create a set view of all of the elements in the HashMap, so that we can iterate through each element in the HashMap using the set for (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) { // Unboxing converts key of type Integer to int // Get key and value of current HashMap entry/element in iteration int key = entry.getKey(); String value = entry.getValue(); System.out.println(key + &quot;: &quot; + value); } } } Application.main(null); . New Five null 5: New Five 6: Six 7: Seven . 52. Sorted Maps . Notes: . By default, HashMaps are not ordered, meaning that the order in which key-value pairs are appended to a HashMap does not always match the retrieval order, and the retrieval order is not always consistent. | The LinkedHashMap is a special type of HashMap that also implements the Map interface, and is actually ordered in that it maintains the appended order of elements. This means that the order in which elements are inserted into the LinkedHashMap matches the retrieval order. | The LinkedHashMap accomplishes this by having both an internal Doubly-LinkedList and a hash table. The hash table is used to store the key and value pairs, and the LinkedList is used to keep the order in which elements are appended to the LinkedHashMap. If the value of a particular key is updated, the element&#39;s index in the LinkedList stays the same, since the order of elements in the LinkedHashMap is determined by order of when each element was first appended. When elements are removed from the LinkedHashMap, they are removed from both the LinkedList and hash table. | The constructor of the LinkedHashMap can be used to specify to base the order of the LinkedHashMap on appended order or access order. In the case of using access order, the element that is most recently accessed will be automatically moved to the end of the LinkedList, marking it as the most recent appended element. | A hash code is a nearly-unique (limited to finite range of integers) integer identifier automatically generated by Java for objects. A HashMap basically keeps an internal hash table to keep key-value pairs. When a key-value pair is appended to a HashMap, the HashMap uses a hashing algorithm to determine the hash code of the key object (hence why HashMaps take non-primitive data types), then convert the hash code into an index with a hashing function to mark the key&#39;s location in the internal array (the array represents the hash table, where the index represents the hash code of the key, and the element represents the key-value pair itself). The key-value pair is then assigned to the bucket corresponding to the index in the array (reminder that primitive data are stored as actual values in an array, while object data are stored as references to their memory locations in the array), and in the case of retrieving a value from a key, the HashMap calculates the hash code of the inputted key, then uses the index representation of the hash code to find the key-value pair that matches the inputted key within the hash table. The internal array/hash table is dynamically resized using a load factor, which happens when the ratio of number of elements to the array size exceeds a certain capacity. | The TreeMap is special kind of HashMap that sorts its elements (by key) in natural order (or in a custom order if a custom comparator is defined by the programmer), implementing the NavigableMap interface and the SortedMap interface, which extends the Map interface. Like HashMap and LinkedHashMap, TreeMap provides sufficient methods for searching, insertion (can also update values for already-appended keys), and deletion. | Natural order typically means numerical and alphabetical order, and serves the basis as to how TreeMaps order the elements within it (by comparing keys). Each TreeMap has an underlying red-black binary search tree, which maintains the balanced height of the tree. The NavigableMap interfaces provides TreeMaps with further functionalities such as range-based key and value retrievals. | In Java, a tree is a fundamental data structure that represents a hierarchical structure of nodes. The root node is the ultimate parent of all the nodes under it, each node has zero or mode child nodes, and nodes are connected by edges (which are basically connections that link two nodes together and usually have directionality from parent node to child node). | . Examples: . import java.util.HashMap; // Import the LinkedHashMap class from the java.util package import java.util.LinkedHashMap; // Import the TreeMap class from the java.util package import java.util.TreeMap; // Import the Map interface from the java.util package import java.util.Map; class Temp { } public class Application { public static void main(String[] args) { // Since the Temp class doesn&#39;t have a custom toString() method, this will print out an automatic String representation of the object // The text after the @ sign is the hexadecimal text that relates to the object&#39;s memory address System.out.println(new Temp()); // These classes all implement the Map interface, so use Map as variable type to capture all these classes when used as parameter in method // Can make variable type Map, as the method testMap() primarily uses Map methods, and a common variable type Map can be used to group these different types of Maps, and this is practical in that Map is the variable type of the parameter of testMap() HashMap&lt;Integer, String&gt; hashMap = new HashMap&lt;Integer, String&gt;(); // Use LinkedHashMap as viable option to keep keys and values in the order that they were put into the HashMap LinkedHashMap&lt;Integer, String&gt; linkedHashMap = new LinkedHashMap&lt;Integer, String&gt;(); // Use TreeMap as viable option to sort elements (by key) in natural order, which usually implements numerical and alphabetical order TreeMap&lt;Integer, String&gt; treeMap = new TreeMap&lt;Integer, String&gt;(); System.out.println(&quot;HashMap (Unordered):&quot;); testMap(hashMap); System.out.println(&quot;LinkedHashMap (Insertion order):&quot;); testMap(linkedHashMap); System.out.println(&quot;TreeMap (Natural order):&quot;); testMap(treeMap); } public static void testMap(Map&lt;Integer, String&gt; map) { // HashMap, LinkedHashMap, and TreeMap all implement the Map interface, meaning a lot of their methods have been defined in the Map interface, and thus can be used by the object of variable type Map // Insertion map.put(9, &quot;Fox&quot;); map.put(6, &quot;Pig&quot;); map.put(7, &quot;Dog&quot;); map.put(8, &quot;Cat&quot;); map.put(1, &quot;Cow&quot;); map.put(2, &quot;Lion&quot;); // Deletion by key map.remove(6); // Update existing key map.put(1, &quot;Jaguar&quot;); // Iteration and retrieval // keySet() creates a set that contains all the keys in the Map // Could use int instead of Integer for unboxing data types of values from the Map, but regardless, the values stays the same for (Integer key : map.keySet()) { String value = map.get(key); System.out.println(key + &quot;: &quot; + value); } } } Application.main(null); . REPL.$JShell$18C$Temp@5b7e4ce8 HashMap (Unordered): 1: Jaguar 2: Lion 7: Dog 8: Cat 9: Fox LinkedHashMap (Insertion order): 9: Fox 7: Dog 8: Cat 1: Jaguar 2: Lion TreeMap (Natural order): 1: Jaguar 2: Lion 7: Dog 8: Cat 9: Fox . 53. Sets . Notes: . In Java, a Set, which extends the Collections interface, is a Generic data structure that stores an unordered (usually) (elements are stored using a method that maximizes efficiency when retrieving elements and checking for element uniqueness, as well as ensures a even spread of elements in the internal array/hash table) collection of unique elements. | The Set is a foundational interface that is implemented by classes such as HashSet, LinkedHashSet, and TreeSet, similar to the Map interface&#39;s relationship with HashMap, LinkedHashMap, and TreeMap. | It was mentioned before that Sets are usually unordered. However, this is only the case for the HashSet class, which can be considered the most basic/lightweight Set. LinkedHashSet, like LinkedHashMap, maintains insertion order, while TreeSet, like TreeMap, sorts elements by natural order. | HashSet utilizes a hash table to effectively and efficiently manage (insertion, deletion, and retrieval) the elements within it, as the hash table data structure gives HashSet a hashing function to map each element stored within it to a specific index in the internal array (which is basically the hash table). | The inner-workings of the hash table in the HashSet: An element added has its hash code calculated, which is then converted to an index for the internal array/hash table with a hash function. To handle internal collisions, each index in the hash table usually has a LinkedList that can store more than one element if multiple elements added have the same hash code (indicating duplicate elements. The HashSet will only use one of the elements in the LinkedList to ensure only unique elements are &quot;saved&quot; in the HashSet). Upon retrieval or removal of elements, the HashSet calculates the hash code then index for the inputted element, then traverses through the hash table using that index to find the actual element within the HashSet. | HashSet, like HashMap, is dynamically resizable as it increases the size of its internal array/hash table when the number of elements exceeds a certain capacity. LinkedHashSet and TreeSet have very similar inner-workings to HashSet, except they utilize additional data structures such as LinkedList (LinkedHashSet) and red-black binary search tree (TreeSet). | . Examples: . // Necessary imports import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Set; public class Application { public static void main(String[] args) { // Initialize set of variable type Set interface and object type HashSet class, as well as with parameterized type String // Set is the parent interface of HashSet, LinkedHashSet, and TreeSet, and so it can be used as the variable type for objects of those classes // HashSets are unordered Set&lt;String&gt; set1 = new HashSet&lt;String&gt;(); // Check if set is empty // isEmpty() method returns true if the set has not elements within it, and false otherwise if (set1.isEmpty()) { System.out.println(&quot;Set 1 is currently empty&quot;); } // Insertion set1.add(&quot;dog&quot;); set1.add(&quot;cat&quot;); set1.add(&quot;mouse&quot;); // Adding duplicate items basically does nothing, since a Set only contains one instance of every distinct element set1.add(&quot;mouse&quot;); if (set1.isEmpty() == false) { System.out.println(&quot;Set 1 is not empty anymore&quot;); } // The toString() method for objects of classes from the Collections framework does a good job of printing a visual representation of these data structures System.out.println(set1); // LinkedHashSets maintain insertion order Set&lt;String&gt; set2 = new LinkedHashSet&lt;String&gt;(); set2.add(&quot;dog&quot;); set2.add(&quot;cat&quot;); set2.add(&quot;mouse&quot;); // Duplicate items do not cause re-arrangement, as they are ignored. Here, elements are ordered based on when they were first appended set2.add(&quot;mouse&quot;); System.out.println(set2); // TreeSet sorts items based on natural order Set&lt;String&gt; set3 = new TreeSet&lt;String&gt;(); // Natural order indicates alphabetical order for Strings set3.add(&quot;dog&quot;); set3.add(&quot;cat&quot;); set3.add(&quot;mouse&quot;); set3.add(&quot;mouse&quot;); // Removing item. Since duplicates are ignored, the distinct element itself is removed set3.remove(&quot;mouse&quot;); System.out.println(set3); // Iterating through Set using enhanced for loop, in turn allowing us to access every individual element in the Set for (String element : set1) { System.out.print(element + &quot; &quot;); } System.out.println(); // Search for item within set // The contains() method returns true if the set does contain the specified item, and false otherwise if (set1.contains(&quot;dog&quot;)) { System.out.println(&quot;Contains dog&quot;); } if (set1.contains(&quot;aardvark&quot;)) { System.out.println(&quot;Contains aardvark&quot;); } // Intersection Set&lt;String&gt; set4 = new TreeSet&lt;String&gt;(); set4.add(&quot;dog&quot;); set4.add(&quot;cat&quot;); set4.add(&quot;mouse&quot;); set4.add(&quot;bear&quot;); set4.add(&quot;lion&quot;); System.out.println(set4); Set&lt;String&gt; set5 = new TreeSet&lt;String&gt;(); set5.add(&quot;dog&quot;); set5.add(&quot;cat&quot;); set5.add(&quot;giraffe&quot;); set5.add(&quot;ant&quot;); set5.add(&quot;monkey&quot;); System.out.println(set5); // HashSet is the most light weight type of Set // Passing set4 into intersectionSet&#39;s constructor means that intersectionSet is a copy of set4 Set&lt;String&gt; intersectionSet = new HashSet&lt;String&gt;(set4); System.out.println(intersectionSet); // The retainAll method makes it so that intersectionSet only keeps elements found in both intersectionSet/set4 and set5 intersectionSet.retainAll(set5); System.out.println(intersectionSet); // Differences Set&lt;String&gt; differencesSet = new HashSet&lt;String&gt;(set4); System.out.println(differencesSet); // The removeAll method with set5 as the argument makes it so that differencesSet, which is a copy of set4, only keeps elements that are not found in set5 differencesSet.removeAll(set5); System.out.println(differencesSet); } } Application.main(null); . Set 1 is currently empty Set 1 is not empty anymore [mouse, cat, dog] [dog, cat, mouse] [cat, dog] mouse cat dog Contains dog [bear, cat, dog, lion, mouse] [ant, cat, dog, giraffe, monkey] [mouse, cat, bear, dog, lion] [cat, dog] [mouse, cat, bear, dog, lion] [mouse, bear, lion] . 54. Using Custom Objects in Sets and as Keys in Maps . Notes: . The equals() and hashCode() methods are both methods inherited from the Object grandparent class, and are typically overridden by the programmer to define what the programmer thinks determines equality between objects. | In conventionally overriding, the equals() method returns true if 2 objects are equal semantically (i.e. in terms of property values, unlike == which checks if 2 objects are literally the same object/memory location, which is the same as the default equals() method that is not overridden). When overriding the equals() method, programmer usually follow these core principles: reflexive, symmetric, transitive, consistent, and null values, which ensure that the equals() method is effective and consistent in comparing objects semantically. | The hashCode() method generates an almost-unique integer hash code (identifier) for a particular object, and hash codes are often used by data structures such as Maps and Sets, which utilize hash tables, during object management. Hash-based data structures calculate the hash code of an object to determine the location that object should be placed within its internal data structure(s), which includes a hash table (which is sort of like an array with indices and elements). | Oftentimes, when the equals() method is overridden, the hashCode() method is also overridden. This is because, with the hashCode() method being overridden the correct way, 2 objects that are considered equal semantically by the equals() method will have the same hash codes, thus effectively maintaining the important relationship between the equals() and hashCode() methods (as the hash code is an identifier of an object and its property values). | As hash-based data structures like Maps and Sets contain unique keys and elements, respectively, they by default cannot tell if 2 custom objects (objects of the Java default classes, like String, actually have overridden equals() methods that actually compare the contents of 2 objects) are actually equal semantically. Because of this, the equals() method should be overridden in the custom class to define what makes objects of it equal (usually defined semantically), so that these data structures can prevent duplicate custom objects (duplicate as in equal semantically) and thus maintain only distinct items. Furthermore, the hashCode() method should also be overridden, because 2 objects that are equal semantically should conventionally have the same hash codes; hash-based data structures use the hash code of objects to determine their position in the hash table, so 2 duplicate objects should have the same hash code to ensure data collisions are handled (with LinkedLists at each index to hold duplicate elements). It is important to note that hash-based data structures use both the equals() method and the hashCode() method to determine if 2 objects are distinct, as well as the different locations (in the hash table) of distinct objects. | . Examples: . import java.util.Map; import java.util.LinkedHashMap; import java.util.Set; import java.util.LinkedHashSet; class Person { private int id; private String name; public Person(int id, String name) { this.id = id; this.name = name; } @Override public String toString() { return &quot;Person{ID is: &quot; + id + &quot;; Name is: &quot; + name + &quot;}&quot;; } // Override the equals() and hashCode() methods to ensure objects of the Person class are compared semantically when checking for equality @Override public int hashCode() { // Hash algorithm to calculate hash code of object // Notice how the algorithm takes into account values of the attributes, indicating that attributes have an impact on the hash code of an object final int prime = 31; int result = 1; result = prime * result + id; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } @Override public boolean equals(Object obj) { // Check if objects refer to the same memory location with ==, if they are non-null, and if they are from the same class if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } // Check if the property values of both objects are equal (semantically) final Person other = (Person) obj; if (id != other.id) { return false; } if (name == null) { if (other.name != null) { return false; } } else if (!name.equals(other.name)) { return false; } return true; } } public class Application { public static void main(String[] args) { // Make object type LinkedHashMap, not Map, since you cannot create an object of an interface. You can, however, create an object of a class that implements the interface // LinkedHashMap maintains insertion order Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;(); map.put(&quot;one&quot;, 1); map.put(&quot;two&quot;, 2); map.put(&quot;three&quot;, 3); // Keys in Maps are unique, which means that the value of this particular key is updated with that of the duplicate key map.put(&quot;one&quot;, 1); // The keySet() method creates a set (collection of unique elements) of all the keys in the Map, which are all the same data type as defined by the parameterized type in the Map for (String key : map.keySet()) { System.out.println(key + &quot;: &quot; + map.get(key)); } Set&lt;String&gt; set = new LinkedHashSet&lt;String&gt;(); set.add(&quot;dog&quot;); set.add(&quot;cat&quot;); set.add(&quot;mouse&quot;); // A Set only contains distinct elements, which means duplicate items are essentially ignored in terms of what data is saved set.add(&quot;cat&quot;); System.out.println(set); // Map and Set interactions with custom objects // Create custom object from the Person class we created ourselves Person person1 = new Person(0, &quot;Bob&quot;); Person person2 = new Person(1, &quot;Sue&quot;); Person person3 = new Person(2, &quot;Mike&quot;); Person person4 = new Person(1, &quot;Sue&quot;); // In terms of attribute values, person2 and person4 are equal semantically // However, Maps and Sets by default view them as distinct objects, as they do not compare them in terms of their properties // By overriding the equals() and hashCode() methods, we can determine what counts as equal in terms of properties for objects of this particular class (and any child classes of the class. Will have to override again for child classes to account for properties specific to the child classes) // Sets and Maps use the equals() and hashCode() methods (based on what boolean value they return) to determine if 2 objects are distinct to each other // After overriding these 2 methods, person2 and person4 will be considered equal semantically by Sets and Maps, and thus not distinct to each other // Map stores keys as variable type Person, which accounts for objects created from the Person class Map&lt;Person, Integer&gt; customMap = new LinkedHashMap&lt;Person, Integer&gt;(); customMap.put(person1, 1); customMap.put(person2, 2); customMap.put(person3, 3); customMap.put(person4, 1); for (Person key : customMap.keySet()) { System.out.println(key + &quot;: &quot; + customMap.get(key)); } // Set stores elements as variable type Person Set&lt;Person&gt; customSet = new LinkedHashSet&lt;Person&gt;(); customSet.add(person1); customSet.add(person2); customSet.add(person3); customSet.add(person4); System.out.println(customSet); } } Application.main(null); . one: 1 two: 2 three: 3 [dog, cat, mouse] Person{ID is: 0; Name is: Bob}: 1 Person{ID is: 1; Name is: Sue}: 1 Person{ID is: 2; Name is: Mike}: 3 [Person{ID is: 0; Name is: Bob}, Person{ID is: 1; Name is: Sue}, Person{ID is: 2; Name is: Mike}] . 55. Sorting Lists . Notes: . The Collections class, which is a part of the Java Collections framework, provides a variety of functionalities in the form of static methods (static methods can be called directly using dot notation with the class name, meaning you do not necessarily need to create an object of the class to call these methods). For example, the sort() method of the Collections class by default sorts Lists in ascending (least to greatest) order based on a natural ordering comparator (usually numerical and alphabetical order). The elements in the Lists need to implement the Comparable interface (Wrapper classes and Strings automatically implement it, by custom classes need to manually implement it), which is an interface that allows objects to be compared to each other. Furthermore, programmers can use the overloaded (different parameters) sort() method to define a custom comparator to replace the natural ordering comparator. | The Comparator Generic/template interface is implemented by classes defined by programmer as custom comparators. When the programmer does not want to compare objects on the basis of the natural ordering defined by the Comparable interface, which is implemented by the objects being compared, they create a custom class that implements the Comparator interface, which takes a parameterized type that indicates what type of data is being compared. With this custom class, the programmer can define the type of ordering the custom comparator is based on. The compare() method of the Comparator interface takes 2 object parameters of the defined parameterized type by the programmer, then returns a negative integer if the first object is less than the second object, returns 0 if both objects are considered equal, and returns a positive integer if the first object is greater than the second object. | With a custom comparator, objects of any class can now be sorted (like custom objects instead of wrapper classes and Strings), even their classes do not implement the Comparable interface. Custom comparators can be used in correspondence with the sort() method of the Collections class to replace the default natural ordering sorting. By default, the sort() method utilizes the natural ordering comparator provided by Comparable, but with a custom comparator, the sort() method utilizes the compare() method provided by the implemented Comparator. | The compareTo() method of the Comparable interface compares 2 objects based on natural ordering, and returns a negative integer if the first object (the one the method is called on) is less than the second object (the one passed as an argument), 0 if both objects are equal, and a positive integer if the first object is greater than the second object. It basically follows the same logic as the compare() method from the Comparator interface. | To sort in descending (greatest to least) order for a custom comparator, just reverse the usual (usual as in ascending) sign of the return value(s), meaning if the first object is less than the second object, return a positive integer, if they are equal, return 0, and if the first object is greater than the second object, return a negative integer. | . Examples: . import java.util.List; import java.util.ArrayList; import java.util.Collections; import java.util.Comparator; import java.lang.Comparable; class Person { private int id; private String name; public Person(int id, String name) { this.id = id; this.name = name; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String toString() { return &quot;Person{ID: &quot; + id + &quot;, Name: &quot; + name + &quot;}&quot;; } } // Custom comparator that sorts Strings in ascending order of String length // Define parameterized type of Comparator interface, as well as the data types of the compare() method&#39;s parameters, as Strings class StringLengthComparator implements Comparator&lt;String&gt; { // Implement Comparator&#39;s method @Override public int compare(String s1, String s2) { int length1 = s1.length(); int length2 = s2.length(); // Return positive integer, if length of first String is greater than that of second String // Return negative integer, if length of first String is less than that of second String // Return 0 if length of first String is equal to that of second String if (length1 &gt; length2) { return 1; } else if (length1 &lt; length2) { return -1; } return 0; } } // Custom comparator that sorts Strings in descending order alphabetically class ReverseAlphabeticalComparator implements Comparator&lt;String&gt; { @Override public int compare(String s1, String s2) { // Use compareTo() method to concise code and still effectively compare both Strings by natural order // Make return value negative to ensure descending order return -s1.compareTo(s2); } } public class Application { public static void main(String[] args) { // Variable type List interface and object type ArrayList class, with parameterized type String, as ArrayList is a Generic data structure List&lt;String&gt; animals = new ArrayList&lt;String&gt;(); animals.add(&quot;tiger&quot;); animals.add(&quot;lion&quot;); animals.add(&quot;cat&quot;); animals.add(&quot;snake&quot;); animals.add(&quot;mongoose&quot;); animals.add(&quot;elephant&quot;); // ArrayList is an ordered data structure, meaning each of its elements has a consecutive index // toString() method of classes of the Collections framework provides a clear visual representation the Collections data structures System.out.println(&quot;String ArrayList before sort: &quot; + animals); // Use sort() method to sort list in natural ascending order (in this case alphabetical) // Call the sort() method directly from the Collections class name Collections.sort(animals); System.out.println(&quot;String ArrayList after natural ascending sort: &quot; + animals); // Data structures of the Collections framework store mostly objects, so use wrapper class instead of primitive type definition in the parameterized type List&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;(); numbers.add(3); numbers.add(1); numbers.add(37); numbers.add(73); numbers.add(20); System.out.println(&quot;Integer ArrayList before sort :&quot; + numbers); // Sort in natural order (i.e. numerical here) Collections.sort(numbers); System.out.println(&quot;Integer ArrayList after natural ascending sort: &quot; + numbers); // Sort List based on custom-defined comparator Collections.sort(animals, new StringLengthComparator()); System.out.println(&quot;String ArrayList after String length ascending sort: &quot; + animals); Collections.sort(animals, new ReverseAlphabeticalComparator()); System.out.println(&quot;String ArrayList after descending natural sort: &quot; + animals); // Sort List based on custom-defined comparator (directly implementing Comparator interface) which is represented as anonymous class Collections.sort(numbers, new Comparator&lt;Integer&gt;() { // Parameterized data types have to be non-primitive, so use wrapper classes even in parameters // Reverse the return values for ascending to get appropriate return values for descending // compareTo() method also follows natural sort, so that can be an alternative code to this @Override public int compare(Integer i1, Integer i2) { if (i1 &gt; i2) { return -1; } else if (i1 &lt; i2) { return 1; } return 0; } }); System.out.println(&quot;Integer ArrayList after descending natural sort: &quot; + numbers); // List of custom objects List&lt;Person&gt; people = new ArrayList&lt;Person&gt;(); // Initialize object and add that to the ArrayList on the same line // Variable type Person automatically accounts for object type Person and any objects of child classes of Person people.add(new Person(1, &quot;Joe&quot;)); people.add(new Person(3, &quot;Bob&quot;)); people.add(new Person(4, &quot;Claire&quot;)); people.add(new Person(2, &quot;Sue&quot;)); // System.out.println applies not only to the data structure, but also the objects within it System.out.println(&quot;Custom object ArrayList before sort: &quot; + people); // Custom objects need their own custom comparator when being sorted, since natural ordering by default does not apply to them Collections.sort(people, new Comparator&lt;Person&gt;() { @Override public int compare(Person p1, Person p2) { if (p1.getId() &gt; p2.getId()) { return 1; } else if (p1.getId() &lt; p2.getId()) { return -1; } return 0; } }); System.out.println(&quot;Custom object ArrayList after ascending sort by id: &quot; + people); Collections.sort(people, new Comparator&lt;Person&gt;() { @Override public int compare(Person p1, Person p2) { return p1.getName().compareTo(p2.getName()); } }); System.out.println(&quot;Custom object ArrayList after ascending sort by name: &quot; + people); } } Application.main(null); . String ArrayList before sort: [tiger, lion, cat, snake, mongoose, elephant] String ArrayList after natural ascending sort: [cat, elephant, lion, mongoose, snake, tiger] Integer ArrayList before sort :[3, 1, 37, 73, 20] Integer ArrayList after natural ascending sort: [1, 3, 20, 37, 73] String ArrayList after String length ascending sort: [cat, lion, snake, tiger, elephant, mongoose] String ArrayList after descending natural sort: [tiger, snake, mongoose, lion, elephant, cat] Integer ArrayList after descending natural sort: [73, 37, 20, 3, 1] Custom object ArrayList before sort: [Person{ID: 1, Name: Joe}, Person{ID: 3, Name: Bob}, Person{ID: 4, Name: Claire}, Person{ID: 2, Name: Sue}] Custom object ArrayList after ascending sort by id: [Person{ID: 1, Name: Joe}, Person{ID: 2, Name: Sue}, Person{ID: 3, Name: Bob}, Person{ID: 4, Name: Claire}] Custom object ArrayList after ascending sort by name: [Person{ID: 3, Name: Bob}, Person{ID: 4, Name: Claire}, Person{ID: 1, Name: Joe}, Person{ID: 2, Name: Sue}] . 56. Natural Ordering . Notes: . Natural ordering, which is also referred to as lexicographic (principles of the dictionary) ordering or alphanumeric ordering, is essentially a sorting basis that sorts elements either numerically (numbers), alphabetically (words), or alphanumerically (both numbers and words, where all numbers are first considered, and then the words in alphabetical order). | The Collection Generic (takes parameterized type just like its sub-interfaces) interface provides an architectural foundation for managing data structures of the Java Collections framework, as it is implemented (directly by the classes themselves or indirectly through the sub-interfaces those classes implement) by different types of Lists, Sets, and Queues. As such, it provides fundamental operations for these diverse data structures such as adding, removing, querying (e.g. check if empty), updating, and iterating. The Collection interface has a variety of sub-interfaces (interface inheritance) such as List, Set, and Queue, which each define more specifically the characteristics and inner-workings of the data structures that fall under them. | The Comparable Generic interface is typically used by a class (Comparable is automatically implemented by String and Wrapper classes) implementing it to define the natural ordering sorting basis of that class. Once a custom class effectively implements the compareTo() (ascending: return negative integer (current object is sorted to an earlier position in the data structure) if current object is less than specified argument object, return 0 (both objects are next to each other) if both objects are equal, and return a positive integer (current object is sorted to a later position) if the current object is greater than the specified argument object. descending: reverse the signs of the integer returned) method of Comparable, its custom objects can then be sorted in custom natural order within key data structures of the Java Collections framework. | . Examples: . // Necessary imports import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.List; import java.util.TreeSet; import java.lang.Comparable; // Make custom class Person implement Comparable interface with parameterized type Person // The Comparable interface here allows for Person custom objects to be compared to each other on the basis of a natural order that will need to be later defined here class Person implements Comparable&lt;Person&gt; { private String name; public Person(String name) { this.name = name; } public String toString() { return &quot;Person{&quot; + name + &quot;}&quot;; } // Override hashCode() and equals() methods so that Sets can determine if objects of Person are distinct or not @Override public int hashCode() { // The value of the hash code is affected by the value of the name attribute, meaning objects of Person that are considered equal should have the same hash code final int prime = 31; int result = 1; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } @Override public boolean equals(Object obj) { // Use variable type Object super class, as Object accounts for all child classes, in case an object of a different class to the current object is passed if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } // Once both objects are confirmed to have the same class, down-cast the other object to the appropriate class variable type final Person other = (Person) obj; if (name == null) { if (other.name != null) { return false; } } else if (!name.equals(other.name)) { return false; } return true; } // The compareTo() method is similar to that of the compare() method of the Comparator interface, and defines how Person objects should be compared in the custom order (usually defined as the natural order of these custom objects) @Override public int compareTo(Person person) { // Natural order by name length numerically ascending int len1 = name.length(); int len2 = person.name.length(); if (len1 &gt; len2) { return 1; } else if (len1 &lt; len2) { return -1; } else { // Do not return 0 automatically if 2 names have the same length, as we need to prevent conflict with the equals() method // This is because for TreeSet and TreeMap, the return value of 0 from the compareTo() method may conflict with the return value from the equals() method within a class // Since TreeSet and TreeMap use both compareTo() and equals() to determine the content and order of the elements within them, if compareTo() deems 2 values as equal, when equals() does not, this conflict may result in TreeSet or TreeMap ignoring some distinct elements which were deemed equal by compareTo() /* return 0; */ // Since the name attribute is of type String, the version of the compareTo() method used here will be that of the parameterized String class type, thus showing the usefulness of parameterized type (different data types should be worked with differently) // Even though name is a private attribute, we do not need getters or setters to access it from the other object, since it is being accessed within the class it was originally defined in // If 2 objects&#39; names have the same length, compare them alphabetically (actually looks through content of Strings). This makes it so that the return values of equals() and compareTo() no longer conflict with each other, as the compareTo() method now actually searches through the contents of name attribute values // Alternatively, we could have instead modified the equals() method to have consistent return values with the compareTo() method return name.compareTo(person.name); } } } public class Application { public static void main(String[] args) { // Define ArrayList with parameterized type custom object of variable type Person // Lists need to be manually sorted List&lt;Person&gt; list = new ArrayList&lt;Person&gt;(); // Define TreeSet with parameterized type Person, which stores elements automatically sorted in natural order // However, since Person is a custom class, we need to manually make it implement the Comparable interface, as well as define its natural ordering // This way, the Collections sort() method will work on data structures that store Person objects, and TreeSet can save Person objects and automatically sort them by the manually defined natural order Set&lt;Person&gt; set = new TreeSet&lt;Person&gt;(); addElements(list); // Sort ArrayList with elements of variable and object type Person, which in turn implements the Comparable interface (allows for Collections class&#39;s sort() method to work in the first place), by natural order Collections.sort(list); addElements(set); showElements(list); System.out.println(); showElements(set); } // static so this method can be called directly inside the static main() method // private so this method can only be called inside the class (however, this method can be indirectly called outside of the class if it is called within a public class in the same class) // The Collection interface is extended by List and Set interfaces, so data structures that fall under variable type List and Set also by inheritance fall under variable type Collection private static void addElements(Collection&lt;Person&gt; collection) { collection.add(new Person(&quot;Joe&quot;)); collection.add(new Person(&quot;Sue&quot;)); collection.add(new Person(&quot;Juliet&quot;)); collection.add(new Person(&quot;Claire&quot;)); collection.add(new Person(&quot;Mike&quot;)); } private static void showElements(Collection&lt;Person&gt; collection) { for (Person element : collection) { System.out.print(element + &quot; &quot;); } System.out.println(); } } Application.main(null); . Person{Joe} Person{Sue} Person{Mike} Person{Claire} Person{Juliet} Person{Joe} Person{Sue} Person{Mike} Person{Claire} Person{Juliet} . 57. Queues . Notes: . In Java, the Queue is a Generic Java Collections framework data structure that follows the First-In-First-Out (FIFO) ordering principle (establishes how elements in a data structure are ordered and managed), meaning that the first element appended to a Queue will be the first element to be removed from the Queue. A real-life example of a Queue would be like a line of people purchasing tickets, where it is essentially first-come-first-serve. | The front of a Queue is known as the head, while the back of a Queue is known as the tail. Elements are removed from the head of the Queue (Enqueue), and elements are appended to the back of the Queue (Dequeue). | The Queue interface is implemented by numerous classes, including LinkedList, ArrayDeque, and PriorityQueue, which each have a slightly different implementation of Queue, with LinkedList being the most standard implementation. Queues are oftentimes used to accomplish tasks such as handling multi-threaded environments and dealing with asynchronous programming. | The inner-workings of a LinkedList-based Queue involves an internal LinkedList (each node has data and next node pointer), where the head of the Queue points to the first node in the LinkedList, and the tail of the Queue points to the last node in the LinkedList. The Enqueue operation will append a new node to the end of the LinkedList, while the Dequeue operation will remove the node at the front of the LinkedList. | Lists like LinkedList and ArrayList are dynamically resizable data structures, meaning that LinkedList-based Queues typically do not have a maximum item capacity. However, this isn&#39;t the case of the ArrayBlockingQueue class (implements BlockingQueue interface, which extends Queue interface), which a part of the java.util.concurrent package of the Java Collections framework. | BlockingQueues provide blocking/waiting operations when the Queue is full or empty (e.g. one thread will enqueue elements, a separate thread will dequeue elements, and both threads will depend on each other in the case of blocking), allowing for multiple threads (a thread is a sequence of code instructions that is to be executed by the CPU, while a process is an independent instance of a program&#39;s execution, containing memory space, system resources, and a thread(s). A process can contain multiple threads, which enables the ability for the program to multi-task and share resources amongst threads) to effectively communicate and synchronize properly. | ArrayBlockingQueue contains an internal array, and is initialized with a specified fixed size capacity (maximum size of the Queue), meaning when it is full, any further enqueued elements will need to be blocked until space becomes available again, and when it is empty, any further dequeued elements will need to be blocked until an element becomes available. Because of this, it provides blocking versions of Enqueue and Dequeue operations (will need to initialize with variable type BlockingQueue interface, so that ArrayBlockingQueue can implement the methods specific to BlockingQueue but not Queue interface), which are utilized when the ArrayBlockingQueue is empty or full and in a multi-thread environment. Not only that, ArrayBlockingQueue is thread-safe, in that it works well in allowing concurrent access in a multi-thread environment (e.g. one thread adds elements to Queue, while another thread removes elements to Queue concurrently, and the special Enqueue and Dequeue operations provided by the BlockingQueue interface make it easier for these threads to synchronize together), and thus effective synchronization amongst multiple threads. | . Examples: . // Necessary imports import java.util.Queue; import java.util.concurrent.BlockingQueue; import java.util.concurrent.ArrayBlockingQueue; public class Application { public static void main(String[] args) { // Initialize Queue (FIFO) of variable type Queue interface and object type ArrayBlockingQueue class, with parameterized type Integer wrapper class // Specify in ArrayBlockingQueue constructor that this Queue can only hold a maximum of 3 items Queue&lt;Integer&gt; q1 = new ArrayBlockingQueue&lt;Integer&gt;(3); // Non-blocking operations implemented from Queue interface // q1.element() will throw NoSuchElementException here, since the Queue does not have any elements yet // Append elements to tail of Queue (Enqueue) q1.add(10); q1.add(20); q1.add(30); // Retrieve head of Queue System.out.println(&quot;Head of Queue is: &quot; + q1.element()); // Will throw an unchecked/runtime exception (we aren&#39;t forced to handle it by the program, but we will nonetheless), since adding another element will exceed the BlockingQueue&#39;s item capacity try { q1.add(40); // IllegalStateException to handle illegal operations on the Queue depending on its state } catch (IllegalStateException e) { System.out.println(&quot;Tried to add too many items to the Queue.&quot;); } // Iterate through queue using enhanced for loop (will not work for every type of Queue), not standard for loop since we can&#39;t access items of Queues using indices // We can unbox values of the Queue to int primitive type, but that isn&#39;t necessary // Scope of this value variable is restricted to that of the for loop, since it is defined in the for loop parameters for (Integer value : q1) { System.out.println(&quot;Queue value: &quot; + value); } // Scope of this value variable is restricted to that of the main() method Integer value; // Remove element from head of Queue (Dequeue) and store it in a variable value = q1.remove(); System.out.println(&quot;Removed from Queue: &quot; + value); System.out.println(&quot;Removed from Queue: &quot; + q1.remove()); System.out.println(&quot;Removed from Queue: &quot; + q1.remove()); // Will throw runtime exception because we are trying to remove an element from a Queue that is empty try { System.out.println(&quot;Removed from Queue: &quot; + q1.remove()); // NoSuchElementException to handle instance when Queue tries to get value of newly removed element when the Queue is already empty } catch (NoSuchElementException e) { System.out.println(&quot;Tried to remove too many items from the Queue.&quot;); } Queue&lt;Integer&gt; q2 = new ArrayBlockingQueue&lt;Integer&gt;(2); // offer() method will append element to tail of Queue and return true if possible, but will return false if it cannot append an element // Will return true and append element to Queue System.out.println(&quot;Queue offer: &quot; + q2.offer(10)); q2.offer(20); if (q2.offer(30) == false) { System.out.println(&quot;Offer failed to add third item.&quot;); } // Cannot make variable value, again, since it has already been defined in a wider scope, and will apply to inner scopes for (Integer value2 : q2) { System.out.println(&quot;Queue value: &quot; + value2); } // poll() method will remove and return element at the head of the Queue, but will return null if there is not element at the head of the Queue System.out.println(&quot;Queue 2 poll: &quot; + q2.poll()); System.out.println(&quot;Queue 2 poll: &quot; + q2.poll()); System.out.println(&quot;Queue 2 poll: &quot; + q2.poll()); // peek() method returns head of Queue, but will return null if the Queue doesn&#39;t have any elements System.out.println(&quot;Queue 2 peek: &quot; + q2.peek()); // Blocking operations implemented from BlockingQueue interface specifically. Use these in a multi-thread environment /*BlockingQueue&lt;Integer&gt; q3 = new ArrayBlockingQueue&lt;Integer&gt;(2); // Enqueue operation that utilizes blocking (waiting) try { q3.put(10); q3.put(20); q3.put(30); } catch (InterruptedException e) { e.printStackTrace(); } // Dequeue operation that utilizes blocking try { q3.take(); q3.take(); q3.take(); } catch (InterruptedException e) { e.printStackTrace(); }*/ } } Application.main(null); . Head of Queue is: 10 Tried to add too many items to the Queue. Queue value: 10 Queue value: 20 Queue value: 30 Removed from Queue: 10 Removed from Queue: 20 Removed from Queue: 30 Tried to remove too many items from the Queue. Queue offer: true Offer failed to add third item. Queue value: 10 Queue value: 20 Queue 2 poll: 10 Queue 2 poll: 20 Queue 2 poll: null Queue 2 peek: null . 58. Using Iterators . Notes: . In Java, the Iterator Generic (template type, meaning we have to specify parameterized type of the elements stored within it) interface of the Java Collections framework is useful for traversing through the elements of core data structures such as List, Set, and Map, which are all a part of the Java Collections framework. The Iterator interface provides methods that are effective in iterating through the elements of a certain type of collection, one by one, without necessarily interfering the collection&#39;s implementation details or inner-workings. | The iterator() method of the Collection interface (which extends from the Iterable interface and actually inherits the iterator() method, and is implemented by just about every type of collection class in the Java Collections framework) from the Java Collections framework essentially returns a Generic (has parameterized data type that will match the data type of the elements stored by the data structure) Iterator object when called on a data structure (Iterator object derived from that data structure), and this Iterator object provides further methods (obtained from Iterator interface, but each collection&#39;s way of implementing Iterator&#39;s methods may be different from each other) that allow the elements of the data structure to be accessed one by one, thus enabling iteration. | An Iterator object can only be derived from a data structure if that type of collection implements the Iterable interface, since classes that implement Iterable will have the correct implementation of the iterator() method that was originally declared in Collection to properly create an Iterator Generic object. Just about all of the data structures in the Java Collections framework implement Iterable (more on Iterable later), as important interfaces like List, Set, and Map all extend the Iterable interface, and by inheritance all of the classes that implement them will have to by extension implement Iterable. | The ListIterator interface of the Java Collections framework provides additional methods useful for iterating through Lists, not only forwards, but also backwards, unlike the standard Iterator interface. ListIterator objects can be created by calling the listIterator() method on Lists that implement Iterable. | . Examples: . import java.util.LinkedList; import java.util.Iterator; public class Application { public static void main(String[] args) { LinkedList&lt;String&gt; animals = new LinkedList&lt;String&gt;(); animals.add(&quot;fox&quot;); animals.add(&quot;cat&quot;); animals.add(&quot;dog&quot;); animals.add(&quot;rabbit&quot;); System.out.println(&quot;Iteration with enhanced for loop:&quot;); // Standard way of iteration through List is using for loop by list index or enhanced for loop // For-each loops actually sort of utilize Iterator behind-the-scenes for (String animal : animals) { System.out.println(animal); // animals.remove(2); // The remove() method of LinkedList will not work here, as it will result in a ConcurrentModificationException due to an iteration operation and removal operation happening at the same time } System.out.println(); // Create Iterator object with parameterized type String from the iterator() method used on the LinkedList, and store that in a variable with variable type Iterator with parameterized type String (has to match that of the Iterator object created from the collection) Iterator&lt;String&gt; it = animals.iterator(); System.out.println(&quot;Iteration with Iterator object:&quot;); // hasNext() method of Iterator interface returns true if the Iterator object still has another element in front to access, and returns false otherwise while (it.hasNext()) { // next() method provided by Iterator interface, when called on the Iterator object, accesses and returns the next element in the collection // When the next() method is first called, it accesses the first element in the data structure String animal = it.next(); System.out.println(animal); if (animal.equals(&quot;cat&quot;)) { // remove() method of Iterator interface removes the current element, which is the one last returned by the next() method, from the actual collection itself // This will not result in a ConcurrentModificationException, since the element being removed as just been iterated through, and Iterator will continue traversing through the elements after it it.remove(); } } System.out.println(); System.out.println(&quot;LinkedList after calling remove() method on Iterator object: &quot; + animals.toString()); System.out.println(); // Create ListIterator object with parameterized type String with listIterator() method ListIterator&lt;String&gt; lit = animals.listIterator(); System.out.println(&quot;Iteration with ListIterator object:&quot;); System.out.println(&quot;Forwards:&quot;); while (lit.hasNext()) { String animal = lit.next(); System.out.println(animal); if (animal.equals(&quot;fox&quot;)) { // set() method updates element last accessed in the collection lit.set(&quot;lion&quot;); // add() method adds element right before the element that would currently be accessed by the next() method (that element would still be accessed by next() after appending, as the element added will be skipped by next()) lit.add(&quot;cat&quot;); } } System.out.println(); System.out.println(&quot;Backwards:&quot;); // hasPrevious() returns true if ListIterator object still has another element behind to access in the List, and returns false otherwise while (lit.hasPrevious()) { // previous() method accesses and returns the previous element in the List, and will return the last element if called for the first time at the end of the List by the ListIterator object String animal = lit.previous(); System.out.println(animal); } System.out.println(); } } Application.main(null); . Iteration with enhanced for loop: fox cat dog rabbit Iteration with Iterator object: fox cat dog rabbit LinkedList after calling remove() method on Iterator object: [fox, dog, rabbit] Iteration with ListIterator object: Forwards: fox dog rabbit Backwards: rabbit dog cat lion . 59. Implementing Iterable . Notes: . In Java, the Iterable Generic interface, which a part of the Java Collections framework and the java.lang package, is implemented by most of the data structure classes in the Java Collections framework. | The iterator() method provided by the Iterable interface returns an Iterator object (which implements the methods provided by the Iterator interface) which enables iteration operations over the collection classes that implement Iterable. Basically, collection classes that successfully implement the Iterable interface and have an effective iterator() method implementation will have the ability to derive an Iterator object from themselves, as well as be iterated through using an enhanced for loop. | The URL class provides an effective way to represent urls (Uniform Resource Locaters), as well as open connections to resources on the Web from an url, and download those resources to have their content read. The InputStreamReader class, when reading from downloaded content or from files, converts the byte streams from the InputStream of the content to actual character streams. The BufferedReader class provides an efficient and effective way to actually buffer and read the text from a character input stream, and is used in correspondence with InputStreamReader to read text content from resources such as files. The Java InputStream class essentially helps represent an ordered stream of bytes read from resource data, and buffering is basically the operation of temporarily storing resource data in memory (as a buffer, which is a linear sequence of primitive data), before it is sent or received over a network. | . Examples: . import java.util.LinkedList; import java.util.Iterator; import java.net.URL; import java.io.InputStreamReader; import java.io.BufferedReader; // Custom collection class that stores urls // Since UrlLibrary implements the Iterable Generic interface with String parameterized type (the elements iterated through are Strings, but we can convert them during the actual iteration), we can now iterate through it like a data structure after implementing the iterator() method, although the elements iterated through will need to be Strings as defined in the template interface Iterable here class UrlLibrary implements Iterable&lt;String&gt; { // Internal data structure to help store and order urls private LinkedList&lt;String&gt; urls = new LinkedList&lt;String&gt;(); // Create private inner class (which has access the properties of the outer class), which implements the Iterator interface with parameterized type String (initial data type of the elements iterated through), giving it useful iteration operations like next() and hasNext() // This class serves the purpose of providing additional operations in the iteration, such as converting the urls Strings into URL objects, downloading the html pages linked to the urls, and reading the html content in the html pages private class UrlIterator implements Iterator&lt;String&gt; { // Instance variable index to save current position of UrlIterator in the UrlLibrary custom data structure private int index = 0; @Override public boolean hasNext() { // Check whether or not the current index is below the size (total number of elements) of the internal LinkedList return index &lt; urls.size(); } @Override public String next() { // StringBuilder object to have mutable String StringBuilder sb = new StringBuilder(); try { // Get the url at the current index, and save it in an URL object URL url = new URL(urls.get(index)); // Use InputStreamReader to convert the input byte streams provided by the openStream() method of the URL class, then pass that into BufferedReader to buffer the data and convert it to readable text content BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream())); String line = null; while ((line = br.readLine()) != null) { // Read html page line by line, and append each line of the page to the StringBuilder sb.append(line); sb.append(&quot; n&quot;); } // Close input stream (using BufferedReader since that is the outer-most stream reader class) to prevent memory leaks br.close(); } catch (Exception e) { e.printStackTrace(); } // Increment index by 1 index++; // Return the StringBuilder, which contains the content of the current html page return sb.toString(); } @Override public void remove() { urls.remove(index); } } // Constructor that will automatically add urls to the LinkedList public UrlLibrary() { urls.add(&quot;https://www.google.com&quot;); urls.add(&quot;https://www.todoist.com&quot;); } // iterator() method to provide a Iterator object from UrlLibrary // Since the enhanced for loop utilizes Iterator object behind-the-scenes, having an iterator() method allows UrlLibrary to be iterated through using an enhanced for loop // This iterator() method iterates through the urls as Strings, access the html pages linked to those urls, and read the content of those html pages @Override public Iterator&lt;String&gt; iterator() { // UrlIterator implements Iterator interface, which means it can be considered an Iterator object when initialized (as it has variable type Iterator) return new UrlIterator(); } // This iterator() method iterates through the urls as Strings and prints them as Strings /*@Override public Iterator&lt;String&gt; iterator() { // Return the Iterable object of the internal LinkedList, since it already has a defined iterator() method and is used to store the urls anyway // Upon calling the iterator() method of UrlLibrary, we will get an Iterator object that iterates through the elements of the LinkedList, one by one return urls.iterator(); }*/ } public class Application { public static void main(String[] args) { UrlLibrary urlLibrary = new UrlLibrary(); // For-each loop utilizes the Iterator object of the UrlLibrary custom class, which means UrlLibrary needs to implement the Iterable interface and the iterator() method // The enhanced for loop calls the next() method of the Iterator object of UrlLibrary (provided by iterator() method) in each iteration for (String html : urlLibrary) { // Print out html code of the html pages linked to the urls stored in the custom collection class, as well as the number of characters they each have System.out.println(html.length()); System.out.println(html); } } } Application.main(null); . 18300 &lt;!doctype html&gt;&lt;html itemscope=&#34;&#34; itemtype=&#34;http://schema.org/WebPage&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta content=&#34;Search the world&#39;s information, including webpages, images, videos and more. Google has many special features to help you find exactly what you&#39;re looking for.&#34; name=&#34;description&#34;&gt;&lt;meta content=&#34;noodp&#34; name=&#34;robots&#34;&gt;&lt;meta content=&#34;text/html; charset=UTF-8&#34; http-equiv=&#34;Content-Type&#34;&gt;&lt;meta content=&#34;/images/branding/googleg/1x/googleg_standard_color_128dp.png&#34; itemprop=&#34;image&#34;&gt;&lt;title&gt;Google&lt;/title&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){var _g={kEI:&#39;qrjGZPSLB-X7kPIPnbGlyA0&#39;,kEXPI:&#39;0,18168,1341241,6058,207,2414,2390,2316,383,246,5,1129120,1749,13,1196019,620,380090,16114,28684,22430,1362,12312,2822,14765,4998,17075,38444,885,1987,2891,3926,7828,606,29843,30847,15324,781,1244,1,16916,2652,4,1528,2304,29062,13065,11443,2215,2980,1457,22559,6678,7596,1,8710,33444,2,16395,342,23024,5679,1021,31122,4567,6256,23421,1252,5835,19300,5017,2467,445,2,2,1,26632,8155,7381,2,3,15964,874,9625,10008,7,1922,9779,42459,20198,928,5122,14087,14,82,16514,3692,109,2412,5856,3785,15456,5122,1542,1488,6111,5040,4665,1212,592,5209,2525,2738,2885,2711,9764,7265,7423,2600,978,2984,477,1158,7948,891,4654,347,601,545,780,2367,2754,5811,7915,4951,9512,2420,1271,2041,372,1179,775,5208365,175,1066,2,36,8797901,3311,141,795,19735,1,1,346,6639,503,334,3,1,4,22,3,3,11,15,4,47,99,11,94,1,11,1,26,6,6,49,4,50,10,23942527,2773820,1270287,5417,11255,32950,6440,1400550,342430,23416840,3326,275,255,2961,1346,3614,1022,2853,737,2258,1679,882,847,235,835,266,695,1294,103,198,366,1,222,499,2466,433,1271,81,1,942,457,3231,13,243,1491,201,274,2157,326,467,799,31,469,179,120,2645,4,3,2,814,285,2403,803,1034,215,5,261,33,265,321,131,398,6,1773,1,689,76,774,442,36,591,2,150,1681,3,494,667,6,1,66,733,673,256,163,298,71,762,81,617,1,645,305,43,3,830,2,913,2,1865,1243,4,55,523,747,116,435,43,4,418,417,8,337,204,294,110,49,531,401,124,192,390,103,1,42,457,101,41,3,789,20,476,405,1,2,716,567,1,123,686,1,4,93,305,293,3004,279&#39;,kBL:&#39;Pu8j&#39;,kOPI:89978449};(function(){var a;(null==(a=window.google)?0:a.stvsc)?google.kEI=_g.kEI:window.google=_g;}).call(this);})();(function(){google.sn=&#39;webhp&#39;;google.kHL=&#39;en&#39;;})();(function(){ var h=this||self;function l(){return void 0!==window.google&amp;&amp;void 0!==window.google.kOPI&amp;&amp;0!==window.google.kOPI?window.google.kOPI:null};var m,n=[];function p(a){for(var b;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute(&#34;eid&#34;)));)a=a.parentNode;return b||m}function q(a){for(var b=null;a&amp;&amp;(!a.getAttribute||!(b=a.getAttribute(&#34;leid&#34;)));)a=a.parentNode;return b}function r(a){/^http:/i.test(a)&amp;&amp;&#34;https:&#34;===window.location.protocol&amp;&amp;(google.ml&amp;&amp;google.ml(Error(&#34;a&#34;),!1,{src:a,glmm:1}),a=&#34;&#34;);return a} function t(a,b,c,d,k){var e=&#34;&#34;;-1===b.search(&#34;&amp;ei=&#34;)&amp;&amp;(e=&#34;&amp;ei=&#34;+p(d),-1===b.search(&#34;&amp;lei=&#34;)&amp;&amp;(d=q(d))&amp;&amp;(e+=&#34;&amp;lei=&#34;+d));d=&#34;&#34;;var g=-1===b.search(&#34;&amp;cshid=&#34;)&amp;&amp;&#34;slh&#34;!==a,f=[];f.push([&#34;zx&#34;,Date.now().toString()]);h._cshid&amp;&amp;g&amp;&amp;f.push([&#34;cshid&#34;,h._cshid]);c=c();null!=c&amp;&amp;f.push([&#34;opi&#34;,c.toString()]);for(c=0;c&lt;f.length;c++){if(0===c||0&lt;c)d+=&#34;&amp;&#34;;d+=f[c][0]+&#34;=&#34;+f[c][1]}return&#34;/&#34;+(k||&#34;gen_204&#34;)+&#34;?atyp=i&amp;ct=&#34;+String(a)+&#34;&amp;cad=&#34;+(b+e+d)};m=google.kEI;google.getEI=p;google.getLEI=q;google.ml=function(){return null};google.log=function(a,b,c,d,k,e){e=void 0===e?l:e;c||(c=t(a,b,e,d,k));if(c=r(c)){a=new Image;var g=n.length;n[g]=a;a.onerror=a.onload=a.onabort=function(){delete n[g]};a.src=c}};google.logUrl=function(a,b){b=void 0===b?l:b;return t(&#34;&#34;,a,b)};}).call(this);(function(){google.y={};google.sy=[];google.x=function(a,b){if(a)var c=a.id;else{do c=Math.random();while(google.y[c])}google.y[c]=[a,b];return!1};google.sx=function(a){google.sy.push(a)};google.lm=[];google.plm=function(a){google.lm.push.apply(google.lm,a)};google.lq=[];google.load=function(a,b,c){google.lq.push([[a],b,c])};google.loadAll=function(a,b){google.lq.push([a,b])};google.bx=!1;google.lx=function(){};}).call(this);google.f={};(function(){ document.documentElement.addEventListener(&#34;submit&#34;,function(b){var a;if(a=b.target){var c=a.getAttribute(&#34;data-submitfalse&#34;);a=&#34;1&#34;===c||&#34;q&#34;===c&amp;&amp;!a.elements.q.value?!0:!1}else a=!1;a&amp;&amp;(b.preventDefault(),b.stopPropagation())},!0);document.documentElement.addEventListener(&#34;click&#34;,function(b){var a;a:{for(a=b.target;a&amp;&amp;a!==document.documentElement;a=a.parentElement)if(&#34;A&#34;===a.tagName){a=&#34;1&#34;===a.getAttribute(&#34;data-nohref&#34;);break a}a=!1}a&amp;&amp;b.preventDefault()},!0);}).call(this);&lt;/script&gt;&lt;style&gt;#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important} &lt;/style&gt;&lt;style&gt;body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#1967d2}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}body{background:#fff;color:#000}a{color:#681da8;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#1967d2}a:visited{color:#681da8}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#f8f9fa;border:solid 1px;border-color:#dadce0 #70757a #70757a #dadce0;height:30px}.lsbb{display:block}#WqQANb a{display:inline-block;margin:0 12px}.lsb{background:url(/images/nav_logo229.png) 0 -261px repeat-x;color:#000;border:none;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#dadce0}.lst:focus{outline:none}&lt;/style&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){window.google.erd={jsr:1,bv:1838,de:true}; var l=this||self;var m,n=null!=(m=l.mei)?m:1,p,q=null!=(p=l.sdo)?p:!0,r=0,t,u=google.erd,v=u.jsr;google.ml=function(a,b,d,h,e){e=void 0===e?2:e;b&amp;&amp;(t=a&amp;&amp;a.message);if(google.dl)return google.dl(a,e,d),null;if(0&gt;v){window.console&amp;&amp;console.error(a,d);if(-2===v)throw a;b=!1}else b=!a||!a.message||&#34;Error loading script&#34;===a.message||r&gt;=n&amp;&amp;!h?!1:!0;if(!b)return null;r++;d=d||{};b=encodeURIComponent;var c=&#34;/gen_204?atyp=i&amp;ei=&#34;+b(google.kEI);google.kEXPI&amp;&amp;(c+=&#34;&amp;jexpid=&#34;+b(google.kEXPI));c+=&#34;&amp;srcpg=&#34;+b(google.sn)+&#34;&amp;jsr=&#34;+b(u.jsr)+&#34;&amp;bver=&#34;+b(u.bv);var f=a.lineNumber;void 0!==f&amp;&amp;(c+=&#34;&amp;line=&#34;+f);var g= a.fileName;g&amp;&amp;(0&lt;g.indexOf(&#34;-extension:/&#34;)&amp;&amp;(e=3),c+=&#34;&amp;script=&#34;+b(g),f&amp;&amp;g===window.location.href&amp;&amp;(f=document.documentElement.outerHTML.split(&#34; n&#34;)[f],c+=&#34;&amp;cad=&#34;+b(f?f.substring(0,300):&#34;No script found.&#34;)));c+=&#34;&amp;cad=ple_&#34;+google.ple+&#34;.aple_&#34;+google.aple;google.ple&amp;&amp;1===google.ple&amp;&amp;(e=2);c+=&#34;&amp;jsel=&#34;+e;for(var k in d)c+=&#34;&amp;&#34;,c+=b(k),c+=&#34;=&#34;,c+=b(d[k]);c=c+&#34;&amp;emsg=&#34;+b(a.name+&#34;: &#34;+a.message);c=c+&#34;&amp;jsst=&#34;+b(a.stack||&#34;N/A&#34;);12288&lt;=c.length&amp;&amp;(c=c.substr(0,12288));a=c;h||google.log(0,&#34;&#34;,a);return a};window.onerror=function(a,b,d,h,e){if(t!==a){a=e instanceof Error?e:Error(a);void 0===d||&#34;lineNumber&#34;in a||(a.lineNumber=d);void 0===b||&#34;fileName&#34;in a||(a.fileName=b);b=void 0;if(a.stack&amp;&amp;(-1!==a.stack.indexOf(&#34;?xjs=s0&#34;)||-1!==a.stack.indexOf(&#34;&amp;xjs=s0&#34;))){b=document.querySelectorAll(&#34;script[src*= /xjs /_ /js /]&#34;);for(h=d=0;h&lt;b.length;h++)d+=b[h].async?1:0;var c=e=h=-1,f=-1,g=-1;if(performance&amp;&amp;google.xjsu){h=0;e=google.timers.load.t.xjsee?1:0;f=c=0;g=performance.getEntriesByType(&#34;resource&#34;);for(var k= 0;k&lt;g.length;k++)-1!==g[k].name.indexOf(google.xjsu)&amp;&amp;(h=1),-1!==g[k].name.indexOf(&#34;/xjs/_/js/&#34;)&amp;&amp;(c+=1,f+=&#34;script&#34;===g[k].initiatorType?1:0);g=c-f}b={cad:&#34;pl_&#34;+h+&#34;.pe_&#34;+e+&#34;.asc_&#34;+d+&#34;.tsc_&#34;+b.length+&#34;.fasc_&#34;+(b.length-d)+&#34;.lxc_&#34;+c+&#34;.lsx_&#34;+f+&#34;.lnsx_&#34;+g}}google.ml(a,!1,b,!1,&#34;SyntaxError&#34;===a.name||&#34;SyntaxError&#34;===a.message.substring(0,11)||-1!==a.message.indexOf(&#34;Script error&#34;)?3:0)}t=null;q&amp;&amp;r&gt;=n&amp;&amp;(window.onerror=null)};})();&lt;/script&gt;&lt;/head&gt;&lt;body bgcolor=&#34;#fff&#34;&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){var src=&#39;/images/nav_logo229.png&#39;;var iesg=false;document.body.onload = function(){window.n &amp;&amp; window.n();if (document.images){new Image().src=src;} if (!iesg){document.f&amp;&amp;document.f.q.focus();document.gbqf&amp;&amp;document.gbqf.q.focus();} } })();&lt;/script&gt;&lt;div id=&#34;mngb&#34;&gt;&lt;div id=gbar&gt;&lt;nobr&gt;&lt;b class=gb1&gt;Search&lt;/b&gt; &lt;a class=gb1 href=&#34;https://www.google.com/imghp?hl=en&amp;tab=wi&#34;&gt;Images&lt;/a&gt; &lt;a class=gb1 href=&#34;https://maps.google.com/maps?hl=en&amp;tab=wl&#34;&gt;Maps&lt;/a&gt; &lt;a class=gb1 href=&#34;https://play.google.com/?hl=en&amp;tab=w8&#34;&gt;Play&lt;/a&gt; &lt;a class=gb1 href=&#34;https://www.youtube.com/?tab=w1&#34;&gt;YouTube&lt;/a&gt; &lt;a class=gb1 href=&#34;https://news.google.com/?tab=wn&#34;&gt;News&lt;/a&gt; &lt;a class=gb1 href=&#34;https://mail.google.com/mail/?tab=wm&#34;&gt;Gmail&lt;/a&gt; &lt;a class=gb1 href=&#34;https://drive.google.com/?tab=wo&#34;&gt;Drive&lt;/a&gt; &lt;a class=gb1 style=&#34;text-decoration:none&#34; href=&#34;https://www.google.com/intl/en/about/products?tab=wh&#34;&gt;&lt;u&gt;More&lt;/u&gt; &amp;raquo;&lt;/a&gt;&lt;/nobr&gt;&lt;/div&gt;&lt;div id=guser width=100%&gt;&lt;nobr&gt;&lt;span id=gbn class=gbi&gt;&lt;/span&gt;&lt;span id=gbf class=gbf&gt;&lt;/span&gt;&lt;span id=gbe&gt;&lt;/span&gt;&lt;a href=&#34;http://www.google.com/history/optout?hl=en&#34; class=gb4&gt;Web History&lt;/a&gt; | &lt;a href=&#34;/preferences?hl=en&#34; class=gb4&gt;Settings&lt;/a&gt; | &lt;a target=_top id=gb_70 href=&#34;https://accounts.google.com/ServiceLogin?hl=en&amp;passive=true&amp;continue=https://www.google.com/&amp;ec=GAZAAQ&#34; class=gb4&gt;Sign in&lt;/a&gt;&lt;/nobr&gt;&lt;/div&gt;&lt;div class=gbh style=left:0&gt;&lt;/div&gt;&lt;div class=gbh style=right:0&gt;&lt;/div&gt;&lt;/div&gt;&lt;center&gt;&lt;br clear=&#34;all&#34; id=&#34;lgpd&#34;&gt;&lt;div id=&#34;lga&#34;&gt;&lt;img alt=&#34;Google&#34; height=&#34;92&#34; src=&#34;/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png&#34; style=&#34;padding:28px 0 14px&#34; width=&#34;272&#34; id=&#34;hplogo&#34;&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;form action=&#34;/search&#34; name=&#34;f&#34;&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr valign=&#34;top&#34;&gt;&lt;td width=&#34;25%&#34;&gt;&amp;nbsp;&lt;/td&gt;&lt;td align=&#34;center&#34; nowrap=&#34;&#34;&gt;&lt;input name=&#34;ie&#34; value=&#34;ISO-8859-1&#34; type=&#34;hidden&#34;&gt;&lt;input value=&#34;en&#34; name=&#34;hl&#34; type=&#34;hidden&#34;&gt;&lt;input name=&#34;source&#34; type=&#34;hidden&#34; value=&#34;hp&#34;&gt;&lt;input name=&#34;biw&#34; type=&#34;hidden&#34;&gt;&lt;input name=&#34;bih&#34; type=&#34;hidden&#34;&gt;&lt;div class=&#34;ds&#34; style=&#34;height:32px;margin:4px 0&#34;&gt;&lt;input class=&#34;lst&#34; style=&#34;margin:0;padding:5px 8px 0 6px;vertical-align:top;color:#000&#34; autocomplete=&#34;off&#34; value=&#34;&#34; title=&#34;Google Search&#34; maxlength=&#34;2048&#34; name=&#34;q&#34; size=&#34;57&#34;&gt;&lt;/div&gt;&lt;br style=&#34;line-height:0&#34;&gt;&lt;span class=&#34;ds&#34;&gt;&lt;span class=&#34;lsbb&#34;&gt;&lt;input class=&#34;lsb&#34; value=&#34;Google Search&#34; name=&#34;btnG&#34; type=&#34;submit&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;ds&#34;&gt;&lt;span class=&#34;lsbb&#34;&gt;&lt;input class=&#34;lsb&#34; id=&#34;tsuid_1&#34; value=&#34;I&#39;m Feeling Lucky&#34; name=&#34;btnI&#34; type=&#34;submit&#34;&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){var id=&#39;tsuid_1&#39;;document.getElementById(id).onclick = function(){if (this.form.q.value){this.checked = 1;if (this.form.iflsig)this.form.iflsig.disabled = false;} else top.location=&#39;/doodles/&#39;;};})();&lt;/script&gt;&lt;input value=&#34;AD69kcEAAAAAZMbGun3a2zi9ggKeKkNwb9PPi1O8jBF5&#34; name=&#34;iflsig&#34; type=&#34;hidden&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;&lt;td class=&#34;fl sblc&#34; align=&#34;left&#34; nowrap=&#34;&#34; width=&#34;25%&#34;&gt;&lt;a href=&#34;/advanced_search?hl=en&amp;amp;authuser=0&#34;&gt;Advanced search&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;input id=&#34;gbv&#34; name=&#34;gbv&#34; type=&#34;hidden&#34; value=&#34;1&#34;&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){var a,b=&#34;1&#34;;if(document&amp;&amp;document.getElementById)if(&#34;undefined&#34;!=typeof XMLHttpRequest)b=&#34;2&#34;;else if(&#34;undefined&#34;!=typeof ActiveXObject){var c,d,e=[&#34;MSXML2.XMLHTTP.6.0&#34;,&#34;MSXML2.XMLHTTP.3.0&#34;,&#34;MSXML2.XMLHTTP&#34;,&#34;Microsoft.XMLHTTP&#34;];for(c=0;d=e[c++];)try{new ActiveXObject(d),b=&#34;2&#34;}catch(h){}}a=b;if(&#34;2&#34;==a&amp;&amp;-1==location.search.indexOf(&#34;&amp;gbv=2&#34;)){var f=google.gbvu,g=document.getElementById(&#34;gbv&#34;);g&amp;&amp;(g.value=a);f&amp;&amp;window.setTimeout(function(){location.href=f},0)};}).call(this);&lt;/script&gt;&lt;/form&gt;&lt;div id=&#34;gac_scont&#34;&gt;&lt;/div&gt;&lt;div style=&#34;font-size:83%;min-height:3.5em&#34;&gt;&lt;br&gt;&lt;/div&gt;&lt;span id=&#34;footer&#34;&gt;&lt;div style=&#34;font-size:10pt&#34;&gt;&lt;div style=&#34;margin:19px auto;text-align:center&#34; id=&#34;WqQANb&#34;&gt;&lt;a href=&#34;/intl/en/ads/&#34;&gt;Advertising&lt;/a&gt;&lt;a href=&#34;/services/&#34;&gt;Business Solutions&lt;/a&gt;&lt;a href=&#34;/intl/en/about.html&#34;&gt;About Google&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;p style=&#34;font-size:8pt;color:#70757a&#34;&gt;&amp;copy; 2023 - &lt;a href=&#34;/intl/en/policies/privacy/&#34;&gt;Privacy&lt;/a&gt; - &lt;a href=&#34;/intl/en/policies/terms/&#34;&gt;Terms&lt;/a&gt;&lt;/p&gt;&lt;/span&gt;&lt;/center&gt;&lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){window.google.cdo={height:757,width:1440};(function(){var a=window.innerWidth,b=window.innerHeight;if(!a||!b){var c=window.document,d=&#34;CSS1Compat&#34;==c.compatMode?c.documentElement:c.body;a=d.clientWidth;b=d.clientHeight} if(a&amp;&amp;b&amp;&amp;(a!=google.cdo.width||b!=google.cdo.height)){var e=google,f=e.log,g=&#34;/client_204?&amp;atyp=i&amp;biw=&#34;+a+&#34;&amp;bih=&#34;+b+&#34;&amp;ei=&#34;+google.kEI,h=&#34;&#34;,k=[],l=void 0!==window.google&amp;&amp;void 0!==window.google.kOPI&amp;&amp;0!==window.google.kOPI?window.google.kOPI:null;null!=l&amp;&amp;k.push([&#34;opi&#34;,l.toString()]);for(var m=0;m&lt;k.length;m++){if(0===m||0&lt;m)h+=&#34;&amp;&#34;;h+=k[m][0]+&#34;=&#34;+k[m][1]}f.call(e,&#34;&#34;,&#34;&#34;,g+h)};}).call(this);})();&lt;/script&gt; &lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){google.xjs={ck:&#39;xjs.hp.VoMROstAmI0.L.X.O&#39;,cs:&#39;ACT90oHJnt0K__bKai84henb1UUrfsXGBw&#39;,csss:&#39;ACT90oGsIMz43NUaCikBDwWLGkHJTPIwvw&#39;,excm:[],sepcss:false};})();&lt;/script&gt; &lt;script nonce=&#34;R7r_B3hvxMHVXB1veGv-Hw&#34;&gt;(function(){var u=&#39;/xjs/_/js/k x3dxjs.hp.en.PCvupa2KVuo.O/am x3dAAAAAAAAAAQAAAAAAAUAAAAAAAAAAAACAKAjAAAsAMAF/d x3d1/ed x3d1/rs x3dACT90oEKh30Iertgq-CfJQfcAtkFNA_kig/m x3dsb_he,d,cEt90b,SNUn3,qddgKe,sTsDMc,dtl0hd,eHDfl&#39;;var amd=0; var d=this||self,e=function(b){return b};var f;var h=function(b){this.g=b};h.prototype.toString=function(){return this.g+&#34;&#34;};var l={};var n=function(){var b=document;var a=&#34;SCRIPT&#34;;&#34;application/xhtml+xml&#34;===b.contentType&amp;&amp;(a=a.toLowerCase());return b.createElement(a)}; function p(){var b=u,a=function(){};google.lx=google.stvsc?a:function(){q(b);google.lx=a};google.bx||google.lx()} function r(b,a){a=null===a?&#34;null&#34;:void 0===a?&#34;undefined&#34;:a;if(void 0===f){var c=null;var k=d.trustedTypes;if(k&amp;&amp;k.createPolicy){try{c=k.createPolicy(&#34;goog#html&#34;,{createHTML:e,createScript:e,createScriptURL:e})}catch(t){d.console&amp;&amp;d.console.error(t.message)}f=c}else f=c}a=(c=f)?c.createScriptURL(a):a;a=new h(a,l);b.src=a instanceof h&amp;&amp;a.constructor===h?a.g:&#34;type_error:TrustedResourceUrl&#34;;var g,m;(g=(a=null==(m=(g=(b.ownerDocument&amp;&amp;b.ownerDocument.defaultView||window).document).querySelector)?void 0:m.call(g,&#34;script[nonce]&#34;))?a.nonce||a.getAttribute(&#34;nonce&#34;)||&#34;&#34;:&#34;&#34;)&amp;&amp;b.setAttribute(&#34;nonce&#34;,g);google.as?google.as(b):document.body.appendChild(b)}function q(b){google.timers&amp;&amp;google.timers.load&amp;&amp;google.tick&amp;&amp;google.tick(&#34;load&#34;,&#34;xjsls&#34;);var a=n();a.onerror=function(){google.ple=1};a.onload=function(){google.ple=0};r(a,b);google.aple=-1;google.psa=!0};google.xjsu=u;d._F_jsUrl=u;setTimeout(function(){0&lt;amd?google.caft(function(){return p()},amd):p()},0);})();window._ = window._ || {};window._DumpException = _._DumpException = function(e){throw e;};window._s = window._s || {};_s._DumpException = _._DumpException;window._qs = window._qs || {};_qs._DumpException = _._DumpException;(function(){window._F_toggles=[1,268435456,16777216,81920,256,0,973078624,184549384,376832];})();function _F_installCss(c){} (function(){google.jl={blt:&#39;none&#39;,chnk:0,dw:false,dwu:true,emtn:0,end:0,ico:false,ikb:0,ine:false,injs:&#39;none&#39;,injt:0,injth:0,injv2:false,lls:&#39;default&#39;,pdt:0,rep:0,snet:true,strt:0,ubm:false,uwp:true};})();(function(){var pmc=&#39;{ x22d x22:{}, x22sb_he x22:{ x22agen x22:false, x22cgen x22:false, x22client x22: x22heirloom-hp x22, x22dh x22:true, x22ds x22: x22 x22, x22fl x22:true, x22host x22: x22google.com x22, x22jsonp x22:true, x22msgs x22:{ x22cibl x22: x22Clear Search x22, x22dym x22: x22Did you mean: x22, x22lcky x22: x22I u0026#39;m Feeling Lucky x22, x22lml x22: x22Learn more x22, x22psrc x22: x22This search was removed from your u003Ca href x3d x22/history x22 u003EWeb History u003C/a u003E x22, x22psrl x22: x22Remove x22, x22sbit x22: x22Search by image x22, x22srch x22: x22Google Search x22}, x22ovr x22:{}, x22pq x22: x22 x22, x22rfs x22:[], x22sbas x22: x220 3px 8px 0 rgba(0,0,0,0.2),0 0 0 1px rgba(0,0,0,0.08) x22, x22stok x22: x22qiE9t61knqJPM7aTd_AAMKNWBf4 x22}}&#39;;google.pmc=JSON.parse(pmc);})();(function(){ var b=function(a){var c=0;return function(){return c&lt;a.length?{done:!1,value:a[c++]}:{done:!0}}},e=this||self;var g,h;a:{for(var k=[&#34;CLOSURE_FLAGS&#34;],l=e,n=0;n&lt;k.length;n++)if(l=l[k[n]],null==l){h=null;break a}h=l}var p=h&amp;&amp;h[610401301];g=null!=p?p:!1;var q,r=e.navigator;q=r?r.userAgentData||null:null;function t(a){return g?q?q.brands.some(function(c){return(c=c.brand)&amp;&amp;-1!=c.indexOf(a)}):!1:!1}function u(a){var c;a:{if(c=e.navigator)if(c=c.userAgent)break a;c=&#34;&#34;}return-1!=c.indexOf(a)};function v(){return g?!!q&amp;&amp;0&lt;q.brands.length:!1}function w(){return u(&#34;Safari&#34;)&amp;&amp;!(x()||(v()?0:u(&#34;Coast&#34;))||(v()?0:u(&#34;Opera&#34;))||(v()?0:u(&#34;Edge&#34;))||(v()?t(&#34;Microsoft Edge&#34;):u(&#34;Edg/&#34;))||(v()?t(&#34;Opera&#34;):u(&#34;OPR&#34;))||u(&#34;Firefox&#34;)||u(&#34;FxiOS&#34;)||u(&#34;Silk&#34;)||u(&#34;Android&#34;))}function x(){return v()?t(&#34;Chromium&#34;):(u(&#34;Chrome&#34;)||u(&#34;CriOS&#34;))&amp;&amp;!(v()?0:u(&#34;Edge&#34;))||u(&#34;Silk&#34;)}function y(){return u(&#34;Android&#34;)&amp;&amp;!(x()||u(&#34;Firefox&#34;)||u(&#34;FxiOS&#34;)||(v()?0:u(&#34;Opera&#34;))||u(&#34;Silk&#34;))};var z=v()?!1:u(&#34;Trident&#34;)||u(&#34;MSIE&#34;);y();x();w();var A=!z&amp;&amp;!w(),D=function(a){if(/-[a-z]/.test(&#34;ved&#34;))return null;if(A&amp;&amp;a.dataset){if(y()&amp;&amp;!(&#34;ved&#34;in a.dataset))return null;a=a.dataset.ved;return void 0===a?null:a}return a.getAttribute(&#34;data-&#34;+&#34;ved&#34;.replace(/([A-Z])/g,&#34;-$1&#34;).toLowerCase())};var E=[],F=null;function G(a){a=a.target;var c=performance.now(),f=[],H=f.concat,d=E;if(!(d instanceof Array)){var m=&#34;undefined&#34;!=typeof Symbol&amp;&amp;Symbol.iterator&amp;&amp;d[Symbol.iterator];if(m)d=m.call(d);else if(&#34;number&#34;==typeof d.length)d={next:b(d)};else throw Error(&#34;a`&#34;+String(d));for(var B=[];!(m=d.next()).done;)B.push(m.value);d=B}E=H.call(f,d,[c]);if(a&amp;&amp;a instanceof HTMLElement)if(a===F){if(c=4&lt;=E.length)c=5&gt;(E[E.length-1]-E[E.length-4])/1E3;if(c){c=google.getEI(a);a.hasAttribute(&#34;data-ved&#34;)?f=a?D(a)||&#34;&#34;:&#34;&#34;:f=(f= a.closest(&#34;[data-ved]&#34;))?D(f)||&#34;&#34;:&#34;&#34;;f=f||&#34;&#34;;if(a.hasAttribute(&#34;jsname&#34;))a=a.getAttribute(&#34;jsname&#34;);else{var C;a=null==(C=a.closest(&#34;[jsname]&#34;))?void 0:C.getAttribute(&#34;jsname&#34;)}google.log(&#34;rcm&#34;,&#34;&amp;ei=&#34;+c+&#34;&amp;ved=&#34;+f+&#34;&amp;jsname=&#34;+(a||&#34;&#34;))}}else F=a,E=[c]}window.document.addEventListener(&#34;DOMContentLoaded&#34;,function(){document.body.addEventListener(&#34;click&#34;,G)});}).call(this);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 262192 &lt;!DOCTYPE html&gt;&lt;html data-app-version=&#34;2.6.570&#34; lang=&#34;en&#34;&gt;&lt;head&gt;&lt;meta charSet=&#34;utf-8&#34;/&gt;&lt;link rel=&#34;preconnect&#34; href=&#34;https://res.cloudinary.com&#34;/&gt;&lt;link rel=&#34;preconnect&#34; href=&#34;https://stats.g.doubleclick.net&#34;/&gt;&lt;link rel=&#34;preconnect&#34; href=&#34;https://www.google.com&#34;/&gt;&lt;link rel=&#34;preconnect&#34; href=&#34;https://www.google-analytics.com&#34;/&gt;&lt;link rel=&#34;preconnect&#34; href=&#34;https://www.googletagmanager.com&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;style&#34; href=&#34;/_next/static/css/04156aa149b83e74.css&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;style&#34; href=&#34;/_next/static/css/ba4549b67c5f2e8a.css&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/webpack-6d9cb6d60f2d9e7b.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/main-3d611127175e5c83.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/framework-28b19a993185cf71.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/pages/_app-c8e0d75706c052d7.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/2183-8f627820024a2001.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/6546-e18722f1b7b2d5f6.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/9490-6474a9ee115a819a.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/6560-12ebe5e866750fd0.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/5557-8783331a5eb7a8c4.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/2820-12c4b856e1c44b34.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/chunks/pages/index-1099d22821305ba5.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/tjRfPRPy4aH1G4B1hKB1F/_buildManifest.js&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;script&#34; href=&#34;/_next/static/tjRfPRPy4aH1G4B1hKB1F/_ssgManifest.js&#34;/&gt;&lt;link rel=&#34;preload&#34; href=&#34;/_next/static/css/04156aa149b83e74.css&#34; as=&#34;style&#34;/&gt;&lt;link rel=&#34;preload&#34; href=&#34;/_next/static/css/ba4549b67c5f2e8a.css&#34; as=&#34;style&#34;/&gt;&lt;meta name=&#34;facebook-domain-verification&#34; content=&#34;kjydpihjo04qwyfre6ptrzy97bdqqs&#34;/&gt;&lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34;/&gt;&lt;meta name=&#34;twitter:card&#34; content=&#34;summary_large_image&#34;/&gt;&lt;meta name=&#34;twitter:site&#34; content=&#34;@todoist&#34;/&gt;&lt;meta name=&#34;twitter:creator&#34; content=&#34;@todoist&#34;/&gt;&lt;meta property=&#34;og:type&#34; content=&#34;website&#34;/&gt;&lt;meta property=&#34;og:locale&#34; content=&#34;en&#34;/&gt;&lt;meta property=&#34;og:site_name&#34; content=&#34;Todoist&#34;/&gt;&lt;title&gt;Todoist | A To-Do List to Organize Your Work &amp;amp; Life&lt;/title&gt;&lt;meta name=&#34;robots&#34; content=&#34;index,follow&#34;/&gt;&lt;meta name=&#34;description&#34; content=&#34;Trusted by 30 million people and teams. Todoist is the world&amp;#x27;s favorite task manager and to-do list app. Finally become focused, organized and calm.&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;en&#34; href=&#34;https://todoist.com&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;ru&#34; href=&#34;https://todoist.com/ru&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;fr&#34; href=&#34;https://todoist.com/fr&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;nl&#34; href=&#34;https://todoist.com/nl&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;pt-BR&#34; href=&#34;https://todoist.com/pt-BR&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;zh-CN&#34; href=&#34;https://todoist.com/zh-CN&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;ko&#34; href=&#34;https://todoist.com/ko&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;nb&#34; href=&#34;https://todoist.com/nb&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;de&#34; href=&#34;https://todoist.com/de&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;sv&#34; href=&#34;https://todoist.com/sv&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;tr&#34; href=&#34;https://todoist.com/tr&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;it&#34; href=&#34;https://todoist.com/it&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;da&#34; href=&#34;https://todoist.com/da&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;pl&#34; href=&#34;https://todoist.com/pl&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;fi&#34; href=&#34;https://todoist.com/fi&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;zh-TW&#34; href=&#34;https://todoist.com/zh-TW&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;ja&#34; href=&#34;https://todoist.com/ja&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;es&#34; href=&#34;https://todoist.com/es&#34;/&gt;&lt;link rel=&#34;alternate&#34; hrefLang=&#34;cs&#34; href=&#34;https://todoist.com/cs&#34;/&gt;&lt;meta property=&#34;og:title&#34; content=&#34;Todoist | A To-Do List to Organize Your Work &amp;amp; Life&#34;/&gt;&lt;meta property=&#34;og:description&#34; content=&#34;Trusted by 30 million people and teams. Todoist is the world&amp;#x27;s favorite task manager and to-do list app. Finally become focused, organized and calm.&#34;/&gt;&lt;meta property=&#34;og:url&#34; content=&#34;https://todoist.com&#34;/&gt;&lt;meta property=&#34;og:image&#34; content=&#34;https://todoist.com/static/ogimages/en/og-image-home.png&#34;/&gt;&lt;meta property=&#34;og:image:alt&#34; content=&#34;Organize work &amp;amp; life&#34;/&gt;&lt;meta property=&#34;og:image:width&#34; content=&#34;1200&#34;/&gt;&lt;meta property=&#34;og:image:height&#34; content=&#34;628&#34;/&gt;&lt;link rel=&#34;canonical&#34; href=&#34;https://todoist.com&#34;/&gt;&lt;meta name=&#34;next-head-count&#34; content=&#34;48&#34;/&gt;&lt;link rel=&#34;icon&#34; type=&#34;image/x-icon&#34; href=&#34;/static/favicon.ico&#34;/&gt;&lt;link rel=&#34;icon&#34; type=&#34;image/png&#34; sizes=&#34;32x32&#34; href=&#34;/static/favicon-32x32.png&#34;/&gt;&lt;link rel=&#34;icon&#34; type=&#34;image/png&#34; sizes=&#34;16x16&#34; href=&#34;/static/favicon-16x16.png&#34;/&gt;&lt;link rel=&#34;mask-icon&#34; color=&#34;#e44332&#34; href=&#34;/static/safari-pinned-tab.svg&#34;/&gt;&lt;link rel=&#34;manifest&#34; href=&#34;/static/site.webmanifest&#34;/&gt;&lt;style type=&#34;text/css&#34;&gt;html body { background-color: var(--composition-background-primary); } &lt;/style&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 1200px) 100vw, 1200px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 300px) 100vw, 300px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 382px) 100vw, 382px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 300px) 100vw, 300px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 300px) 100vw, 300px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 300px) 100vw, 300px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;link rel=&#34;preload&#34; as=&#34;image&#34; imageSrcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; imageSizes=&#34;(max-width: 300px) 100vw, 300px&#34; fetchPriority=&#34;high&#34;/&gt;&lt;script&gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({&#39;gtm.start&#39;: new Date().getTime(),event:&#39;gtm.js&#39;});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!=&#39;dataLayer&#39;?&#39;&amp;l=&#39;+l:&#39;&#39;;j.async=true;j.src= &#39;https://www.googletagmanager.com/gtm.js?id=&#39;+i+dl+&#39;&amp;gtm_auth=1nvG3iE405yFhG8LM5F0nQ&amp;gtm_preview=env-2&amp;gtm_cookies_win=x&#39;;f.parentNode.insertBefore(j,f); })(window,document,&#39;script&#39;,&#39;dataLayer&#39;,&#39;GTM-MF4CZSB&#39;);&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/_next/static/css/04156aa149b83e74.css&#34; data-n-g=&#34;&#34;/&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/_next/static/css/ba4549b67c5f2e8a.css&#34; data-n-p=&#34;&#34;/&gt;&lt;noscript data-n-css=&#34;&#34;&gt;&lt;/noscript&gt;&lt;script defer=&#34;&#34; nomodule=&#34;&#34; src=&#34;/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/webpack-6d9cb6d60f2d9e7b.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/main-3d611127175e5c83.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/framework-28b19a993185cf71.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/pages/_app-c8e0d75706c052d7.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/2183-8f627820024a2001.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/6546-e18722f1b7b2d5f6.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/9490-6474a9ee115a819a.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/6560-12ebe5e866750fd0.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/5557-8783331a5eb7a8c4.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/2820-12c4b856e1c44b34.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/chunks/pages/index-1099d22821305ba5.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/tjRfPRPy4aH1G4B1hKB1F/_buildManifest.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;script src=&#34;/_next/static/tjRfPRPy4aH1G4B1hKB1F/_ssgManifest.js&#34; defer=&#34;&#34;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body class=&#34;todoistTheme&#34;&gt;&lt;noscript&gt;&lt;iframe src=&#34;https://www.googletagmanager.com/ns.html?id=GTM-MF4CZSB&amp;gtm_auth=1nvG3iE405yFhG8LM5F0nQ&amp;gtm_preview=env-2&amp;gtm_cookies_win=x&#34; height=&#34;0&#34; width=&#34;0&#34; style=&#34;display:none;visibility:hidden&#34;&gt;&lt;/iframe&gt;&lt;/noscript&gt;&lt;div id=&#34;__next&#34;&gt;&lt;div class=&#34;app_appContainer__ry8xc&#34;&gt;&lt;div class=&#34;eFIWyCm6fiCLErdXino2&#34;&gt;&lt;div class=&#34;TM_8G24saTdTZjydiHsw&#34;&gt;&lt;nav class=&#34;K9o8dlbROHYPd6t_tjkq YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg&#34;&gt;&lt;div class=&#34;kzeioPKvGqaMOvAGcer5&#34;&gt;&lt;a href=&#34;/home&#34; aria-label=&#34;Home&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;JDguX5oZL3ITNTthPuWx&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 128 32&#34; fill=&#34;none&#34; preserveAspectRatio=&#34;xMinYMid slice&#34; height=&#34;32&#34;&gt;&lt;rect width=&#34;32&#34; height=&#34;32&#34; fill=&#34;#DE483A&#34; rx=&#34;5.12&#34;&gt;&lt;/rect&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m6.764 14.993 6.374-3.668.008-.005 6.568-3.78c.277-.16.29-.65-.02-.828l-.217-.124c-.317-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.09-10.501 6.038-10.847 6.235a1.349 1.349 0 0 1-1.339 0L-.072 9.144v2.699l.056.032c1.364.795 4.592 2.675 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m6.764 20.385 6.366-3.664.024-.014 6.56-3.775c.277-.16.29-.651-.02-.828l-.217-.124c-.316-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.089-10.501 6.038-10.847 6.234a1.349 1.349 0 0 1-1.339 0c-.326-.188-5.464-3.174-5.464-3.174v2.698l.056.033c1.365.795 4.592 2.674 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m13.139 22.108-6.375 3.669c-.461.266-.92.272-1.398.002-.79-.446-4.017-2.325-5.382-3.12l-.056-.033v-2.698l5.464 3.174c.413.239.925.236 1.339 0 .346-.196 10.692-6.145 10.847-6.235a1.02 1.02 0 0 1 .997-.012 125.007 125.007 0 0 0 1.12.64c.31.178.296.669.019.829l-6.575 3.784Z&#34;&gt;&lt;/path&gt;&lt;g&gt;&lt;path fill=&#34;#DE483A&#34; d=&#34;M55.65 18.73c0 .515.089 1.015.264 1.492.176.481.432.904.774 1.273.342.37.751.664 1.23.884.48.221 1.025.331 1.632.331.608 0 1.152-.11 1.631-.33a3.768 3.768 0 0 0 2.005-2.158c.173-.477.26-.977.26-1.492s-.087-1.015-.26-1.494a3.779 3.779 0 0 0-.774-1.271 3.863 3.863 0 0 0-1.23-.885 3.865 3.865 0 0 0-1.632-.333c-.607 0-1.152.113-1.631.333-.48.221-.889.516-1.23.885a3.74 3.74 0 0 0-.775 1.27c-.175.48-.263.98-.263 1.495Zm-3.316 0c0-1.05.19-2.005.567-2.862a6.665 6.665 0 0 1 1.535-2.198 6.78 6.78 0 0 1 2.293-1.411 8 8 0 0 1 2.821-.497c.995 0 1.935.166 2.82.497a6.81 6.81 0 0 1 2.294 1.41 6.689 6.689 0 0 1 1.535 2.199c.378.857.567 1.811.567 2.862 0 1.05-.19 2.005-.567 2.862a6.688 6.688 0 0 1-1.535 2.198A6.766 6.766 0 0 1 62.37 25.2a7.934 7.934 0 0 1-2.819.497 7.946 7.946 0 0 1-2.821-.497 6.735 6.735 0 0 1-2.293-1.409 6.664 6.664 0 0 1-1.535-2.198c-.378-.857-.567-1.811-.567-2.862ZM71.63 18.734c0 .515.087 1.015.263 1.492.175.481.431.904.773 1.273.342.37.752.664 1.231.884.48.22 1.024.331 1.631.331.608 0 1.152-.11 1.632-.33a3.762 3.762 0 0 0 2.005-2.158 4.35 4.35 0 0 0 .26-1.492c0-.515-.087-1.015-.26-1.494a3.772 3.772 0 0 0-2.005-2.156 3.864 3.864 0 0 0-1.632-.333c-.607 0-1.152.113-1.63.333a3.86 3.86 0 0 0-1.232.885c-.341.369-.598.792-.773 1.27-.176.48-.264.98-.264 1.495Zm7.852 4.644h-.057c-.479.812-1.122 1.402-1.934 1.77a6.292 6.292 0 0 1-2.626.552c-1.033 0-1.949-.178-2.752-.538a6.162 6.162 0 0 1-2.059-1.48 6.311 6.311 0 0 1-1.3-2.212 8.26 8.26 0 0 1-.441-2.736 7.8 7.8 0 0 1 .47-2.738 6.813 6.813 0 0 1 1.312-2.212 6.076 6.076 0 0 1 2.031-1.478c.794-.36 1.66-.54 2.6-.54.627 0 1.18.065 1.66.193.479.13.902.295 1.27.5a4.807 4.807 0 0 1 1.575 1.325h.084V6.473c0-.331.263-.722.724-.722h1.873c.434 0 .722.364.722.722v18.173c0 .462-.391.723-.722.723h-1.705a.732.732 0 0 1-.725-.721v-1.27ZM88.157 18.73c0 .515.088 1.015.264 1.492.175.481.432.904.774 1.273a3.85 3.85 0 0 0 1.23.884c.48.221 1.024.331 1.632.331.607 0 1.152-.11 1.631-.33a3.763 3.763 0 0 0 2.005-2.158c.173-.477.26-.977.26-1.492s-.087-1.015-.26-1.494a3.774 3.774 0 0 0-2.005-2.156 3.866 3.866 0 0 0-1.631-.333c-.608 0-1.153.113-1.632.333-.479.221-.888.516-1.23.885-.342.369-.599.792-.774 1.27-.176.48-.264.98-.264 1.495Zm-3.316 0c0-1.05.189-2.005.567-2.862a6.663 6.663 0 0 1 1.534-2.198 6.78 6.78 0 0 1 2.293-1.411 8 8 0 0 1 2.822-.497c.994 0 1.935.166 2.819.497a6.81 6.81 0 0 1 2.295 1.41 6.689 6.689 0 0 1 1.534 2.199c.378.857.568 1.811.568 2.862 0 1.05-.19 2.005-.567 2.862a6.688 6.688 0 0 1-1.535 2.198 6.766 6.766 0 0 1-2.295 1.409 7.934 7.934 0 0 1-2.82.497 7.946 7.946 0 0 1-2.82-.497 6.736 6.736 0 0 1-2.294-1.409 6.662 6.662 0 0 1-1.534-2.198c-.378-.857-.567-1.811-.567-2.862ZM100.945 7.588c0-.535.198-.999.594-1.398.398-.395.9-.594 1.507-.594.608 0 1.121.19 1.535.568.414.378.623.852.623 1.424a1.85 1.85 0 0 1-.623 1.424c-.414.378-.927.567-1.535.567-.607 0-1.109-.198-1.507-.596-.396-.396-.594-.86-.594-1.395ZM114.64 15.77c-.331 0-.575-.25-.616-.359-.276-.723-1.155-.994-1.865-.994-1.119 0-1.997.519-1.997 1.41 0 .863.85 1.04 1.375 1.199.576.174 1.677.414 2.284.557a7.419 7.419 0 0 1 1.728.636c1.761.915 2.012 2.354 2.012 3.22 0 3.197-3.167 4.257-5.366 4.257-1.695 0-4.879-.257-5.578-3.488-.068-.315.21-.798.721-.798h1.832c.36 0 .603.263.674.47.235.649.983 1.14 2.245 1.14 1.353 0 2.153-.537 2.153-1.251 0-.462-.261-.872-.603-1.104-1.026-.696-3.564-.774-4.942-1.508-.528-.28-1.852-.922-1.852-3.109 0-3.015 2.741-4.286 5.149-4.286 3.551 0 4.854 2.243 5.001 3.075.081.459-.176.934-.692.934h-1.663ZM117.833 14.129v-1.373c0-.327.258-.721.717-.721h1.769v-3.37c0-.36.244-.58.429-.66l1.89-.825c.552-.227.999.228.999.666v4.189h2.928c.453 0 .722.395.722.721v1.375a.745.745 0 0 1-.721.723h-2.929v5.808c0 .663-.018 1.182.235 1.565.233.351.574.482 1.257.482.196 0 .371-.033.519-.083a.706.706 0 0 1 .868.317c.216.418.463.877.636 1.206.191.361.037.825-.311.993-.561.273-1.339.494-2.406.494-.884 0-1.385-.096-1.945-.29a3.347 3.347 0 0 1-1.417-1c-.324-.396-.484-.926-.604-1.516-.122-.59-.15-1.304-.15-2.08v-5.896h-1.765c-.463 0-.721-.4-.721-.725ZM41.928 14.129v-1.373c0-.327.259-.721.717-.721h2.021v-3.37c0-.36.245-.58.43-.66l1.89-.825c.552-.227.999.228.999.666v4.189h2.928c.452 0 .722.395.722.721v1.375a.745.745 0 0 1-.722.723h-2.928v5.808c0 .663-.018 1.182.235 1.565.232.351.573.482 1.257.482.196 0 .37-.033.519-.083a.706.706 0 0 1 .867.317c.217.418.464.877.637 1.206.19.361.037.825-.311.993-.562.273-1.34.494-2.406.494-.884 0-1.385-.096-1.945-.29a3.351 3.351 0 0 1-1.418-1c-.324-.396-.484-.926-.603-1.516-.122-.59-.15-1.304-.15-2.08v-5.896H42.65c-.463 0-.722-.4-.722-.725ZM102.115 25.37h1.876a.723.723 0 0 0 .721-.723v-11.89a.723.723 0 0 0-.721-.722h-1.876a.724.724 0 0 0-.721.722v11.89c0 .398.325.722.721.722Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;nXWXUhDvwGosQscGvXZK&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 32 32&#34; fill=&#34;none&#34; preserveAspectRatio=&#34;xMinYMid slice&#34; height=&#34;32&#34;&gt;&lt;rect width=&#34;32&#34; height=&#34;32&#34; fill=&#34;#DE483A&#34; rx=&#34;5.12&#34;&gt;&lt;/rect&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m6.764 14.993 6.374-3.668.008-.005 6.568-3.78c.277-.16.29-.65-.02-.828l-.217-.124c-.317-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.09-10.501 6.038-10.847 6.235a1.349 1.349 0 0 1-1.339 0L-.072 9.144v2.699l.056.032c1.364.795 4.592 2.675 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m6.764 20.385 6.366-3.664.024-.014 6.56-3.775c.277-.16.29-.651-.02-.828l-.217-.124c-.316-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.089-10.501 6.038-10.847 6.234a1.349 1.349 0 0 1-1.339 0c-.326-.188-5.464-3.174-5.464-3.174v2.698l.056.033c1.365.795 4.592 2.674 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;#ffffff&#34; d=&#34;m13.139 22.108-6.375 3.669c-.461.266-.92.272-1.398.002-.79-.446-4.017-2.325-5.382-3.12l-.056-.033v-2.698l5.464 3.174c.413.239.925.236 1.339 0 .346-.196 10.692-6.145 10.847-6.235a1.02 1.02 0 0 1 .997-.012 125.007 125.007 0 0 0 1.12.64c.31.178.296.669.019.829l-6.575 3.784Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg MJs4L8DXIaooiolDMk5u&#34;&gt;&lt;div class=&#34;kzeioPKvGqaMOvAGcer5 aTydDnOz8V7GM3K1hHKm&#34;&gt;&lt;ul class=&#34;hGJuHEzyrDQU5nwls2PW&#34; style=&#34;--navbar-item-group-gap:2px&#34;&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; href=&#34;/features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; href=&#34;/templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; href=&#34;/business&#34;&gt;For Teams&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34;&gt;Resources&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;KUavYw3DTPbmG8UQ_MTu&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M3.47 6.47a.75.75 0 0 1 1.06 0L8 9.94l3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;ul class=&#34;cu311o1N1DEy2t600hnn pc32qCAyxR0Y4BHbU7Tm&#34; id=&#34;:R26alm:&#34;&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; aria-label=&#34;Integrations&#34; href=&#34;/integrations&#34;&gt;&lt;div class=&#34;Header_dropdown__Phs2Y&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Integrations&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ Header_description__0rqTw&#34;&gt;Connect Todoist with tools like IFTTT, Alexa, Google Calendar, and more...&lt;/p&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; aria-label=&#34;Getting Started Guide&#34; href=&#34;/getting-started&#34;&gt;&lt;div class=&#34;Header_dropdown__Phs2Y&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Getting Started Guide&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ Header_description__0rqTw&#34;&gt;Everything you need to know to get your Todoist up and running in minutes.&lt;/p&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; aria-label=&#34;Help Center&#34; href=&#34;/help&#34;&gt;&lt;div class=&#34;Header_dropdown__Phs2Y&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Help Center&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ Header_description__0rqTw&#34;&gt;Find answers to your questions and tips for getting the most out of your Todoist.&lt;/p&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; aria-label=&#34;Productivity Methods + Quiz&#34; href=&#34;/productivity-methods&#34;&gt;&lt;div class=&#34;Header_dropdown__Phs2Y&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Productivity Methods + Quiz&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ Header_description__0rqTw&#34;&gt;Learn the most popular productivity methods and discover which one fits you best.&lt;/p&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; aria-label=&#34;Inspiration Hub&#34; href=&#34;/inspiration&#34;&gt;&lt;div class=&#34;Header_dropdown__Phs2Y&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Inspiration Hub&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ Header_description__0rqTw&#34;&gt;Productivity advice you won‘t find anywhere else, plus Todoist tips and product news.&lt;/p&gt;&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; href=&#34;/pricing&#34;&gt;Pricing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;lKbkMAAbpfoobELp5Owc nmOK3Zge7f9va_eq5Y7X lyeiL0ZsQ_9GfoM0jZIe&#34; aria-hidden=&#34;true&#34; style=&#34;--divider-spacing-start:var(--space-8);--divider-spacing-end:var(--space-8)&#34;&gt;&lt;/div&gt;&lt;ul class=&#34;hGJuHEzyrDQU5nwls2PW&#34; style=&#34;--navbar-item-group-gap:var(--space-8)&#34;&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR&#34; href=&#34;/auth/login&#34;&gt;Log in&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA&#34; href=&#34;/auth/signup&#34;&gt;Start for free&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg Frz0pvOJ0fp95qyyJfFZ&#34;&gt;&lt;div class=&#34;kzeioPKvGqaMOvAGcer5 aTydDnOz8V7GM3K1hHKm&#34;&gt;&lt;ul class=&#34;hGJuHEzyrDQU5nwls2PW&#34; style=&#34;--navbar-item-group-gap:0px&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR mM3grCr5NP0yUQ2zKXcN&#34; aria-label=&#34;Open menu&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;fcno40qhmCgDkMq5y3Tk&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M0 2a.75.75 0 0 1 .75-.75h14.5a.75.75 0 0 1 0 1.5H.75A.75.75 0 0 1 0 2zm0 6a.75.75 0 0 1 .75-.75h14.5a.75.75 0 0 1 0 1.5H.75A.75.75 0 0 1 0 8zm0 6a.75.75 0 0 1 .75-.75h14.5a.75.75 0 0 1 0 1.5H.75A.75.75 0 0 1 0 14z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/nav&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg Frz0pvOJ0fp95qyyJfFZ&#34;&gt;&lt;div class=&#34;eiilutWvkoeGovmbOyBG&#34;&gt;&lt;div class=&#34;zLN4MjAlr_MJSGYV83zK YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;ul class=&#34;hGJuHEzyrDQU5nwls2PW A2h4TIoqnN5dUU05n5IQ&#34; style=&#34;--navbar-item-group-gap:var(--space-12)&#34;&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/business&#34;&gt;For Teams&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;:Rhilm:&#34;&gt;Resources&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;KUavYw3DTPbmG8UQ_MTu&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M3.47 6.47a.75.75 0 0 1 1.06 0L8 9.94l3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;div class=&#34;eiilutWvkoeGovmbOyBG&#34;&gt;&lt;ul class=&#34;cu311o1N1DEy2t600hnn LpuBSdUHNU9jtEbheaGI pc32qCAyxR0Y4BHbU7Tm&#34; id=&#34;:Rhilm:&#34;&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4 aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4 aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/getting-started&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4 aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/help&#34;&gt;Help Center&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4 aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/productivity-methods&#34;&gt;Productivity Methods + Quiz&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4 aTZUeuKDvs6QjCbSvcSd&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/inspiration&#34;&gt;Inspiration Hub&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&#34;nOFNc0QpGW0HpMqVOfJb qOAlcueACI_2xpP_B0d4&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/pricing&#34;&gt;Pricing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95 lyeiL0ZsQ_9GfoM0jZIe ImzyPQPbmsYQCO4nUCJN&#34; aria-hidden=&#34;true&#34; style=&#34;--divider-spacing-start:var(--space-16);--divider-spacing-end:var(--space-16)&#34;&gt;&lt;/div&gt;&lt;div style=&#34;display:flex;gap:var(--space-12)&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV pJ5lpFCDv2hmsZmokGiV o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/auth/login&#34; style=&#34;flex:1&#34;&gt;Log in&lt;/a&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/auth/signup&#34; style=&#34;flex:1&#34;&gt;Start for free&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;qQ5ru3t_6f4tH2ad0USb&#34;&gt;&lt;/div&gt;&lt;main&gt;&lt;div class=&#34;intro-section_headersContainer__WEvLY YttEe7kIjjIAtcbhghld c8EWRT5sy9CxCZyUQe6w&#34;&gt;&lt;h1 class=&#34;Z2j5FoeQ_umI7vX0SmxF f8hhoqjLEteSfgx6bdr2 mWJbs2TuAw9nS7uYCe19&#34;&gt;Organize your work and life, finally.&lt;/h1&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq intro-section_subheading__Gr819&#34;&gt;Become focused, organized, and calm with Todoist. The world’s #1 task manager and to-do list app.&lt;/p&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg SVhGiSzS0M7007sJ4mKJ&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA o9DYmt4xfLaImiVzI9dQ ga-get-started-button&#34; href=&#34;/auth/signup&#34;&gt;Start for free&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg OuHDHN6jISIW7I2iDwgs&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA o9DYmt4xfLaImiVzI9dQ&#34;&gt;&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;intro-section_assetsWrapper__PJIND mbe-64&#34;&gt;&lt;div class=&#34;YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;div class=&#34;intro-section_videoWrapper__Gt6hX&#34;&gt;&lt;video width=&#34;1500&#34; height=&#34;690&#34; autoplay=&#34;&#34; muted=&#34;&#34; playsinline=&#34;&#34; poster=&#34;https://res.cloudinary.com/imagist/video/fetch/f_png/q_auto/so_0/https://todoist.com/static/home-teams/intro/background-video.mp4?_a=ATCqVcY0&#34;&gt;&lt;source type=&#34;video/mp4&#34; src=&#34;https://res.cloudinary.com/imagist/video/fetch/f_auto/q_auto/https://todoist.com/static/home-teams/intro/background-video.mp4?_a=ATCqVcY0&#34;/&gt;&lt;/video&gt;&lt;/div&gt;&lt;div class=&#34;intro-section_desktopImages__l4Tog&#34;&gt;&lt;div class=&#34;intro-section_backgroundImage__qvRty&#34;&gt;&lt;img alt=&#34;&#34; fetchPriority=&#34;high&#34; width=&#34;1200&#34; height=&#34;700&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 1200px) 100vw, 1200px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/background.en.jpg?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;intro-section_foregroundImage__NLjQE&#34;&gt;&lt;img alt=&#34;&#34; fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;622&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/desktop/foreground.en.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;intro-section_mobileImage__dFp5r&#34;&gt;&lt;img alt=&#34;&#34; fetchPriority=&#34;high&#34; width=&#34;382&#34; height=&#34;792&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 382px) 100vw, 382px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/intro/mobile/foreground.en.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;customer-logos-section_customerLogosContainer__bg6LV mbe-128 xlg-mbe-192 overflow-x-hidden&#34;&gt;&lt;div class=&#34;YttEe7kIjjIAtcbhghld c8EWRT5sy9CxCZyUQe6w&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo&#34;&gt;30 million+ people and teams trust their sanity and productivity to Todoist&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;T7fSsnqsFwF8kNovgGvA PcMVQoHJZAUURb05xqUG&#34; style=&#34;--block-size:56px&#34;&gt;&lt;div class=&#34;nK2Kzw2ivi6sU2ZQQJDE&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 151 57&#34; aria-label=&#34;Microsoft&#34;&gt;&lt;path d=&#34;m53.302 30.452-.893 2.53h-.075a17.98 17.98 0 0 0-.868-2.48L46.678 18.47H41.99v19.175h3.1V25.813c0-.744 0-1.588-.024-2.63-.025-.52-.074-.918-.1-1.215h.075a11.6 11.6 0 0 0 .447 1.637l5.755 13.99h2.183l5.705-14.114c.124-.322.248-.967.372-1.513h.075a178.288 178.288 0 0 0-.15 3.448V37.57h3.3V18.42h-4.515l-4.911 12.03Zm12.552-6.624h3.225v13.743h-3.225V23.828Zm1.637-5.804c-.546 0-.992.198-1.364.545a1.76 1.76 0 0 0-.57 1.34c0 .52.197.967.57 1.315.372.347.818.52 1.364.52.546 0 1.017-.198 1.364-.52.372-.348.57-.794.57-1.315 0-.521-.198-.967-.57-1.34-.322-.347-.794-.545-1.364-.545Zm13.023 5.68a8.998 8.998 0 0 0-1.81-.198c-1.464 0-2.804.322-3.92.967s-2.01 1.538-2.58 2.655c-.595 1.14-.893 2.455-.893 3.968 0 1.315.298 2.481.868 3.548.57 1.042 1.365 1.885 2.431 2.456 1.017.57 2.208.868 3.548.868 1.538 0 2.852-.323 3.894-.918l.025-.025v-2.977l-.124.1a5.544 5.544 0 0 1-1.563.818c-.57.199-1.091.298-1.538.298-1.29 0-2.307-.372-3.026-1.19-.744-.794-1.116-1.886-1.116-3.25 0-1.414.372-2.53 1.14-3.35.77-.818 1.787-1.24 3.027-1.24 1.042 0 2.109.348 3.076 1.042l.124.1v-3.15l-.025-.026c-.422-.173-.893-.372-1.538-.496Zm10.642-.099c-.794 0-1.538.248-2.183.77-.546.446-.918 1.09-1.24 1.86h-.025v-2.407h-3.225v13.743h3.225v-7.02c0-1.19.248-2.183.794-2.902.546-.745 1.24-1.117 2.084-1.117.297 0 .595.075.967.124.347.1.595.199.769.323l.124.099v-3.225l-.074-.025c-.224-.148-.67-.223-1.216-.223Zm8.781-.074c-2.257 0-4.068.67-5.333 1.984-1.29 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.24 1.24 2.927 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.166-1.265-2.877-1.885-5.01-1.885Zm2.58 10.567c-.595.77-1.538 1.141-2.704 1.141-1.166 0-2.108-.372-2.778-1.19-.67-.77-.992-1.886-.992-3.3 0-1.463.347-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.141 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c-.05 1.488-.323 2.654-.943 3.423Zm11.436-4.564c-1.017-.422-1.662-.744-1.96-1.017-.248-.248-.372-.596-.372-1.042 0-.372.149-.744.521-.992s.794-.373 1.414-.373c.546 0 1.116.1 1.662.249.546.148 1.042.372 1.439.67l.124.099V24.1l-.075-.025a8.95 8.95 0 0 0-1.463-.421 9.943 9.943 0 0 0-1.588-.15c-1.538 0-2.803.373-3.795 1.192-.992.768-1.464 1.81-1.464 3.026 0 .645.1 1.215.323 1.687.223.471.546.918.992 1.29.447.347 1.092.744 1.985 1.116.744.322 1.314.57 1.662.769.347.198.57.422.744.595.124.199.198.447.198.77 0 .917-.694 1.364-2.108 1.364-.546 0-1.117-.1-1.786-.323a6.898 6.898 0 0 1-1.811-.918l-.124-.099v3.15l.074.025c.472.224 1.042.372 1.737.546.694.124 1.314.223 1.86.223 1.662 0 3.026-.372 3.994-1.19.992-.794 1.513-1.811 1.513-3.126 0-.918-.248-1.736-.794-2.357a10.048 10.048 0 0 0-2.902-1.711Zm12.205-6.003c-2.258 0-4.069.67-5.334 1.984-1.265 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.241 1.24 2.928 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.165-1.265-2.877-1.885-5.01-1.885Zm2.555 10.567c-.596.77-1.538 1.141-2.704 1.141-1.191 0-2.109-.372-2.779-1.19-.669-.77-.992-1.886-.992-3.3 0-1.463.348-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.116 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c0 1.488-.322 2.654-.942 3.423Zm21.507-7.615v-2.655h-3.25V19.76l-.099.025-3.076.918-.075.025v3.1h-4.862v-1.736c0-.794.199-1.414.546-1.811.347-.397.868-.595 1.513-.595.447 0 .918.099 1.439.322l.124.075V17.28l-.074-.025c-.447-.15-1.042-.248-1.811-.248a5.81 5.81 0 0 0-2.58.595 4.298 4.298 0 0 0-1.761 1.761c-.422.744-.645 1.588-.645 2.555v1.91h-2.258v2.63h2.258V37.57h3.249V26.483h4.862v7.07c0 2.902 1.365 4.365 4.093 4.365.447 0 .918-.074 1.365-.149.471-.099.818-.223 1.017-.322l.025-.025v-2.654l-.124.1a2.103 2.103 0 0 1-.67.297 2.288 2.288 0 0 1-.645.099c-.645 0-1.092-.149-1.414-.52-.298-.348-.447-.919-.447-1.762v-6.5h3.3ZM.415 12.02H15.62v15.207H.415V12.021Zm16.794 0h15.206v15.207H17.21V12.021ZM.415 28.814H15.62v15.207H.415V28.814Zm16.794 0h15.206v15.207H17.21V28.814Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 100 57&#34; aria-label=&#34;Disney&#34;&gt;&lt;path d=&#34;M40.792 16.699s.368-.574.696-1.024c.573-.778 1.638-1.883 2.416-2.58.245-.204.532-.45.532-.45s-.45.041-.696.082c-.614.123-1.474.696-1.924 1.065-.737.614-1.515 1.637-1.188 2.538.082.205.164.369.164.369Zm4.053 1.105a7.625 7.625 0 0 0 3.235-.983c.982-.532 2.415-1.637 2.293-2.907a1.044 1.044 0 0 0-.656-.86c-.45-.204-.655-.163-1.228 0-.41.124-.573.205-.982.41-1.147.655-2.744 2.047-3.603 3.194-.205.245-.41.573-.574.777-.122.123-.163.246-.163.287.04.123 1.228.123 1.678.082Zm-2.907 2.129c-.122.123-.245.41-.368.655-.082.123-.205.287-.287.328-.286.204-.532.245-.86-.041a1.963 1.963 0 0 1-.654-1.433c0-.246.04-.492 0-.696-.082-.328-.41-.696-.574-.983-.204-.368-.368-1.024-.41-1.474-.081-1.31.615-2.538 1.516-3.52.9-.983 2.129-1.802 3.398-2.335 1.228-.532 3.03-.86 4.38-.409.451.164 1.065.532 1.352.9.082.083.123.164.205.205.04.041.204.041.327.082.45.082 1.065.41 1.31.614.491.45.778.86.9 1.474.247 1.229-.45 2.58-1.268 3.399-1.392 1.392-2.743 2.415-4.504 3.07-.778.287-1.965.573-2.866.492-.286-.041-.573-.082-.819-.123-.123 0-.614-.123-.696-.164l-.082-.041Zm1.556 2.743c.041 0 .123.041.205.041.614.246.86.819 1.023 1.433.369 1.474.492 4.667.574 5.937.04.941.081 1.883.123 2.824.04.778.081 1.843-.082 2.58-.041.286-.246.573-.492.737-.286.204-.941.204-1.31.123-.9-.205-1.187-.778-1.31-1.679-.287-2.129-.164-6.305.04-8.065.042-.574.288-2.457.574-3.235.041-.246.287-.778.655-.696Zm-27.84 3.194s-1.351.081-2.252.204c-1.188.123-3.357.491-4.627.942-.368.123-1.146.45-1.228.86-.082.41.164.737.45 1.064.164.205 1.065 1.065 1.351 1.27 1.065.9 3.276 2.292 4.873 2.947.532.246 1.473.573 1.473.573s-.081-2.62-.04-5.158c-.041-1.351 0-2.703 0-2.703Zm24.524 1.023c.082.696-.123 2.006-.123 2.21-.04.41-.368 1.311-.41 1.434-.245.573-.49 1.023-.736 1.474-.45.778-1.474 2.047-2.088 2.58-2.293 2.005-5.855 3.11-8.926 3.48-2.088.245-4.462.204-6.673-.206a31.02 31.02 0 0 1-1.884-.409s0 .45-.04.778c0 .123-.123.532-.205.655-.164.328-.41.491-.82.573-.45.082-.94.123-1.391-.082-.696-.286-.942-.941-1.065-1.72-.082-.613-.204-1.637-.204-1.637s-.533-.246-.942-.45c-1.351-.655-2.62-1.474-3.726-2.293-.327-.246-1.637-1.351-1.924-1.597-.819-.778-1.556-1.556-2.13-2.538-.45-.778-.572-1.474-.245-2.293.45-1.146 2.088-2.006 3.235-2.497.819-.369 3.398-1.188 4.462-1.351.492-.082 1.27-.205 1.351-.246l.041-.041c.041-.041.082-1.187.041-1.597 0-.41.287-3.07.41-3.644.04-.327.286-1.473.532-1.801.164-.205.41-.205.655-.04 1.228.777 1.597 3.397 1.679 4.748.04.82.082 2.047.082 2.047s1.392-.04 2.252 0c.818.041 1.76.164 2.62.287 1.105.164 3.275.655 4.544 1.27 1.024.531 1.966 1.391 2.293 2.333.287.86.246 1.433-.205 2.21-.49.86-1.433 1.516-2.374 1.556-.287 0-1.351-.122-1.679-.368a.315.315 0 0 1-.04-.41c.04-.04.531-.286.818-.45.164-.082.287-.163.369-.286.245-.205.45-.45.45-.737-.041-.369-.41-.573-.778-.737-1.72-.655-5.077-1.229-6.756-1.351-.655-.041-1.555-.082-1.555-.082l.286 9.13s.737.164 1.351.245c.328.041 1.802.164 2.17.205 2.948.082 6.183-.164 8.885-1.474 1.187-.573 2.252-1.228 3.07-2.17 1.065-1.228 1.638-2.947 1.515-4.708-.163-1.924-1.515-4.217-2.62-5.609-2.866-3.685-7.779-6.714-12.119-8.516-4.422-1.801-8.802-2.866-13.47-3.03-1.228-.04-3.848 0-5.159.369-.204.04-.368.123-.573.164-.123.04-.368.122-.41.163l-.081.082.164.082c.123.082.737.082 1.023.164.287.04.573.205.655.41.123.204.123.327 0 .49-.286.37-1.433.287-1.924.246-.532-.082-1.146-.245-1.27-.696-.122-.532.124-1.064.37-1.555.532-.983 1.35-1.474 2.497-1.802 1.637-.45 3.685-.778 5.24-.819 3.521-.123 6.797.492 10.195 1.515 1.924.573 4.504 1.556 6.346 2.457a50.267 50.267 0 0 1 4.626 2.62c.369.246 2.539 1.842 2.907 2.129.696.573 1.638 1.392 2.293 2.088 1.31 1.27 2.907 3.234 3.685 4.79.205.369.328.737.573 1.187.082.164.45 1.024.491 1.31.041.246.164.615.164.656.041.04.205.819.205 1.105Zm15.067.655h.122c1.065.164 2.13.328 2.907.696.737.328 1.188.737 1.597 1.474.614 1.146.655 2.702.082 3.89-.41.9-1.31 1.637-2.13 2.047-.859.409-1.678.614-2.66.736-1.679.205-3.521-.163-5.036-.9-.9-.45-2.006-1.188-2.539-2.17-.409-.696-.409-1.638.082-2.334.778-1.064 2.457-1.31 3.767-1.269.983.041 2.702.328 3.644.655.245.082 1.187.45 1.35.614.124.123.206.287.124.45-.205.656-1.76.983-2.211 1.065-1.228.205-1.843-.287-3.194-.819-.327-.123-.777-.286-1.146-.327-.614-.041-1.392.122-1.474.778-.04.368.369.696.655.818.737.328 1.351.45 2.047.45 2.13.042 4.545-.327 6.305-1.555.246-.164.492-.41.492-.737 0-.04-.041-.368-.164-.41h-.041c-.041 0-.123-.122-.164-.204-.123-.164-.614-.369-.737-.41-1.187-.49-3.357-.736-4.503-.818-1.188-.082-3.03-.246-3.48-.328-.45-.082-.942-.164-1.352-.327a1.608 1.608 0 0 1-.9-1.024c-.205-.819.04-1.801.491-2.415 1.187-1.68 3.93-2.334 5.977-2.58 1.966-.245 5.2-.245 7.125.778.286.164.45.328.409.614-.123.614-.573.983-1.146 1.147-.574.163-1.761.245-2.293.286-2.334.123-5.2.082-7.41.655-.165.041-.492.123-.574.246-.368.368.655.491.86.532.082 0 .082 0 .123.041l4.995.655Zm7.328 8.803c-.941-.369-1.146-1.884-1.187-2.662-.164-2.538.532-6.018 1.351-8.393.246-.655.573-1.76 1.351-1.72.532.042.9.451 1.187.86.737 1.065 1.72 2.457 2.375 3.44.737 1.105 1.433 2.21 2.088 3.234.082.123.164.246.246.328.123.082.245.122.286 0 .041-.041-.04-1.31-.04-1.556-.041-.41-.083-.737-.123-1.106-.123-1.023-.45-2.456-.696-3.439-.287-1.064-.615-2.21-.86-3.275-.082-.328-.164-.696-.164-1.024 0-.45.287-.737.778-.573.982.328 2.252 2.416 2.62 3.153.123.245.614 1.474.737 1.842.41 1.187.655 2.334.737 3.644.123 1.27 0 3.111-.532 4.38-.205.451-.614 1.065-.942 1.393-.532.491-1.596.86-2.292.45-.778-.45-2.089-2.702-2.334-3.111-.737-1.31-2.047-3.89-2.252-4.177-.041-.082-.082-.122-.205-.163-.082-.041-.123.122-.123.245-.122.737-.204 4.258-.204 4.381-.041.573-.041 2.047-.205 2.743-.123.45-.205.86-.655 1.065-.328.245-.573.163-.942.04Zm13.102-.246a1.574 1.574 0 0 1-.369-.368s-.368-.533-.41-.697c-.04-.122-.122-.245-.163-.327-.328-.819-.287-1.597-.123-2.457.164-.818.328-.818.737-1.924.041-.04.041-.123.041-.164 0-.163-.246-1.187-.246-1.473 0-.492.369-.86 1.024-.901h.164c.245-.082.41-.573.573-.942.205-.573.491-1.392.491-1.392s-.819-.205-1.269-.368c-.491-.205-.86-.41-1.064-.86-.246-.532-.082-.819.45-.983.205-.082 1.801-.368 2.293-.45.614-.082 1.228-.164 1.801-.246.532-.082 2.907-.327 3.644-.327 1.146.04 1.883.491 2.58 1.474.368.532.614 1.146.081 1.474-.86.49-3.562.532-4.053.573h-1.883l-.574 1.842s1.966-.04 3.03-.04c.287 0 .532 0 .696.04.573.123.737.573.778 1.187.041.737-.123 1.065-.696 1.147-.287.04-3.644.082-4.094.123l-.573.081s-.246.615-.45 1.27c-.205.655-.41 1.35-.41 1.35h.327c.246 0 .492-.04.656-.081 1.023-.205 2.538-.41 3.807-.614.655-.123 1.024-.164 1.351.286.287.41.45.737.492 1.188 0 .45-.328.737-.737 1.064-1.31 1.024-3.562 2.088-5.241 2.293-.778.082-.983 0-1.638-.164-.123-.04-.614-.246-.614-.287-.082-.081-.327-.245-.41-.327Zm21.167-9.294c-.86.737-1.965 2.211-2.498 2.948-.696 1.023-1.392 2.17-2.006 3.07-.123.205-.532.942-.532.942.04.041.45.041.86-.04.9-.165 2.129-.779 2.825-1.31a5.941 5.941 0 0 0 2.047-3.194c.164-.573.205-1.843-.205-2.375-.123-.082-.327-.164-.491-.04Zm-6.879 10.604s-.286.819-.49 1.433c-.328 1.105-1.106 4.012-1.27 4.913-.246 1.351-1.024 4.872-1.065 4.954-.04.123-.081.123-.204.205-.328.163-.45.122-.819-.082-.491-.246-.9-.532-1.27-1.024-.736-.941-.572-2.743-.409-3.807.492-3.685 1.024-5.323 2.416-9.008.04-.081.04-.081 0-.122-.45-.942-.655-2.047-.655-2.99 0-2.906 1.678-5.73 3.52-8.024.124-.163 1.065-1.269 1.475-1.228.41 0 .491.491.41.9-.206 1.352-1.147 2.703-1.802 3.808-.737 1.27-.86 1.76-1.228 2.907-.041.164-.205 1.024-.205 1.147 0 .327.082.696.082.696s1.187-1.638 1.965-2.662c.41-.573.737-.941 1.064-1.31.369-.41 1.72-1.842 2.13-2.21.818-.778 1.187-1.106 2.087-1.597.696-.369 1.352-.45 2.048 0 1.105.737 1.596 2.252 1.72 3.48.163 1.474-.165 3.152-.82 4.421-.778 1.515-1.842 2.62-3.275 3.562-1.474.983-3.194 1.638-4.913 1.597-.205.041-.492.041-.492.041Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 103 57&#34; aria-label=&#34;Amazon&#34;&gt;&lt;g clip-path=&#34;url(#Amazon_svg__a)&#34;&gt;&lt;path d=&#34;M63.414 41.166c-5.897 4.347-14.445 6.666-21.805 6.666-10.319 0-19.609-3.817-26.637-10.165-.552-.5-.057-1.18.605-.79 7.585 4.412 16.963 7.067 26.65 7.067 6.534 0 13.722-1.352 20.33-4.157.998-.424 1.833.654.857 1.379Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M65.866 38.36c-.75-.962-4.983-.454-6.882-.229-.579.07-.667-.433-.146-.795 3.37-2.372 8.901-1.688 9.546-.892.645.8-.168 6.343-3.335 8.99-.486.406-.95.19-.733-.35.71-1.776 2.305-5.756 1.55-6.723Zm-6.75-17.77v-2.307c0-.349.265-.583.583-.583h10.324c.331 0 .597.239.597.583v1.975c-.005.331-.283.764-.778 1.449l-5.35 7.638c1.988-.049 4.087.247 5.889 1.263.406.23.517.566.548.897v2.46c0 .336-.371.73-.76.526-3.176-1.665-7.395-1.846-10.907.018-.358.194-.733-.195-.733-.53v-2.337c0-.376.004-1.016.38-1.586l6.197-8.888h-5.393c-.332 0-.597-.234-.597-.579ZM21.457 34.977h-3.14a.593.593 0 0 1-.562-.534v-16.12a.59.59 0 0 1 .606-.579h2.928a.592.592 0 0 1 .57.54v2.107h.058c.764-2.037 2.2-2.987 4.134-2.987 1.966 0 3.194.95 4.078 2.986.76-2.036 2.487-2.986 4.338-2.986 1.316 0 2.756.544 3.635 1.763.994 1.356.791 3.326.791 5.053l-.004 10.174c0 .322-.27.583-.606.583h-3.136a.597.597 0 0 1-.565-.583v-8.543c0-.68.061-2.377-.089-3.022-.234-1.082-.936-1.387-1.846-1.387-.76 0-1.555.508-1.878 1.32-.322.814-.291 2.174-.291 3.088v8.544c0 .322-.27.583-.606.583h-3.136a.594.594 0 0 1-.565-.583l-.005-8.543c0-1.798.296-4.444-1.935-4.444-2.257 0-2.169 2.58-2.169 4.444v8.543a.593.593 0 0 1-.605.583Zm58.05-17.573c4.66 0 7.183 4.003 7.183 9.091 0 4.917-2.788 8.818-7.183 8.818-4.577 0-7.068-4.002-7.068-8.99 0-5.018 2.522-8.919 7.068-8.919Zm.026 3.291c-2.314 0-2.46 3.154-2.46 5.12 0 1.97-.031 6.176 2.434 6.176 2.434 0 2.549-3.393 2.549-5.46 0-1.36-.058-2.986-.468-4.276-.354-1.122-1.056-1.56-2.054-1.56ZM9.711 27.277v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.168 7.656a.656.656 0 0 1-.743.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.058-1.63-.38-2.274-.384-.58-1.117-.818-1.762-.818-1.197 0-2.266.614-2.527 1.887-.053.282-.26.56-.543.574l-3.049-.327c-.256-.057-.538-.265-.468-.658.703-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.529 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.116 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.008-.01Zm79.854.044h-3.127a.597.597 0 0 1-.566-.583l-.004-16.124a.594.594 0 0 1 .605-.526h2.911c.274.014.5.2.561.451v2.465h.057c.88-2.204 2.112-3.256 4.281-3.256 1.41 0 2.783.508 3.666 1.9.822 1.29.822 3.459.822 5.018V34.47c-.035.283-.296.508-.605.508h-3.15c-.287-.022-.525-.234-.556-.508v-8.755c0-1.763.203-4.343-1.966-4.343-.764 0-1.467.513-1.816 1.29-.442.985-.499 1.966-.499 3.053v8.68a.604.604 0 0 1-.614.583Zm-42.307-7.7v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.167 7.656a.656.656 0 0 1-.742.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.057-1.63-.38-2.274-.384-.58-1.117-.818-1.763-.818-1.197 0-2.266.614-2.526 1.887-.053.282-.26.56-.544.574l-3.048-.327c-.256-.057-.539-.265-.468-.658.702-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.528 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.117 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.009-.01Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;Amazon_svg__a&#34;&gt;&lt;path d=&#34;M0 0h102v39H0z&#34; transform=&#34;translate(.198 8.52)&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 99 57&#34; aria-label=&#34;Neftlix&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M14.037 39.775c-.875.155-1.756.246-2.654.339-.622.064-1.251.129-1.892.217L4.743 26.197v14.738c-1.343.141-2.569.33-3.825.522l-.414.064v-27h3.94l5.412 15.314V14.521h4.181v25.254Zm11.077-15.413c.982-.02 1.943-.038 2.667-.038v4.224c-1.845 0-4.008 0-5.565.078v6.272c.725-.047 1.45-.098 2.175-.15 1.718-.122 3.44-.244 5.178-.299v4.068l-11.505.926V14.521h11.505v4.214h-7.343v5.667c.823 0 1.867-.02 2.888-.04Zm15.604-5.618h4.306l.01-.01v-4.213H32.25v4.214h4.306v19.45c1.356-.059 2.759-.059 4.162-.059V18.744Zm11.063 5.366h5.689v4.223h-5.69v9.57h-4.084V14.52h11.61v4.214H51.77v5.384l.01-.01Zm19.64 10.38c-1.773-.113-3.579-.228-5.368-.265V14.52h-4.152v23.684c3.786.078 7.506.312 11.217.556v-4.166c-.562-.033-1.128-.069-1.697-.105Zm5.204 4.553c1.327.078 2.73.166 4.076.322V14.521h-4.076v24.522Zm17.023-11.685 5.277-12.837h-4.547l-2.92 7.091-2.72-7.091h-4.461l4.825 12.68-5.343 12.36c.635.09 1.263.157 1.891.223.854.09 1.708.18 2.578.332l3.037-7.17 2.989 7.804.525.093c1.382.243 2.764.486 4.146.668l-5.276-14.153Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 46 57&#34; aria-label=&#34;Adobe&#34;&gt;&lt;path d=&#34;M16.726 8.02H0v40l16.726-40Zm11.768 0h16.703v40l-16.704-40ZM22.61 22.763l10.645 25.258h-6.984l-3.182-8.042H15.3l7.31-17.216Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 64 57&#34; aria-label=&#34;Salesforce&#34;&gt;&lt;path d=&#34;M41.087 26.676c0 .624-.116 1.115-.346 1.463-.226.344-.569.511-1.047.511-.48 0-.82-.166-1.043-.511-.226-.347-.34-.84-.34-1.463 0-.624.114-1.114.34-1.458.222-.34.564-.506 1.043-.506.478 0 .82.166 1.048.506.229.344.345.834.345 1.458Zm11.799-.598c.051-.347.147-.635.295-.86.223-.341.563-.528 1.041-.528s.794.188 1.021.528c.15.225.216.526.242.86h-2.599ZM24 25.218c-.148.225-.242.513-.294.86h2.598c-.026-.334-.091-.635-.24-.86-.228-.34-.544-.528-1.022-.528-.479 0-.819.187-1.042.528Zm-8.17 3.245c-.142-.113-.162-.142-.21-.215-.072-.112-.109-.272-.109-.474 0-.32.106-.55.325-.706-.002.001.314-.273 1.057-.263.522.007.989.084.989.084v1.657s-.462.1-.984.13c-.741.045-1.07-.213-1.068-.212Z&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M34.35 7.397c-3.122 0-5.945 1.31-7.972 3.423a12.194 12.194 0 0 0-9.708-4.8c-6.743 0-12.21 5.46-12.21 12.194 0 1.723.36 3.363 1.005 4.849A10.618 10.618 0 0 0 .22 32.245c0 5.855 4.697 10.601 10.492 10.601.74 0 1.46-.077 2.156-.225 1.592 4.32 5.74 7.399 10.607 7.399 4.674 0 8.683-2.839 10.405-6.887a9.904 9.904 0 0 0 12.98-4.077c.864.174 1.756.265 2.67.265 7.484 0 13.552-6.12 13.552-13.67S57.013 11.98 49.529 11.98c-1.951 0-3.806.416-5.481 1.165-1.928-3.435-5.549-5.749-9.698-5.749Zm3.331 14.11a3.142 3.142 0 0 0-.36-.086 2.86 2.86 0 0 0-.495-.037c-.659 0-1.178.186-1.543.553-.362.365-.608.921-.732 1.653l-.045.246h-.827s-.1-.003-.122.106l-.135.759c-.01.071.021.117.118.117h.805l-.817 4.56a5.644 5.644 0 0 1-.218.898c-.08.225-.158.395-.255.518a.678.678 0 0 1-.333.257c-.125.042-.27.062-.429.062a1.59 1.59 0 0 1-.291-.032.86.86 0 0 1-.198-.064s-.093-.036-.131.058c-.03.078-.245.668-.27.74-.026.073.01.13.056.147a2.23 2.23 0 0 0 .867.148c.335 0 .64-.048.894-.14.255-.091.477-.252.674-.468.212-.235.345-.48.473-.816.126-.331.234-.743.32-1.223l.821-4.645h1.2s.101.003.122-.107l.136-.757c.009-.073-.022-.118-.12-.118h-1.164l.002-.012.004-.023a4.81 4.81 0 0 1 .186-.787 1.07 1.07 0 0 1 .256-.388.765.765 0 0 1 .305-.19c.115-.038.247-.056.391-.056.11 0 .218.013.3.03.112.024.156.037.186.046.119.035.135 0 .158-.057l.279-.765c.028-.082-.042-.117-.068-.127Zm-28.34 7.464c-.02-.018-.05-.047-.018-.133l.254-.705c.04-.122.133-.082.17-.058l.084.053c.037.024.077.05.129.08a3.05 3.05 0 0 0 1.66.478c.561 0 .909-.297.909-.697v-.021c0-.436-.534-.6-1.153-.791h-.002l-.137-.043c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.003-1.735h.13c.692 0 1.362.2 1.847.495.043.027.086.077.062.146a97.47 97.47 0 0 1-.262.705c-.046.121-.17.04-.17.04a3.718 3.718 0 0 0-1.64-.419c-.499 0-.821.265-.821.625v.023c0 .42.551.6 1.19.807l.111.036c.848.268 1.752.639 1.752 1.66v.021c0 1.104-.801 1.79-2.09 1.79-.634 0-1.239-.1-1.88-.44a8.101 8.101 0 0 0-.076-.042c-.095-.053-.19-.106-.283-.174l-.003-.003-.002-.003-.005-.004Zm18.877 0c-.019-.018-.05-.047-.017-.133l.254-.705c.037-.116.147-.074.17-.058l.043.027c.05.033.098.065.17.106a3.05 3.05 0 0 0 1.66.478c.56 0 .91-.297.91-.697v-.021c0-.436-.535-.6-1.154-.79l-.14-.044c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.004-1.735h.129c.693 0 1.363.2 1.847.495.044.027.087.077.063.146l-.263.705c-.045.121-.17.04-.17.04a3.718 3.718 0 0 0-1.639-.419c-.5 0-.822.265-.822.625v.023c0 .42.552.6 1.19.807l.111.036c.849.268 1.752.639 1.752 1.66v.021c0 1.104-.8 1.79-2.09 1.79-.633 0-1.238-.1-1.88-.44a9.636 9.636 0 0 0-.075-.042 2.675 2.675 0 0 1-.294-.184Zm13.945-3.452a2.59 2.59 0 0 0-.49-.935 2.367 2.367 0 0 0-.826-.629 2.718 2.718 0 0 0-1.153-.23 2.72 2.72 0 0 0-1.155.23 2.38 2.38 0 0 0-.827.629 2.632 2.632 0 0 0-.49.935 4.092 4.092 0 0 0-.157 1.157c0 .412.053.802.157 1.157a2.6 2.6 0 0 0 .491.934c.22.264.498.474.826.624.33.15.718.225 1.155.225.436 0 .824-.076 1.153-.225.329-.15.607-.36.827-.624a2.59 2.59 0 0 0 .49-.934 4.09 4.09 0 0 0 .158-1.157 4.05 4.05 0 0 0-.159-1.157Zm8.703 2.899s.1-.04.137.065l.264.73c.034.09-.044.128-.044.128a4.38 4.38 0 0 1-1.524.272c-.933 0-1.649-.269-2.125-.8-.476-.527-.717-1.25-.717-2.142 0-.413.06-.803.176-1.159a2.67 2.67 0 0 1 .524-.935c.23-.263.523-.474.867-.627a2.928 2.928 0 0 1 1.2-.231c.302 0 .574.018.807.054.25.038.579.127.718.181.026.01.095.045.067.126-.068.196-.123.345-.18.502l-.038.105-.046.13c-.04.11-.126.074-.126.074a3.576 3.576 0 0 0-1.137-.163c-.533 0-.932.178-1.195.525-.264.35-.41.808-.413 1.418-.001.67.165 1.165.463 1.471.296.306.71.461 1.23.461.213 0 .411-.014.591-.042a2.41 2.41 0 0 0 .5-.143Zm5.644-3.102a2.263 2.263 0 0 0-.466-.853c-.235-.252-.464-.429-.692-.527a2.664 2.664 0 0 0-1.044-.212c-.455 0-.867.077-1.202.234a2.393 2.393 0 0 0-.84.64 2.626 2.626 0 0 0-.493.946c-.107.36-.16.75-.16 1.163 0 .42.055.812.166 1.163.11.355.288.668.528.926.239.261.547.465.916.608.366.141.811.215 1.322.214 1.053-.004 1.607-.239 1.835-.365.04-.022.08-.062.03-.175l-.237-.667c-.036-.099-.137-.062-.137-.062l-.028.01-.027.01-.017.007c-.258.098-.635.243-1.424.241-.565 0-.984-.167-1.246-.428-.27-.267-.402-.659-.425-1.212l3.644.003s.096-.001.105-.095l.003-.016a3.912 3.912 0 0 0-.11-1.553Zm-29.647-.853c.149.16.374.508.466.853a3.9 3.9 0 0 1 .111 1.553l-.002.017c-.01.093-.106.094-.106.094l-3.643-.003c.023.553.154.945.424 1.212.262.26.681.427 1.246.428.79.002 1.167-.143 1.424-.241l.034-.013.038-.014s.101-.037.138.062l.237.667c.049.113.01.153-.03.175-.229.126-.783.361-1.835.365-.511 0-.956-.073-1.323-.214a2.393 2.393 0 0 1-.916-.608 2.406 2.406 0 0 1-.528-.925 3.898 3.898 0 0 1-.166-1.164c0-.413.055-.804.16-1.163.106-.36.273-.679.494-.946.221-.267.503-.482.839-.64.335-.157.748-.234 1.203-.234.39 0 .746.085 1.044.212.227.098.456.275.691.527Zm-9.583 1.44a8.065 8.065 0 0 0-.569-.017c-.312 0-.614.04-.897.116a2.34 2.34 0 0 0-.761.353c-.221.158-.4.36-.529.6a1.77 1.77 0 0 0-.194.84c0 .323.056.603.167.832a1.5 1.5 0 0 0 .475.57c.203.148.452.256.743.321.285.066.61.099.964.099.373 0 .746-.03 1.107-.092.357-.061.796-.15.918-.178.12-.028.255-.065.255-.065.09-.022.083-.12.083-.12l-.002-3.331c0-.73-.195-1.273-.579-1.608-.382-.335-.946-.505-1.674-.505-.273 0-.712.038-.976.09 0 0-.796.155-1.123.411 0 0-.072.045-.033.145l.258.693c.032.09.12.06.12.06s.027-.012.06-.03c.7-.382 1.587-.37 1.587-.37.394 0 .697.079.9.235.2.153.3.383.3.868v.154c-.313-.045-.6-.07-.6-.07Zm29.333-2.008a.1.1 0 0 1 .055.131c-.034.1-.212.598-.274.765-.024.063-.063.106-.133.098 0 0-.21-.049-.4-.049-.133 0-.32.017-.49.069a1.118 1.118 0 0 0-.45.27c-.132.13-.24.311-.318.537-.08.228-.121.592-.121.956v2.715a.11.11 0 0 1-.11.111h-.958a.112.112 0 0 1-.11-.11v-5.435c0-.062.043-.111.104-.111h.934c.061 0 .105.049.105.11v.444c.14-.187.39-.352.616-.454.227-.102.482-.18.94-.151.238.015.548.08.61.104Zm-25.314 5.602c.061 0 .105-.049.105-.11v-7.776c0-.06-.044-.11-.105-.11h-.966c-.06 0-.104.05-.104.11v7.776c0 .061.043.11.104.11h.966Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg Frz0pvOJ0fp95qyyJfFZ&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 151 57&#34; aria-label=&#34;Microsoft&#34;&gt;&lt;path d=&#34;m53.302 30.452-.893 2.53h-.075a17.98 17.98 0 0 0-.868-2.48L46.678 18.47H41.99v19.175h3.1V25.813c0-.744 0-1.588-.024-2.63-.025-.52-.074-.918-.1-1.215h.075a11.6 11.6 0 0 0 .447 1.637l5.755 13.99h2.183l5.705-14.114c.124-.322.248-.967.372-1.513h.075a178.288 178.288 0 0 0-.15 3.448V37.57h3.3V18.42h-4.515l-4.911 12.03Zm12.552-6.624h3.225v13.743h-3.225V23.828Zm1.637-5.804c-.546 0-.992.198-1.364.545a1.76 1.76 0 0 0-.57 1.34c0 .52.197.967.57 1.315.372.347.818.52 1.364.52.546 0 1.017-.198 1.364-.52.372-.348.57-.794.57-1.315 0-.521-.198-.967-.57-1.34-.322-.347-.794-.545-1.364-.545Zm13.023 5.68a8.998 8.998 0 0 0-1.81-.198c-1.464 0-2.804.322-3.92.967s-2.01 1.538-2.58 2.655c-.595 1.14-.893 2.455-.893 3.968 0 1.315.298 2.481.868 3.548.57 1.042 1.365 1.885 2.431 2.456 1.017.57 2.208.868 3.548.868 1.538 0 2.852-.323 3.894-.918l.025-.025v-2.977l-.124.1a5.544 5.544 0 0 1-1.563.818c-.57.199-1.091.298-1.538.298-1.29 0-2.307-.372-3.026-1.19-.744-.794-1.116-1.886-1.116-3.25 0-1.414.372-2.53 1.14-3.35.77-.818 1.787-1.24 3.027-1.24 1.042 0 2.109.348 3.076 1.042l.124.1v-3.15l-.025-.026c-.422-.173-.893-.372-1.538-.496Zm10.642-.099c-.794 0-1.538.248-2.183.77-.546.446-.918 1.09-1.24 1.86h-.025v-2.407h-3.225v13.743h3.225v-7.02c0-1.19.248-2.183.794-2.902.546-.745 1.24-1.117 2.084-1.117.297 0 .595.075.967.124.347.1.595.199.769.323l.124.099v-3.225l-.074-.025c-.224-.148-.67-.223-1.216-.223Zm8.781-.074c-2.257 0-4.068.67-5.333 1.984-1.29 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.24 1.24 2.927 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.166-1.265-2.877-1.885-5.01-1.885Zm2.58 10.567c-.595.77-1.538 1.141-2.704 1.141-1.166 0-2.108-.372-2.778-1.19-.67-.77-.992-1.886-.992-3.3 0-1.463.347-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.141 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c-.05 1.488-.323 2.654-.943 3.423Zm11.436-4.564c-1.017-.422-1.662-.744-1.96-1.017-.248-.248-.372-.596-.372-1.042 0-.372.149-.744.521-.992s.794-.373 1.414-.373c.546 0 1.116.1 1.662.249.546.148 1.042.372 1.439.67l.124.099V24.1l-.075-.025a8.95 8.95 0 0 0-1.463-.421 9.943 9.943 0 0 0-1.588-.15c-1.538 0-2.803.373-3.795 1.192-.992.768-1.464 1.81-1.464 3.026 0 .645.1 1.215.323 1.687.223.471.546.918.992 1.29.447.347 1.092.744 1.985 1.116.744.322 1.314.57 1.662.769.347.198.57.422.744.595.124.199.198.447.198.77 0 .917-.694 1.364-2.108 1.364-.546 0-1.117-.1-1.786-.323a6.898 6.898 0 0 1-1.811-.918l-.124-.099v3.15l.074.025c.472.224 1.042.372 1.737.546.694.124 1.314.223 1.86.223 1.662 0 3.026-.372 3.994-1.19.992-.794 1.513-1.811 1.513-3.126 0-.918-.248-1.736-.794-2.357a10.048 10.048 0 0 0-2.902-1.711Zm12.205-6.003c-2.258 0-4.069.67-5.334 1.984-1.265 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.241 1.24 2.928 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.165-1.265-2.877-1.885-5.01-1.885Zm2.555 10.567c-.596.77-1.538 1.141-2.704 1.141-1.191 0-2.109-.372-2.779-1.19-.669-.77-.992-1.886-.992-3.3 0-1.463.348-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.116 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c0 1.488-.322 2.654-.942 3.423Zm21.507-7.615v-2.655h-3.25V19.76l-.099.025-3.076.918-.075.025v3.1h-4.862v-1.736c0-.794.199-1.414.546-1.811.347-.397.868-.595 1.513-.595.447 0 .918.099 1.439.322l.124.075V17.28l-.074-.025c-.447-.15-1.042-.248-1.811-.248a5.81 5.81 0 0 0-2.58.595 4.298 4.298 0 0 0-1.761 1.761c-.422.744-.645 1.588-.645 2.555v1.91h-2.258v2.63h2.258V37.57h3.249V26.483h4.862v7.07c0 2.902 1.365 4.365 4.093 4.365.447 0 .918-.074 1.365-.149.471-.099.818-.223 1.017-.322l.025-.025v-2.654l-.124.1a2.103 2.103 0 0 1-.67.297 2.288 2.288 0 0 1-.645.099c-.645 0-1.092-.149-1.414-.52-.298-.348-.447-.919-.447-1.762v-6.5h3.3ZM.415 12.02H15.62v15.207H.415V12.021Zm16.794 0h15.206v15.207H17.21V12.021ZM.415 28.814H15.62v15.207H.415V28.814Zm16.794 0h15.206v15.207H17.21V28.814Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 100 57&#34; aria-label=&#34;Disney&#34;&gt;&lt;path d=&#34;M40.792 16.699s.368-.574.696-1.024c.573-.778 1.638-1.883 2.416-2.58.245-.204.532-.45.532-.45s-.45.041-.696.082c-.614.123-1.474.696-1.924 1.065-.737.614-1.515 1.637-1.188 2.538.082.205.164.369.164.369Zm4.053 1.105a7.625 7.625 0 0 0 3.235-.983c.982-.532 2.415-1.637 2.293-2.907a1.044 1.044 0 0 0-.656-.86c-.45-.204-.655-.163-1.228 0-.41.124-.573.205-.982.41-1.147.655-2.744 2.047-3.603 3.194-.205.245-.41.573-.574.777-.122.123-.163.246-.163.287.04.123 1.228.123 1.678.082Zm-2.907 2.129c-.122.123-.245.41-.368.655-.082.123-.205.287-.287.328-.286.204-.532.245-.86-.041a1.963 1.963 0 0 1-.654-1.433c0-.246.04-.492 0-.696-.082-.328-.41-.696-.574-.983-.204-.368-.368-1.024-.41-1.474-.081-1.31.615-2.538 1.516-3.52.9-.983 2.129-1.802 3.398-2.335 1.228-.532 3.03-.86 4.38-.409.451.164 1.065.532 1.352.9.082.083.123.164.205.205.04.041.204.041.327.082.45.082 1.065.41 1.31.614.491.45.778.86.9 1.474.247 1.229-.45 2.58-1.268 3.399-1.392 1.392-2.743 2.415-4.504 3.07-.778.287-1.965.573-2.866.492-.286-.041-.573-.082-.819-.123-.123 0-.614-.123-.696-.164l-.082-.041Zm1.556 2.743c.041 0 .123.041.205.041.614.246.86.819 1.023 1.433.369 1.474.492 4.667.574 5.937.04.941.081 1.883.123 2.824.04.778.081 1.843-.082 2.58-.041.286-.246.573-.492.737-.286.204-.941.204-1.31.123-.9-.205-1.187-.778-1.31-1.679-.287-2.129-.164-6.305.04-8.065.042-.574.288-2.457.574-3.235.041-.246.287-.778.655-.696Zm-27.84 3.194s-1.351.081-2.252.204c-1.188.123-3.357.491-4.627.942-.368.123-1.146.45-1.228.86-.082.41.164.737.45 1.064.164.205 1.065 1.065 1.351 1.27 1.065.9 3.276 2.292 4.873 2.947.532.246 1.473.573 1.473.573s-.081-2.62-.04-5.158c-.041-1.351 0-2.703 0-2.703Zm24.524 1.023c.082.696-.123 2.006-.123 2.21-.04.41-.368 1.311-.41 1.434-.245.573-.49 1.023-.736 1.474-.45.778-1.474 2.047-2.088 2.58-2.293 2.005-5.855 3.11-8.926 3.48-2.088.245-4.462.204-6.673-.206a31.02 31.02 0 0 1-1.884-.409s0 .45-.04.778c0 .123-.123.532-.205.655-.164.328-.41.491-.82.573-.45.082-.94.123-1.391-.082-.696-.286-.942-.941-1.065-1.72-.082-.613-.204-1.637-.204-1.637s-.533-.246-.942-.45c-1.351-.655-2.62-1.474-3.726-2.293-.327-.246-1.637-1.351-1.924-1.597-.819-.778-1.556-1.556-2.13-2.538-.45-.778-.572-1.474-.245-2.293.45-1.146 2.088-2.006 3.235-2.497.819-.369 3.398-1.188 4.462-1.351.492-.082 1.27-.205 1.351-.246l.041-.041c.041-.041.082-1.187.041-1.597 0-.41.287-3.07.41-3.644.04-.327.286-1.473.532-1.801.164-.205.41-.205.655-.04 1.228.777 1.597 3.397 1.679 4.748.04.82.082 2.047.082 2.047s1.392-.04 2.252 0c.818.041 1.76.164 2.62.287 1.105.164 3.275.655 4.544 1.27 1.024.531 1.966 1.391 2.293 2.333.287.86.246 1.433-.205 2.21-.49.86-1.433 1.516-2.374 1.556-.287 0-1.351-.122-1.679-.368a.315.315 0 0 1-.04-.41c.04-.04.531-.286.818-.45.164-.082.287-.163.369-.286.245-.205.45-.45.45-.737-.041-.369-.41-.573-.778-.737-1.72-.655-5.077-1.229-6.756-1.351-.655-.041-1.555-.082-1.555-.082l.286 9.13s.737.164 1.351.245c.328.041 1.802.164 2.17.205 2.948.082 6.183-.164 8.885-1.474 1.187-.573 2.252-1.228 3.07-2.17 1.065-1.228 1.638-2.947 1.515-4.708-.163-1.924-1.515-4.217-2.62-5.609-2.866-3.685-7.779-6.714-12.119-8.516-4.422-1.801-8.802-2.866-13.47-3.03-1.228-.04-3.848 0-5.159.369-.204.04-.368.123-.573.164-.123.04-.368.122-.41.163l-.081.082.164.082c.123.082.737.082 1.023.164.287.04.573.205.655.41.123.204.123.327 0 .49-.286.37-1.433.287-1.924.246-.532-.082-1.146-.245-1.27-.696-.122-.532.124-1.064.37-1.555.532-.983 1.35-1.474 2.497-1.802 1.637-.45 3.685-.778 5.24-.819 3.521-.123 6.797.492 10.195 1.515 1.924.573 4.504 1.556 6.346 2.457a50.267 50.267 0 0 1 4.626 2.62c.369.246 2.539 1.842 2.907 2.129.696.573 1.638 1.392 2.293 2.088 1.31 1.27 2.907 3.234 3.685 4.79.205.369.328.737.573 1.187.082.164.45 1.024.491 1.31.041.246.164.615.164.656.041.04.205.819.205 1.105Zm15.067.655h.122c1.065.164 2.13.328 2.907.696.737.328 1.188.737 1.597 1.474.614 1.146.655 2.702.082 3.89-.41.9-1.31 1.637-2.13 2.047-.859.409-1.678.614-2.66.736-1.679.205-3.521-.163-5.036-.9-.9-.45-2.006-1.188-2.539-2.17-.409-.696-.409-1.638.082-2.334.778-1.064 2.457-1.31 3.767-1.269.983.041 2.702.328 3.644.655.245.082 1.187.45 1.35.614.124.123.206.287.124.45-.205.656-1.76.983-2.211 1.065-1.228.205-1.843-.287-3.194-.819-.327-.123-.777-.286-1.146-.327-.614-.041-1.392.122-1.474.778-.04.368.369.696.655.818.737.328 1.351.45 2.047.45 2.13.042 4.545-.327 6.305-1.555.246-.164.492-.41.492-.737 0-.04-.041-.368-.164-.41h-.041c-.041 0-.123-.122-.164-.204-.123-.164-.614-.369-.737-.41-1.187-.49-3.357-.736-4.503-.818-1.188-.082-3.03-.246-3.48-.328-.45-.082-.942-.164-1.352-.327a1.608 1.608 0 0 1-.9-1.024c-.205-.819.04-1.801.491-2.415 1.187-1.68 3.93-2.334 5.977-2.58 1.966-.245 5.2-.245 7.125.778.286.164.45.328.409.614-.123.614-.573.983-1.146 1.147-.574.163-1.761.245-2.293.286-2.334.123-5.2.082-7.41.655-.165.041-.492.123-.574.246-.368.368.655.491.86.532.082 0 .082 0 .123.041l4.995.655Zm7.328 8.803c-.941-.369-1.146-1.884-1.187-2.662-.164-2.538.532-6.018 1.351-8.393.246-.655.573-1.76 1.351-1.72.532.042.9.451 1.187.86.737 1.065 1.72 2.457 2.375 3.44.737 1.105 1.433 2.21 2.088 3.234.082.123.164.246.246.328.123.082.245.122.286 0 .041-.041-.04-1.31-.04-1.556-.041-.41-.083-.737-.123-1.106-.123-1.023-.45-2.456-.696-3.439-.287-1.064-.615-2.21-.86-3.275-.082-.328-.164-.696-.164-1.024 0-.45.287-.737.778-.573.982.328 2.252 2.416 2.62 3.153.123.245.614 1.474.737 1.842.41 1.187.655 2.334.737 3.644.123 1.27 0 3.111-.532 4.38-.205.451-.614 1.065-.942 1.393-.532.491-1.596.86-2.292.45-.778-.45-2.089-2.702-2.334-3.111-.737-1.31-2.047-3.89-2.252-4.177-.041-.082-.082-.122-.205-.163-.082-.041-.123.122-.123.245-.122.737-.204 4.258-.204 4.381-.041.573-.041 2.047-.205 2.743-.123.45-.205.86-.655 1.065-.328.245-.573.163-.942.04Zm13.102-.246a1.574 1.574 0 0 1-.369-.368s-.368-.533-.41-.697c-.04-.122-.122-.245-.163-.327-.328-.819-.287-1.597-.123-2.457.164-.818.328-.818.737-1.924.041-.04.041-.123.041-.164 0-.163-.246-1.187-.246-1.473 0-.492.369-.86 1.024-.901h.164c.245-.082.41-.573.573-.942.205-.573.491-1.392.491-1.392s-.819-.205-1.269-.368c-.491-.205-.86-.41-1.064-.86-.246-.532-.082-.819.45-.983.205-.082 1.801-.368 2.293-.45.614-.082 1.228-.164 1.801-.246.532-.082 2.907-.327 3.644-.327 1.146.04 1.883.491 2.58 1.474.368.532.614 1.146.081 1.474-.86.49-3.562.532-4.053.573h-1.883l-.574 1.842s1.966-.04 3.03-.04c.287 0 .532 0 .696.04.573.123.737.573.778 1.187.041.737-.123 1.065-.696 1.147-.287.04-3.644.082-4.094.123l-.573.081s-.246.615-.45 1.27c-.205.655-.41 1.35-.41 1.35h.327c.246 0 .492-.04.656-.081 1.023-.205 2.538-.41 3.807-.614.655-.123 1.024-.164 1.351.286.287.41.45.737.492 1.188 0 .45-.328.737-.737 1.064-1.31 1.024-3.562 2.088-5.241 2.293-.778.082-.983 0-1.638-.164-.123-.04-.614-.246-.614-.287-.082-.081-.327-.245-.41-.327Zm21.167-9.294c-.86.737-1.965 2.211-2.498 2.948-.696 1.023-1.392 2.17-2.006 3.07-.123.205-.532.942-.532.942.04.041.45.041.86-.04.9-.165 2.129-.779 2.825-1.31a5.941 5.941 0 0 0 2.047-3.194c.164-.573.205-1.843-.205-2.375-.123-.082-.327-.164-.491-.04Zm-6.879 10.604s-.286.819-.49 1.433c-.328 1.105-1.106 4.012-1.27 4.913-.246 1.351-1.024 4.872-1.065 4.954-.04.123-.081.123-.204.205-.328.163-.45.122-.819-.082-.491-.246-.9-.532-1.27-1.024-.736-.941-.572-2.743-.409-3.807.492-3.685 1.024-5.323 2.416-9.008.04-.081.04-.081 0-.122-.45-.942-.655-2.047-.655-2.99 0-2.906 1.678-5.73 3.52-8.024.124-.163 1.065-1.269 1.475-1.228.41 0 .491.491.41.9-.206 1.352-1.147 2.703-1.802 3.808-.737 1.27-.86 1.76-1.228 2.907-.041.164-.205 1.024-.205 1.147 0 .327.082.696.082.696s1.187-1.638 1.965-2.662c.41-.573.737-.941 1.064-1.31.369-.41 1.72-1.842 2.13-2.21.818-.778 1.187-1.106 2.087-1.597.696-.369 1.352-.45 2.048 0 1.105.737 1.596 2.252 1.72 3.48.163 1.474-.165 3.152-.82 4.421-.778 1.515-1.842 2.62-3.275 3.562-1.474.983-3.194 1.638-4.913 1.597-.205.041-.492.041-.492.041Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 103 57&#34; aria-label=&#34;Amazon&#34;&gt;&lt;g clip-path=&#34;url(#Amazon_svg__a)&#34;&gt;&lt;path d=&#34;M63.414 41.166c-5.897 4.347-14.445 6.666-21.805 6.666-10.319 0-19.609-3.817-26.637-10.165-.552-.5-.057-1.18.605-.79 7.585 4.412 16.963 7.067 26.65 7.067 6.534 0 13.722-1.352 20.33-4.157.998-.424 1.833.654.857 1.379Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M65.866 38.36c-.75-.962-4.983-.454-6.882-.229-.579.07-.667-.433-.146-.795 3.37-2.372 8.901-1.688 9.546-.892.645.8-.168 6.343-3.335 8.99-.486.406-.95.19-.733-.35.71-1.776 2.305-5.756 1.55-6.723Zm-6.75-17.77v-2.307c0-.349.265-.583.583-.583h10.324c.331 0 .597.239.597.583v1.975c-.005.331-.283.764-.778 1.449l-5.35 7.638c1.988-.049 4.087.247 5.889 1.263.406.23.517.566.548.897v2.46c0 .336-.371.73-.76.526-3.176-1.665-7.395-1.846-10.907.018-.358.194-.733-.195-.733-.53v-2.337c0-.376.004-1.016.38-1.586l6.197-8.888h-5.393c-.332 0-.597-.234-.597-.579ZM21.457 34.977h-3.14a.593.593 0 0 1-.562-.534v-16.12a.59.59 0 0 1 .606-.579h2.928a.592.592 0 0 1 .57.54v2.107h.058c.764-2.037 2.2-2.987 4.134-2.987 1.966 0 3.194.95 4.078 2.986.76-2.036 2.487-2.986 4.338-2.986 1.316 0 2.756.544 3.635 1.763.994 1.356.791 3.326.791 5.053l-.004 10.174c0 .322-.27.583-.606.583h-3.136a.597.597 0 0 1-.565-.583v-8.543c0-.68.061-2.377-.089-3.022-.234-1.082-.936-1.387-1.846-1.387-.76 0-1.555.508-1.878 1.32-.322.814-.291 2.174-.291 3.088v8.544c0 .322-.27.583-.606.583h-3.136a.594.594 0 0 1-.565-.583l-.005-8.543c0-1.798.296-4.444-1.935-4.444-2.257 0-2.169 2.58-2.169 4.444v8.543a.593.593 0 0 1-.605.583Zm58.05-17.573c4.66 0 7.183 4.003 7.183 9.091 0 4.917-2.788 8.818-7.183 8.818-4.577 0-7.068-4.002-7.068-8.99 0-5.018 2.522-8.919 7.068-8.919Zm.026 3.291c-2.314 0-2.46 3.154-2.46 5.12 0 1.97-.031 6.176 2.434 6.176 2.434 0 2.549-3.393 2.549-5.46 0-1.36-.058-2.986-.468-4.276-.354-1.122-1.056-1.56-2.054-1.56ZM9.711 27.277v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.168 7.656a.656.656 0 0 1-.743.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.058-1.63-.38-2.274-.384-.58-1.117-.818-1.762-.818-1.197 0-2.266.614-2.527 1.887-.053.282-.26.56-.543.574l-3.049-.327c-.256-.057-.538-.265-.468-.658.703-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.529 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.116 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.008-.01Zm79.854.044h-3.127a.597.597 0 0 1-.566-.583l-.004-16.124a.594.594 0 0 1 .605-.526h2.911c.274.014.5.2.561.451v2.465h.057c.88-2.204 2.112-3.256 4.281-3.256 1.41 0 2.783.508 3.666 1.9.822 1.29.822 3.459.822 5.018V34.47c-.035.283-.296.508-.605.508h-3.15c-.287-.022-.525-.234-.556-.508v-8.755c0-1.763.203-4.343-1.966-4.343-.764 0-1.467.513-1.816 1.29-.442.985-.499 1.966-.499 3.053v8.68a.604.604 0 0 1-.614.583Zm-42.307-7.7v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.167 7.656a.656.656 0 0 1-.742.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.057-1.63-.38-2.274-.384-.58-1.117-.818-1.763-.818-1.197 0-2.266.614-2.526 1.887-.053.282-.26.56-.544.574l-3.048-.327c-.256-.057-.539-.265-.468-.658.702-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.528 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.117 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.009-.01Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;Amazon_svg__a&#34;&gt;&lt;path d=&#34;M0 0h102v39H0z&#34; transform=&#34;translate(.198 8.52)&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 99 57&#34; aria-label=&#34;Neftlix&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M14.037 39.775c-.875.155-1.756.246-2.654.339-.622.064-1.251.129-1.892.217L4.743 26.197v14.738c-1.343.141-2.569.33-3.825.522l-.414.064v-27h3.94l5.412 15.314V14.521h4.181v25.254Zm11.077-15.413c.982-.02 1.943-.038 2.667-.038v4.224c-1.845 0-4.008 0-5.565.078v6.272c.725-.047 1.45-.098 2.175-.15 1.718-.122 3.44-.244 5.178-.299v4.068l-11.505.926V14.521h11.505v4.214h-7.343v5.667c.823 0 1.867-.02 2.888-.04Zm15.604-5.618h4.306l.01-.01v-4.213H32.25v4.214h4.306v19.45c1.356-.059 2.759-.059 4.162-.059V18.744Zm11.063 5.366h5.689v4.223h-5.69v9.57h-4.084V14.52h11.61v4.214H51.77v5.384l.01-.01Zm19.64 10.38c-1.773-.113-3.579-.228-5.368-.265V14.52h-4.152v23.684c3.786.078 7.506.312 11.217.556v-4.166c-.562-.033-1.128-.069-1.697-.105Zm5.204 4.553c1.327.078 2.73.166 4.076.322V14.521h-4.076v24.522Zm17.023-11.685 5.277-12.837h-4.547l-2.92 7.091-2.72-7.091h-4.461l4.825 12.68-5.343 12.36c.635.09 1.263.157 1.891.223.854.09 1.708.18 2.578.332l3.037-7.17 2.989 7.804.525.093c1.382.243 2.764.486 4.146.668l-5.276-14.153Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 46 57&#34; aria-label=&#34;Adobe&#34;&gt;&lt;path d=&#34;M16.726 8.02H0v40l16.726-40Zm11.768 0h16.703v40l-16.704-40ZM22.61 22.763l10.645 25.258h-6.984l-3.182-8.042H15.3l7.31-17.216Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 64 57&#34; aria-label=&#34;Salesforce&#34;&gt;&lt;path d=&#34;M41.087 26.676c0 .624-.116 1.115-.346 1.463-.226.344-.569.511-1.047.511-.48 0-.82-.166-1.043-.511-.226-.347-.34-.84-.34-1.463 0-.624.114-1.114.34-1.458.222-.34.564-.506 1.043-.506.478 0 .82.166 1.048.506.229.344.345.834.345 1.458Zm11.799-.598c.051-.347.147-.635.295-.86.223-.341.563-.528 1.041-.528s.794.188 1.021.528c.15.225.216.526.242.86h-2.599ZM24 25.218c-.148.225-.242.513-.294.86h2.598c-.026-.334-.091-.635-.24-.86-.228-.34-.544-.528-1.022-.528-.479 0-.819.187-1.042.528Zm-8.17 3.245c-.142-.113-.162-.142-.21-.215-.072-.112-.109-.272-.109-.474 0-.32.106-.55.325-.706-.002.001.314-.273 1.057-.263.522.007.989.084.989.084v1.657s-.462.1-.984.13c-.741.045-1.07-.213-1.068-.212Z&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M34.35 7.397c-3.122 0-5.945 1.31-7.972 3.423a12.194 12.194 0 0 0-9.708-4.8c-6.743 0-12.21 5.46-12.21 12.194 0 1.723.36 3.363 1.005 4.849A10.618 10.618 0 0 0 .22 32.245c0 5.855 4.697 10.601 10.492 10.601.74 0 1.46-.077 2.156-.225 1.592 4.32 5.74 7.399 10.607 7.399 4.674 0 8.683-2.839 10.405-6.887a9.904 9.904 0 0 0 12.98-4.077c.864.174 1.756.265 2.67.265 7.484 0 13.552-6.12 13.552-13.67S57.013 11.98 49.529 11.98c-1.951 0-3.806.416-5.481 1.165-1.928-3.435-5.549-5.749-9.698-5.749Zm3.331 14.11a3.142 3.142 0 0 0-.36-.086 2.86 2.86 0 0 0-.495-.037c-.659 0-1.178.186-1.543.553-.362.365-.608.921-.732 1.653l-.045.246h-.827s-.1-.003-.122.106l-.135.759c-.01.071.021.117.118.117h.805l-.817 4.56a5.644 5.644 0 0 1-.218.898c-.08.225-.158.395-.255.518a.678.678 0 0 1-.333.257c-.125.042-.27.062-.429.062a1.59 1.59 0 0 1-.291-.032.86.86 0 0 1-.198-.064s-.093-.036-.131.058c-.03.078-.245.668-.27.74-.026.073.01.13.056.147a2.23 2.23 0 0 0 .867.148c.335 0 .64-.048.894-.14.255-.091.477-.252.674-.468.212-.235.345-.48.473-.816.126-.331.234-.743.32-1.223l.821-4.645h1.2s.101.003.122-.107l.136-.757c.009-.073-.022-.118-.12-.118h-1.164l.002-.012.004-.023a4.81 4.81 0 0 1 .186-.787 1.07 1.07 0 0 1 .256-.388.765.765 0 0 1 .305-.19c.115-.038.247-.056.391-.056.11 0 .218.013.3.03.112.024.156.037.186.046.119.035.135 0 .158-.057l.279-.765c.028-.082-.042-.117-.068-.127Zm-28.34 7.464c-.02-.018-.05-.047-.018-.133l.254-.705c.04-.122.133-.082.17-.058l.084.053c.037.024.077.05.129.08a3.05 3.05 0 0 0 1.66.478c.561 0 .909-.297.909-.697v-.021c0-.436-.534-.6-1.153-.791h-.002l-.137-.043c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.003-1.735h.13c.692 0 1.362.2 1.847.495.043.027.086.077.062.146a97.47 97.47 0 0 1-.262.705c-.046.121-.17.04-.17.04a3.718 3.718 0 0 0-1.64-.419c-.499 0-.821.265-.821.625v.023c0 .42.551.6 1.19.807l.111.036c.848.268 1.752.639 1.752 1.66v.021c0 1.104-.801 1.79-2.09 1.79-.634 0-1.239-.1-1.88-.44a8.101 8.101 0 0 0-.076-.042c-.095-.053-.19-.106-.283-.174l-.003-.003-.002-.003-.005-.004Zm18.877 0c-.019-.018-.05-.047-.017-.133l.254-.705c.037-.116.147-.074.17-.058l.043.027c.05.033.098.065.17.106a3.05 3.05 0 0 0 1.66.478c.56 0 .91-.297.91-.697v-.021c0-.436-.535-.6-1.154-.79l-.14-.044c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.004-1.735h.129c.693 0 1.363.2 1.847.495.044.027.087.077.063.146l-.263.705c-.045.121-.17.04-.17.04a3.718 3.718 0 0 0-1.639-.419c-.5 0-.822.265-.822.625v.023c0 .42.552.6 1.19.807l.111.036c.849.268 1.752.639 1.752 1.66v.021c0 1.104-.8 1.79-2.09 1.79-.633 0-1.238-.1-1.88-.44a9.636 9.636 0 0 0-.075-.042 2.675 2.675 0 0 1-.294-.184Zm13.945-3.452a2.59 2.59 0 0 0-.49-.935 2.367 2.367 0 0 0-.826-.629 2.718 2.718 0 0 0-1.153-.23 2.72 2.72 0 0 0-1.155.23 2.38 2.38 0 0 0-.827.629 2.632 2.632 0 0 0-.49.935 4.092 4.092 0 0 0-.157 1.157c0 .412.053.802.157 1.157a2.6 2.6 0 0 0 .491.934c.22.264.498.474.826.624.33.15.718.225 1.155.225.436 0 .824-.076 1.153-.225.329-.15.607-.36.827-.624a2.59 2.59 0 0 0 .49-.934 4.09 4.09 0 0 0 .158-1.157 4.05 4.05 0 0 0-.159-1.157Zm8.703 2.899s.1-.04.137.065l.264.73c.034.09-.044.128-.044.128a4.38 4.38 0 0 1-1.524.272c-.933 0-1.649-.269-2.125-.8-.476-.527-.717-1.25-.717-2.142 0-.413.06-.803.176-1.159a2.67 2.67 0 0 1 .524-.935c.23-.263.523-.474.867-.627a2.928 2.928 0 0 1 1.2-.231c.302 0 .574.018.807.054.25.038.579.127.718.181.026.01.095.045.067.126-.068.196-.123.345-.18.502l-.038.105-.046.13c-.04.11-.126.074-.126.074a3.576 3.576 0 0 0-1.137-.163c-.533 0-.932.178-1.195.525-.264.35-.41.808-.413 1.418-.001.67.165 1.165.463 1.471.296.306.71.461 1.23.461.213 0 .411-.014.591-.042a2.41 2.41 0 0 0 .5-.143Zm5.644-3.102a2.263 2.263 0 0 0-.466-.853c-.235-.252-.464-.429-.692-.527a2.664 2.664 0 0 0-1.044-.212c-.455 0-.867.077-1.202.234a2.393 2.393 0 0 0-.84.64 2.626 2.626 0 0 0-.493.946c-.107.36-.16.75-.16 1.163 0 .42.055.812.166 1.163.11.355.288.668.528.926.239.261.547.465.916.608.366.141.811.215 1.322.214 1.053-.004 1.607-.239 1.835-.365.04-.022.08-.062.03-.175l-.237-.667c-.036-.099-.137-.062-.137-.062l-.028.01-.027.01-.017.007c-.258.098-.635.243-1.424.241-.565 0-.984-.167-1.246-.428-.27-.267-.402-.659-.425-1.212l3.644.003s.096-.001.105-.095l.003-.016a3.912 3.912 0 0 0-.11-1.553Zm-29.647-.853c.149.16.374.508.466.853a3.9 3.9 0 0 1 .111 1.553l-.002.017c-.01.093-.106.094-.106.094l-3.643-.003c.023.553.154.945.424 1.212.262.26.681.427 1.246.428.79.002 1.167-.143 1.424-.241l.034-.013.038-.014s.101-.037.138.062l.237.667c.049.113.01.153-.03.175-.229.126-.783.361-1.835.365-.511 0-.956-.073-1.323-.214a2.393 2.393 0 0 1-.916-.608 2.406 2.406 0 0 1-.528-.925 3.898 3.898 0 0 1-.166-1.164c0-.413.055-.804.16-1.163.106-.36.273-.679.494-.946.221-.267.503-.482.839-.64.335-.157.748-.234 1.203-.234.39 0 .746.085 1.044.212.227.098.456.275.691.527Zm-9.583 1.44a8.065 8.065 0 0 0-.569-.017c-.312 0-.614.04-.897.116a2.34 2.34 0 0 0-.761.353c-.221.158-.4.36-.529.6a1.77 1.77 0 0 0-.194.84c0 .323.056.603.167.832a1.5 1.5 0 0 0 .475.57c.203.148.452.256.743.321.285.066.61.099.964.099.373 0 .746-.03 1.107-.092.357-.061.796-.15.918-.178.12-.028.255-.065.255-.065.09-.022.083-.12.083-.12l-.002-3.331c0-.73-.195-1.273-.579-1.608-.382-.335-.946-.505-1.674-.505-.273 0-.712.038-.976.09 0 0-.796.155-1.123.411 0 0-.072.045-.033.145l.258.693c.032.09.12.06.12.06s.027-.012.06-.03c.7-.382 1.587-.37 1.587-.37.394 0 .697.079.9.235.2.153.3.383.3.868v.154c-.313-.045-.6-.07-.6-.07Zm29.333-2.008a.1.1 0 0 1 .055.131c-.034.1-.212.598-.274.765-.024.063-.063.106-.133.098 0 0-.21-.049-.4-.049-.133 0-.32.017-.49.069a1.118 1.118 0 0 0-.45.27c-.132.13-.24.311-.318.537-.08.228-.121.592-.121.956v2.715a.11.11 0 0 1-.11.111h-.958a.112.112 0 0 1-.11-.11v-5.435c0-.062.043-.111.104-.111h.934c.061 0 .105.049.105.11v.444c.14-.187.39-.352.616-.454.227-.102.482-.18.94-.151.238.015.548.08.61.104Zm-25.314 5.602c.061 0 .105-.049.105-.11v-7.776c0-.06-.044-.11-.105-.11h-.966c-.06 0-.104.05-.104.11v7.776c0 .061.043.11.104.11h.966Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 151 57&#34; aria-label=&#34;Microsoft&#34;&gt;&lt;path d=&#34;m53.302 30.452-.893 2.53h-.075a17.98 17.98 0 0 0-.868-2.48L46.678 18.47H41.99v19.175h3.1V25.813c0-.744 0-1.588-.024-2.63-.025-.52-.074-.918-.1-1.215h.075a11.6 11.6 0 0 0 .447 1.637l5.755 13.99h2.183l5.705-14.114c.124-.322.248-.967.372-1.513h.075a178.288 178.288 0 0 0-.15 3.448V37.57h3.3V18.42h-4.515l-4.911 12.03Zm12.552-6.624h3.225v13.743h-3.225V23.828Zm1.637-5.804c-.546 0-.992.198-1.364.545a1.76 1.76 0 0 0-.57 1.34c0 .52.197.967.57 1.315.372.347.818.52 1.364.52.546 0 1.017-.198 1.364-.52.372-.348.57-.794.57-1.315 0-.521-.198-.967-.57-1.34-.322-.347-.794-.545-1.364-.545Zm13.023 5.68a8.998 8.998 0 0 0-1.81-.198c-1.464 0-2.804.322-3.92.967s-2.01 1.538-2.58 2.655c-.595 1.14-.893 2.455-.893 3.968 0 1.315.298 2.481.868 3.548.57 1.042 1.365 1.885 2.431 2.456 1.017.57 2.208.868 3.548.868 1.538 0 2.852-.323 3.894-.918l.025-.025v-2.977l-.124.1a5.544 5.544 0 0 1-1.563.818c-.57.199-1.091.298-1.538.298-1.29 0-2.307-.372-3.026-1.19-.744-.794-1.116-1.886-1.116-3.25 0-1.414.372-2.53 1.14-3.35.77-.818 1.787-1.24 3.027-1.24 1.042 0 2.109.348 3.076 1.042l.124.1v-3.15l-.025-.026c-.422-.173-.893-.372-1.538-.496Zm10.642-.099c-.794 0-1.538.248-2.183.77-.546.446-.918 1.09-1.24 1.86h-.025v-2.407h-3.225v13.743h3.225v-7.02c0-1.19.248-2.183.794-2.902.546-.745 1.24-1.117 2.084-1.117.297 0 .595.075.967.124.347.1.595.199.769.323l.124.099v-3.225l-.074-.025c-.224-.148-.67-.223-1.216-.223Zm8.781-.074c-2.257 0-4.068.67-5.333 1.984-1.29 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.24 1.24 2.927 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.166-1.265-2.877-1.885-5.01-1.885Zm2.58 10.567c-.595.77-1.538 1.141-2.704 1.141-1.166 0-2.108-.372-2.778-1.19-.67-.77-.992-1.886-.992-3.3 0-1.463.347-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.141 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c-.05 1.488-.323 2.654-.943 3.423Zm11.436-4.564c-1.017-.422-1.662-.744-1.96-1.017-.248-.248-.372-.596-.372-1.042 0-.372.149-.744.521-.992s.794-.373 1.414-.373c.546 0 1.116.1 1.662.249.546.148 1.042.372 1.439.67l.124.099V24.1l-.075-.025a8.95 8.95 0 0 0-1.463-.421 9.943 9.943 0 0 0-1.588-.15c-1.538 0-2.803.373-3.795 1.192-.992.768-1.464 1.81-1.464 3.026 0 .645.1 1.215.323 1.687.223.471.546.918.992 1.29.447.347 1.092.744 1.985 1.116.744.322 1.314.57 1.662.769.347.198.57.422.744.595.124.199.198.447.198.77 0 .917-.694 1.364-2.108 1.364-.546 0-1.117-.1-1.786-.323a6.898 6.898 0 0 1-1.811-.918l-.124-.099v3.15l.074.025c.472.224 1.042.372 1.737.546.694.124 1.314.223 1.86.223 1.662 0 3.026-.372 3.994-1.19.992-.794 1.513-1.811 1.513-3.126 0-.918-.248-1.736-.794-2.357a10.048 10.048 0 0 0-2.902-1.711Zm12.205-6.003c-2.258 0-4.069.67-5.334 1.984-1.265 1.315-1.91 3.126-1.91 5.408 0 2.133.645 3.87 1.885 5.135 1.241 1.24 2.928 1.885 5.036 1.885 2.208 0 3.969-.67 5.234-2.01 1.29-1.339 1.91-3.125 1.91-5.333 0-2.183-.595-3.919-1.811-5.184-1.165-1.265-2.877-1.885-5.01-1.885Zm2.555 10.567c-.596.77-1.538 1.141-2.704 1.141-1.191 0-2.109-.372-2.779-1.19-.669-.77-.992-1.886-.992-3.3 0-1.463.348-2.58.992-3.373.67-.794 1.588-1.191 2.754-1.191 1.116 0 2.034.372 2.679 1.141s.992 1.885.992 3.349c0 1.488-.322 2.654-.942 3.423Zm21.507-7.615v-2.655h-3.25V19.76l-.099.025-3.076.918-.075.025v3.1h-4.862v-1.736c0-.794.199-1.414.546-1.811.347-.397.868-.595 1.513-.595.447 0 .918.099 1.439.322l.124.075V17.28l-.074-.025c-.447-.15-1.042-.248-1.811-.248a5.81 5.81 0 0 0-2.58.595 4.298 4.298 0 0 0-1.761 1.761c-.422.744-.645 1.588-.645 2.555v1.91h-2.258v2.63h2.258V37.57h3.249V26.483h4.862v7.07c0 2.902 1.365 4.365 4.093 4.365.447 0 .918-.074 1.365-.149.471-.099.818-.223 1.017-.322l.025-.025v-2.654l-.124.1a2.103 2.103 0 0 1-.67.297 2.288 2.288 0 0 1-.645.099c-.645 0-1.092-.149-1.414-.52-.298-.348-.447-.919-.447-1.762v-6.5h3.3ZM.415 12.02H15.62v15.207H.415V12.021Zm16.794 0h15.206v15.207H17.21V12.021ZM.415 28.814H15.62v15.207H.415V28.814Zm16.794 0h15.206v15.207H17.21V28.814Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 100 57&#34; aria-label=&#34;Disney&#34;&gt;&lt;path d=&#34;M40.792 16.699s.368-.574.696-1.024c.573-.778 1.638-1.883 2.416-2.58.245-.204.532-.45.532-.45s-.45.041-.696.082c-.614.123-1.474.696-1.924 1.065-.737.614-1.515 1.637-1.188 2.538.082.205.164.369.164.369Zm4.053 1.105a7.625 7.625 0 0 0 3.235-.983c.982-.532 2.415-1.637 2.293-2.907a1.044 1.044 0 0 0-.656-.86c-.45-.204-.655-.163-1.228 0-.41.124-.573.205-.982.41-1.147.655-2.744 2.047-3.603 3.194-.205.245-.41.573-.574.777-.122.123-.163.246-.163.287.04.123 1.228.123 1.678.082Zm-2.907 2.129c-.122.123-.245.41-.368.655-.082.123-.205.287-.287.328-.286.204-.532.245-.86-.041a1.963 1.963 0 0 1-.654-1.433c0-.246.04-.492 0-.696-.082-.328-.41-.696-.574-.983-.204-.368-.368-1.024-.41-1.474-.081-1.31.615-2.538 1.516-3.52.9-.983 2.129-1.802 3.398-2.335 1.228-.532 3.03-.86 4.38-.409.451.164 1.065.532 1.352.9.082.083.123.164.205.205.04.041.204.041.327.082.45.082 1.065.41 1.31.614.491.45.778.86.9 1.474.247 1.229-.45 2.58-1.268 3.399-1.392 1.392-2.743 2.415-4.504 3.07-.778.287-1.965.573-2.866.492-.286-.041-.573-.082-.819-.123-.123 0-.614-.123-.696-.164l-.082-.041Zm1.556 2.743c.041 0 .123.041.205.041.614.246.86.819 1.023 1.433.369 1.474.492 4.667.574 5.937.04.941.081 1.883.123 2.824.04.778.081 1.843-.082 2.58-.041.286-.246.573-.492.737-.286.204-.941.204-1.31.123-.9-.205-1.187-.778-1.31-1.679-.287-2.129-.164-6.305.04-8.065.042-.574.288-2.457.574-3.235.041-.246.287-.778.655-.696Zm-27.84 3.194s-1.351.081-2.252.204c-1.188.123-3.357.491-4.627.942-.368.123-1.146.45-1.228.86-.082.41.164.737.45 1.064.164.205 1.065 1.065 1.351 1.27 1.065.9 3.276 2.292 4.873 2.947.532.246 1.473.573 1.473.573s-.081-2.62-.04-5.158c-.041-1.351 0-2.703 0-2.703Zm24.524 1.023c.082.696-.123 2.006-.123 2.21-.04.41-.368 1.311-.41 1.434-.245.573-.49 1.023-.736 1.474-.45.778-1.474 2.047-2.088 2.58-2.293 2.005-5.855 3.11-8.926 3.48-2.088.245-4.462.204-6.673-.206a31.02 31.02 0 0 1-1.884-.409s0 .45-.04.778c0 .123-.123.532-.205.655-.164.328-.41.491-.82.573-.45.082-.94.123-1.391-.082-.696-.286-.942-.941-1.065-1.72-.082-.613-.204-1.637-.204-1.637s-.533-.246-.942-.45c-1.351-.655-2.62-1.474-3.726-2.293-.327-.246-1.637-1.351-1.924-1.597-.819-.778-1.556-1.556-2.13-2.538-.45-.778-.572-1.474-.245-2.293.45-1.146 2.088-2.006 3.235-2.497.819-.369 3.398-1.188 4.462-1.351.492-.082 1.27-.205 1.351-.246l.041-.041c.041-.041.082-1.187.041-1.597 0-.41.287-3.07.41-3.644.04-.327.286-1.473.532-1.801.164-.205.41-.205.655-.04 1.228.777 1.597 3.397 1.679 4.748.04.82.082 2.047.082 2.047s1.392-.04 2.252 0c.818.041 1.76.164 2.62.287 1.105.164 3.275.655 4.544 1.27 1.024.531 1.966 1.391 2.293 2.333.287.86.246 1.433-.205 2.21-.49.86-1.433 1.516-2.374 1.556-.287 0-1.351-.122-1.679-.368a.315.315 0 0 1-.04-.41c.04-.04.531-.286.818-.45.164-.082.287-.163.369-.286.245-.205.45-.45.45-.737-.041-.369-.41-.573-.778-.737-1.72-.655-5.077-1.229-6.756-1.351-.655-.041-1.555-.082-1.555-.082l.286 9.13s.737.164 1.351.245c.328.041 1.802.164 2.17.205 2.948.082 6.183-.164 8.885-1.474 1.187-.573 2.252-1.228 3.07-2.17 1.065-1.228 1.638-2.947 1.515-4.708-.163-1.924-1.515-4.217-2.62-5.609-2.866-3.685-7.779-6.714-12.119-8.516-4.422-1.801-8.802-2.866-13.47-3.03-1.228-.04-3.848 0-5.159.369-.204.04-.368.123-.573.164-.123.04-.368.122-.41.163l-.081.082.164.082c.123.082.737.082 1.023.164.287.04.573.205.655.41.123.204.123.327 0 .49-.286.37-1.433.287-1.924.246-.532-.082-1.146-.245-1.27-.696-.122-.532.124-1.064.37-1.555.532-.983 1.35-1.474 2.497-1.802 1.637-.45 3.685-.778 5.24-.819 3.521-.123 6.797.492 10.195 1.515 1.924.573 4.504 1.556 6.346 2.457a50.267 50.267 0 0 1 4.626 2.62c.369.246 2.539 1.842 2.907 2.129.696.573 1.638 1.392 2.293 2.088 1.31 1.27 2.907 3.234 3.685 4.79.205.369.328.737.573 1.187.082.164.45 1.024.491 1.31.041.246.164.615.164.656.041.04.205.819.205 1.105Zm15.067.655h.122c1.065.164 2.13.328 2.907.696.737.328 1.188.737 1.597 1.474.614 1.146.655 2.702.082 3.89-.41.9-1.31 1.637-2.13 2.047-.859.409-1.678.614-2.66.736-1.679.205-3.521-.163-5.036-.9-.9-.45-2.006-1.188-2.539-2.17-.409-.696-.409-1.638.082-2.334.778-1.064 2.457-1.31 3.767-1.269.983.041 2.702.328 3.644.655.245.082 1.187.45 1.35.614.124.123.206.287.124.45-.205.656-1.76.983-2.211 1.065-1.228.205-1.843-.287-3.194-.819-.327-.123-.777-.286-1.146-.327-.614-.041-1.392.122-1.474.778-.04.368.369.696.655.818.737.328 1.351.45 2.047.45 2.13.042 4.545-.327 6.305-1.555.246-.164.492-.41.492-.737 0-.04-.041-.368-.164-.41h-.041c-.041 0-.123-.122-.164-.204-.123-.164-.614-.369-.737-.41-1.187-.49-3.357-.736-4.503-.818-1.188-.082-3.03-.246-3.48-.328-.45-.082-.942-.164-1.352-.327a1.608 1.608 0 0 1-.9-1.024c-.205-.819.04-1.801.491-2.415 1.187-1.68 3.93-2.334 5.977-2.58 1.966-.245 5.2-.245 7.125.778.286.164.45.328.409.614-.123.614-.573.983-1.146 1.147-.574.163-1.761.245-2.293.286-2.334.123-5.2.082-7.41.655-.165.041-.492.123-.574.246-.368.368.655.491.86.532.082 0 .082 0 .123.041l4.995.655Zm7.328 8.803c-.941-.369-1.146-1.884-1.187-2.662-.164-2.538.532-6.018 1.351-8.393.246-.655.573-1.76 1.351-1.72.532.042.9.451 1.187.86.737 1.065 1.72 2.457 2.375 3.44.737 1.105 1.433 2.21 2.088 3.234.082.123.164.246.246.328.123.082.245.122.286 0 .041-.041-.04-1.31-.04-1.556-.041-.41-.083-.737-.123-1.106-.123-1.023-.45-2.456-.696-3.439-.287-1.064-.615-2.21-.86-3.275-.082-.328-.164-.696-.164-1.024 0-.45.287-.737.778-.573.982.328 2.252 2.416 2.62 3.153.123.245.614 1.474.737 1.842.41 1.187.655 2.334.737 3.644.123 1.27 0 3.111-.532 4.38-.205.451-.614 1.065-.942 1.393-.532.491-1.596.86-2.292.45-.778-.45-2.089-2.702-2.334-3.111-.737-1.31-2.047-3.89-2.252-4.177-.041-.082-.082-.122-.205-.163-.082-.041-.123.122-.123.245-.122.737-.204 4.258-.204 4.381-.041.573-.041 2.047-.205 2.743-.123.45-.205.86-.655 1.065-.328.245-.573.163-.942.04Zm13.102-.246a1.574 1.574 0 0 1-.369-.368s-.368-.533-.41-.697c-.04-.122-.122-.245-.163-.327-.328-.819-.287-1.597-.123-2.457.164-.818.328-.818.737-1.924.041-.04.041-.123.041-.164 0-.163-.246-1.187-.246-1.473 0-.492.369-.86 1.024-.901h.164c.245-.082.41-.573.573-.942.205-.573.491-1.392.491-1.392s-.819-.205-1.269-.368c-.491-.205-.86-.41-1.064-.86-.246-.532-.082-.819.45-.983.205-.082 1.801-.368 2.293-.45.614-.082 1.228-.164 1.801-.246.532-.082 2.907-.327 3.644-.327 1.146.04 1.883.491 2.58 1.474.368.532.614 1.146.081 1.474-.86.49-3.562.532-4.053.573h-1.883l-.574 1.842s1.966-.04 3.03-.04c.287 0 .532 0 .696.04.573.123.737.573.778 1.187.041.737-.123 1.065-.696 1.147-.287.04-3.644.082-4.094.123l-.573.081s-.246.615-.45 1.27c-.205.655-.41 1.35-.41 1.35h.327c.246 0 .492-.04.656-.081 1.023-.205 2.538-.41 3.807-.614.655-.123 1.024-.164 1.351.286.287.41.45.737.492 1.188 0 .45-.328.737-.737 1.064-1.31 1.024-3.562 2.088-5.241 2.293-.778.082-.983 0-1.638-.164-.123-.04-.614-.246-.614-.287-.082-.081-.327-.245-.41-.327Zm21.167-9.294c-.86.737-1.965 2.211-2.498 2.948-.696 1.023-1.392 2.17-2.006 3.07-.123.205-.532.942-.532.942.04.041.45.041.86-.04.9-.165 2.129-.779 2.825-1.31a5.941 5.941 0 0 0 2.047-3.194c.164-.573.205-1.843-.205-2.375-.123-.082-.327-.164-.491-.04Zm-6.879 10.604s-.286.819-.49 1.433c-.328 1.105-1.106 4.012-1.27 4.913-.246 1.351-1.024 4.872-1.065 4.954-.04.123-.081.123-.204.205-.328.163-.45.122-.819-.082-.491-.246-.9-.532-1.27-1.024-.736-.941-.572-2.743-.409-3.807.492-3.685 1.024-5.323 2.416-9.008.04-.081.04-.081 0-.122-.45-.942-.655-2.047-.655-2.99 0-2.906 1.678-5.73 3.52-8.024.124-.163 1.065-1.269 1.475-1.228.41 0 .491.491.41.9-.206 1.352-1.147 2.703-1.802 3.808-.737 1.27-.86 1.76-1.228 2.907-.041.164-.205 1.024-.205 1.147 0 .327.082.696.082.696s1.187-1.638 1.965-2.662c.41-.573.737-.941 1.064-1.31.369-.41 1.72-1.842 2.13-2.21.818-.778 1.187-1.106 2.087-1.597.696-.369 1.352-.45 2.048 0 1.105.737 1.596 2.252 1.72 3.48.163 1.474-.165 3.152-.82 4.421-.778 1.515-1.842 2.62-3.275 3.562-1.474.983-3.194 1.638-4.913 1.597-.205.041-.492.041-.492.041Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 103 57&#34; aria-label=&#34;Amazon&#34;&gt;&lt;g clip-path=&#34;url(#Amazon_svg__a)&#34;&gt;&lt;path d=&#34;M63.414 41.166c-5.897 4.347-14.445 6.666-21.805 6.666-10.319 0-19.609-3.817-26.637-10.165-.552-.5-.057-1.18.605-.79 7.585 4.412 16.963 7.067 26.65 7.067 6.534 0 13.722-1.352 20.33-4.157.998-.424 1.833.654.857 1.379Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M65.866 38.36c-.75-.962-4.983-.454-6.882-.229-.579.07-.667-.433-.146-.795 3.37-2.372 8.901-1.688 9.546-.892.645.8-.168 6.343-3.335 8.99-.486.406-.95.19-.733-.35.71-1.776 2.305-5.756 1.55-6.723Zm-6.75-17.77v-2.307c0-.349.265-.583.583-.583h10.324c.331 0 .597.239.597.583v1.975c-.005.331-.283.764-.778 1.449l-5.35 7.638c1.988-.049 4.087.247 5.889 1.263.406.23.517.566.548.897v2.46c0 .336-.371.73-.76.526-3.176-1.665-7.395-1.846-10.907.018-.358.194-.733-.195-.733-.53v-2.337c0-.376.004-1.016.38-1.586l6.197-8.888h-5.393c-.332 0-.597-.234-.597-.579ZM21.457 34.977h-3.14a.593.593 0 0 1-.562-.534v-16.12a.59.59 0 0 1 .606-.579h2.928a.592.592 0 0 1 .57.54v2.107h.058c.764-2.037 2.2-2.987 4.134-2.987 1.966 0 3.194.95 4.078 2.986.76-2.036 2.487-2.986 4.338-2.986 1.316 0 2.756.544 3.635 1.763.994 1.356.791 3.326.791 5.053l-.004 10.174c0 .322-.27.583-.606.583h-3.136a.597.597 0 0 1-.565-.583v-8.543c0-.68.061-2.377-.089-3.022-.234-1.082-.936-1.387-1.846-1.387-.76 0-1.555.508-1.878 1.32-.322.814-.291 2.174-.291 3.088v8.544c0 .322-.27.583-.606.583h-3.136a.594.594 0 0 1-.565-.583l-.005-8.543c0-1.798.296-4.444-1.935-4.444-2.257 0-2.169 2.58-2.169 4.444v8.543a.593.593 0 0 1-.605.583Zm58.05-17.573c4.66 0 7.183 4.003 7.183 9.091 0 4.917-2.788 8.818-7.183 8.818-4.577 0-7.068-4.002-7.068-8.99 0-5.018 2.522-8.919 7.068-8.919Zm.026 3.291c-2.314 0-2.46 3.154-2.46 5.12 0 1.97-.031 6.176 2.434 6.176 2.434 0 2.549-3.393 2.549-5.46 0-1.36-.058-2.986-.468-4.276-.354-1.122-1.056-1.56-2.054-1.56ZM9.711 27.277v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.168 7.656a.656.656 0 0 1-.743.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.058-1.63-.38-2.274-.384-.58-1.117-.818-1.762-.818-1.197 0-2.266.614-2.527 1.887-.053.282-.26.56-.543.574l-3.049-.327c-.256-.057-.538-.265-.468-.658.703-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.529 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.116 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.008-.01Zm79.854.044h-3.127a.597.597 0 0 1-.566-.583l-.004-16.124a.594.594 0 0 1 .605-.526h2.911c.274.014.5.2.561.451v2.465h.057c.88-2.204 2.112-3.256 4.281-3.256 1.41 0 2.783.508 3.666 1.9.822 1.29.822 3.459.822 5.018V34.47c-.035.283-.296.508-.605.508h-3.15c-.287-.022-.525-.234-.556-.508v-8.755c0-1.763.203-4.343-1.966-4.343-.764 0-1.467.513-1.816 1.29-.442.985-.499 1.966-.499 3.053v8.68a.604.604 0 0 1-.614.583Zm-42.307-7.7v-.68c-2.27 0-4.67.486-4.67 3.163 0 1.356.703 2.275 1.91 2.275.883 0 1.673-.543 2.173-1.427.618-1.087.587-2.107.587-3.33Zm3.167 7.656a.656.656 0 0 1-.742.075c-1.042-.866-1.228-1.268-1.802-2.094-1.723 1.758-2.942 2.284-5.177 2.284-2.642 0-4.7-1.63-4.7-4.895 0-2.549 1.382-4.285 3.348-5.133 1.705-.75 4.086-.883 5.906-1.091v-.407c0-.746.057-1.63-.38-2.274-.384-.58-1.117-.818-1.763-.818-1.197 0-2.266.614-2.526 1.887-.053.282-.26.56-.544.574l-3.048-.327c-.256-.057-.539-.265-.468-.658.702-3.693 4.038-4.806 7.024-4.806 1.528 0 3.525.406 4.731 1.563 1.528 1.427 1.383 3.331 1.383 5.403v4.894c0 1.471.61 2.117 1.184 2.912.203.282.247.623-.01.834a133.4 133.4 0 0 0-2.407 2.086l-.009-.01Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;Amazon_svg__a&#34;&gt;&lt;path d=&#34;M0 0h102v39H0z&#34; transform=&#34;translate(.198 8.52)&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 99 57&#34; aria-label=&#34;Neftlix&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M14.037 39.775c-.875.155-1.756.246-2.654.339-.622.064-1.251.129-1.892.217L4.743 26.197v14.738c-1.343.141-2.569.33-3.825.522l-.414.064v-27h3.94l5.412 15.314V14.521h4.181v25.254Zm11.077-15.413c.982-.02 1.943-.038 2.667-.038v4.224c-1.845 0-4.008 0-5.565.078v6.272c.725-.047 1.45-.098 2.175-.15 1.718-.122 3.44-.244 5.178-.299v4.068l-11.505.926V14.521h11.505v4.214h-7.343v5.667c.823 0 1.867-.02 2.888-.04Zm15.604-5.618h4.306l.01-.01v-4.213H32.25v4.214h4.306v19.45c1.356-.059 2.759-.059 4.162-.059V18.744Zm11.063 5.366h5.689v4.223h-5.69v9.57h-4.084V14.52h11.61v4.214H51.77v5.384l.01-.01Zm19.64 10.38c-1.773-.113-3.579-.228-5.368-.265V14.52h-4.152v23.684c3.786.078 7.506.312 11.217.556v-4.166c-.562-.033-1.128-.069-1.697-.105Zm5.204 4.553c1.327.078 2.73.166 4.076.322V14.521h-4.076v24.522Zm17.023-11.685 5.277-12.837h-4.547l-2.92 7.091-2.72-7.091h-4.461l4.825 12.68-5.343 12.36c.635.09 1.263.157 1.891.223.854.09 1.708.18 2.578.332l3.037-7.17 2.989 7.804.525.093c1.382.243 2.764.486 4.146.668l-5.276-14.153Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 46 57&#34; aria-label=&#34;Adobe&#34;&gt;&lt;path d=&#34;M16.726 8.02H0v40l16.726-40Zm11.768 0h16.703v40l-16.704-40ZM22.61 22.763l10.645 25.258h-6.984l-3.182-8.042H15.3l7.31-17.216Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 64 57&#34; aria-label=&#34;Salesforce&#34;&gt;&lt;path d=&#34;M41.087 26.676c0 .624-.116 1.115-.346 1.463-.226.344-.569.511-1.047.511-.48 0-.82-.166-1.043-.511-.226-.347-.34-.84-.34-1.463 0-.624.114-1.114.34-1.458.222-.34.564-.506 1.043-.506.478 0 .82.166 1.048.506.229.344.345.834.345 1.458Zm11.799-.598c.051-.347.147-.635.295-.86.223-.341.563-.528 1.041-.528s.794.188 1.021.528c.15.225.216.526.242.86h-2.599ZM24 25.218c-.148.225-.242.513-.294.86h2.598c-.026-.334-.091-.635-.24-.86-.228-.34-.544-.528-1.022-.528-.479 0-.819.187-1.042.528Zm-8.17 3.245c-.142-.113-.162-.142-.21-.215-.072-.112-.109-.272-.109-.474 0-.32.106-.55.325-.706-.002.001.314-.273 1.057-.263.522.007.989.084.989.084v1.657s-.462.1-.984.13c-.741.045-1.07-.213-1.068-.212Z&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M34.35 7.397c-3.122 0-5.945 1.31-7.972 3.423a12.194 12.194 0 0 0-9.708-4.8c-6.743 0-12.21 5.46-12.21 12.194 0 1.723.36 3.363 1.005 4.849A10.618 10.618 0 0 0 .22 32.245c0 5.855 4.697 10.601 10.492 10.601.74 0 1.46-.077 2.156-.225 1.592 4.32 5.74 7.399 10.607 7.399 4.674 0 8.683-2.839 10.405-6.887a9.904 9.904 0 0 0 12.98-4.077c.864.174 1.756.265 2.67.265 7.484 0 13.552-6.12 13.552-13.67S57.013 11.98 49.529 11.98c-1.951 0-3.806.416-5.481 1.165-1.928-3.435-5.549-5.749-9.698-5.749Zm3.331 14.11a3.142 3.142 0 0 0-.36-.086 2.86 2.86 0 0 0-.495-.037c-.659 0-1.178.186-1.543.553-.362.365-.608.921-.732 1.653l-.045.246h-.827s-.1-.003-.122.106l-.135.759c-.01.071.021.117.118.117h.805l-.817 4.56a5.644 5.644 0 0 1-.218.898c-.08.225-.158.395-.255.518a.678.678 0 0 1-.333.257c-.125.042-.27.062-.429.062a1.59 1.59 0 0 1-.291-.032.86.86 0 0 1-.198-.064s-.093-.036-.131.058c-.03.078-.245.668-.27.74-.026.073.01.13.056.147a2.23 2.23 0 0 0 .867.148c.335 0 .64-.048.894-.14.255-.091.477-.252.674-.468.212-.235.345-.48.473-.816.126-.331.234-.743.32-1.223l.821-4.645h1.2s.101.003.122-.107l.136-.757c.009-.073-.022-.118-.12-.118h-1.164l.002-.012.004-.023a4.81 4.81 0 0 1 .186-.787 1.07 1.07 0 0 1 .256-.388.765.765 0 0 1 .305-.19c.115-.038.247-.056.391-.056.11 0 .218.013.3.03.112.024.156.037.186.046.119.035.135 0 .158-.057l.279-.765c.028-.082-.042-.117-.068-.127Zm-28.34 7.464c-.02-.018-.05-.047-.018-.133l.254-.705c.04-.122.133-.082.17-.058l.084.053c.037.024.077.05.129.08a3.05 3.05 0 0 0 1.66.478c.561 0 .909-.297.909-.697v-.021c0-.436-.534-.6-1.153-.791h-.002l-.137-.043c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.003-1.735h.13c.692 0 1.362.2 1.847.495.043.027.086.077.062.146a97.47 97.47 0 0 1-.262.705c-.046.121-.17.04-.17.04a3.718 3.718 0 0 0-1.64-.419c-.499 0-.821.265-.821.625v.023c0 .42.551.6 1.19.807l.111.036c.848.268 1.752.639 1.752 1.66v.021c0 1.104-.801 1.79-2.09 1.79-.634 0-1.239-.1-1.88-.44a8.101 8.101 0 0 0-.076-.042c-.095-.053-.19-.106-.283-.174l-.003-.003-.002-.003-.005-.004Zm18.877 0c-.019-.018-.05-.047-.017-.133l.254-.705c.037-.116.147-.074.17-.058l.043.027c.05.033.098.065.17.106a3.05 3.05 0 0 0 1.66.478c.56 0 .91-.297.91-.697v-.021c0-.436-.535-.6-1.154-.79l-.14-.044c-.852-.243-1.76-.593-1.76-1.67v-.021c0-1.022.823-1.735 2.004-1.735h.129c.693 0 1.363.2 1.847.495.044.027.087.077.063.146l-.263.705c-.045.121-.17.04-.17.04a3.718 3.718 0 0 0-1.639-.419c-.5 0-.822.265-.822.625v.023c0 .42.552.6 1.19.807l.111.036c.849.268 1.752.639 1.752 1.66v.021c0 1.104-.8 1.79-2.09 1.79-.633 0-1.238-.1-1.88-.44a9.636 9.636 0 0 0-.075-.042 2.675 2.675 0 0 1-.294-.184Zm13.945-3.452a2.59 2.59 0 0 0-.49-.935 2.367 2.367 0 0 0-.826-.629 2.718 2.718 0 0 0-1.153-.23 2.72 2.72 0 0 0-1.155.23 2.38 2.38 0 0 0-.827.629 2.632 2.632 0 0 0-.49.935 4.092 4.092 0 0 0-.157 1.157c0 .412.053.802.157 1.157a2.6 2.6 0 0 0 .491.934c.22.264.498.474.826.624.33.15.718.225 1.155.225.436 0 .824-.076 1.153-.225.329-.15.607-.36.827-.624a2.59 2.59 0 0 0 .49-.934 4.09 4.09 0 0 0 .158-1.157 4.05 4.05 0 0 0-.159-1.157Zm8.703 2.899s.1-.04.137.065l.264.73c.034.09-.044.128-.044.128a4.38 4.38 0 0 1-1.524.272c-.933 0-1.649-.269-2.125-.8-.476-.527-.717-1.25-.717-2.142 0-.413.06-.803.176-1.159a2.67 2.67 0 0 1 .524-.935c.23-.263.523-.474.867-.627a2.928 2.928 0 0 1 1.2-.231c.302 0 .574.018.807.054.25.038.579.127.718.181.026.01.095.045.067.126-.068.196-.123.345-.18.502l-.038.105-.046.13c-.04.11-.126.074-.126.074a3.576 3.576 0 0 0-1.137-.163c-.533 0-.932.178-1.195.525-.264.35-.41.808-.413 1.418-.001.67.165 1.165.463 1.471.296.306.71.461 1.23.461.213 0 .411-.014.591-.042a2.41 2.41 0 0 0 .5-.143Zm5.644-3.102a2.263 2.263 0 0 0-.466-.853c-.235-.252-.464-.429-.692-.527a2.664 2.664 0 0 0-1.044-.212c-.455 0-.867.077-1.202.234a2.393 2.393 0 0 0-.84.64 2.626 2.626 0 0 0-.493.946c-.107.36-.16.75-.16 1.163 0 .42.055.812.166 1.163.11.355.288.668.528.926.239.261.547.465.916.608.366.141.811.215 1.322.214 1.053-.004 1.607-.239 1.835-.365.04-.022.08-.062.03-.175l-.237-.667c-.036-.099-.137-.062-.137-.062l-.028.01-.027.01-.017.007c-.258.098-.635.243-1.424.241-.565 0-.984-.167-1.246-.428-.27-.267-.402-.659-.425-1.212l3.644.003s.096-.001.105-.095l.003-.016a3.912 3.912 0 0 0-.11-1.553Zm-29.647-.853c.149.16.374.508.466.853a3.9 3.9 0 0 1 .111 1.553l-.002.017c-.01.093-.106.094-.106.094l-3.643-.003c.023.553.154.945.424 1.212.262.26.681.427 1.246.428.79.002 1.167-.143 1.424-.241l.034-.013.038-.014s.101-.037.138.062l.237.667c.049.113.01.153-.03.175-.229.126-.783.361-1.835.365-.511 0-.956-.073-1.323-.214a2.393 2.393 0 0 1-.916-.608 2.406 2.406 0 0 1-.528-.925 3.898 3.898 0 0 1-.166-1.164c0-.413.055-.804.16-1.163.106-.36.273-.679.494-.946.221-.267.503-.482.839-.64.335-.157.748-.234 1.203-.234.39 0 .746.085 1.044.212.227.098.456.275.691.527Zm-9.583 1.44a8.065 8.065 0 0 0-.569-.017c-.312 0-.614.04-.897.116a2.34 2.34 0 0 0-.761.353c-.221.158-.4.36-.529.6a1.77 1.77 0 0 0-.194.84c0 .323.056.603.167.832a1.5 1.5 0 0 0 .475.57c.203.148.452.256.743.321.285.066.61.099.964.099.373 0 .746-.03 1.107-.092.357-.061.796-.15.918-.178.12-.028.255-.065.255-.065.09-.022.083-.12.083-.12l-.002-3.331c0-.73-.195-1.273-.579-1.608-.382-.335-.946-.505-1.674-.505-.273 0-.712.038-.976.09 0 0-.796.155-1.123.411 0 0-.072.045-.033.145l.258.693c.032.09.12.06.12.06s.027-.012.06-.03c.7-.382 1.587-.37 1.587-.37.394 0 .697.079.9.235.2.153.3.383.3.868v.154c-.313-.045-.6-.07-.6-.07Zm29.333-2.008a.1.1 0 0 1 .055.131c-.034.1-.212.598-.274.765-.024.063-.063.106-.133.098 0 0-.21-.049-.4-.049-.133 0-.32.017-.49.069a1.118 1.118 0 0 0-.45.27c-.132.13-.24.311-.318.537-.08.228-.121.592-.121.956v2.715a.11.11 0 0 1-.11.111h-.958a.112.112 0 0 1-.11-.11v-5.435c0-.062.043-.111.104-.111h.934c.061 0 .105.049.105.11v.444c.14-.187.39-.352.616-.454.227-.102.482-.18.94-.151.238.015.548.08.61.104Zm-25.314 5.602c.061 0 .105-.049.105-.11v-7.776c0-.06-.044-.11-.105-.11h-.966c-.06 0-.104.05-.104.11v7.776c0 .061.043.11.104.11h.966Z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;scroll-section_scrollSection__sfz4L&#34; data-scrollsection=&#34;container&#34;&gt;&lt;div class=&#34;container-two-column_containerTwoColumns__BHIh5 container-two-column_breakAbove_md__eTuFf mbe-128 md-mbe-192 YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;div class=&#34;md-pbs-96&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;container-two-column_textContainerInner__zC5fl container-two-column_lg__QePrC&#34;&gt;&lt;div class=&#34;product-scenes-section_sceneContainer__jQq3k&#34;&gt;&lt;div class=&#34;product-scenes-section_fullHeight__8_Ujr&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA product-scenes-section_preheader__DUAuK mbe-24&#34;&gt;Clear your mind&lt;/p&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF liIOVrso64nx4V5gWj4A mWJbs2TuAw9nS7uYCe19 mbe-24&#34;&gt;The fastest way to get tasks out of your head.&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq product-scenes-section_description__sW_Mc&#34;&gt;Type just about anything into the task field and Todoist’s one-of-its-kind natural language recognition will instantly fill your to-do list.&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg OuHDHN6jISIW7I2iDwgs&#34;&gt;&lt;div class=&#34;mbs-32&#34;&gt;&lt;div class=&#34;product-ui-context_container__G4mMi&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIFrame__e7Ykc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;quick-add-sequence_sequenceContainer__mbCx7&#34;&gt;&lt;div class=&#34;product-ui-frame-background_framebackground__ykUlp quick-add-sequence_frameBackground__TuGRX product-ui-frame-background_antique__PoHwY&#34;&gt;&lt;img alt=&#34;&#34; loading=&#34;lazy&#34; width=&#34;590&#34; height=&#34;472&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 590px) 100vw, 590px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-overlay_overlay__p3EBz quick-add-sequence_overlay__O3SGJ&#34;&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa JsQfzfVodByEpTHhXMTC&#34;&gt;Today&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_quickAddContainer__jCNrC quick-add-sequence_quickAdd__HndeA&#34; data-productui=&#34;quickadd&#34;&gt;&lt;div class=&#34;quick-add_details__9MGr9&#34;&gt;&lt;div class=&#34;quick-add_inputFields__Ejr6b&#34;&gt;&lt;div class=&#34;quick-add_taskContainer__YeL65&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa DLF4ip7391hTQFmMhXrA&#34;&gt;&lt;span id=&#34;quickAddPlaceholder&#34; class=&#34;quick-add_intentContainer__QNl8d quick-add_placeholder__da9_w&#34; data-productui=&#34;placeholder&#34;&gt;Task name&lt;/span&gt; &lt;span id=&#34;taskText&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt; &lt;span id=&#34;taskTime&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt; &lt;span id=&#34;taskPriority&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_attributesContainer__PYBL9&#34;&gt;&lt;div class=&#34;quick-add_attributeContainer__c3TJR&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M6 8a.75.75 0 0 1 .75-.75h10.5a.75.75 0 0 1 0 1.5H6.75A.75.75 0 0 1 6 8Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6Zm3-1.5A1.5 1.5 0 0 0 4.5 6v12A1.5 1.5 0 0 0 6 19.5h12a1.5 1.5 0 0 0 1.5-1.5V6A1.5 1.5 0 0 0 18 4.5H6Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M17.25 16.125a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Due date&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M3 4.5a.75.75 0 0 1 .415-.67C4.537 3.267 6.144 3 8.25 3c1.352 0 2.228.202 3.987.789 1.616.538 2.365.711 3.513.711 1.894 0 3.287-.232 4.165-.67A.75.75 0 0 1 21 4.5v9.75a.75.75 0 0 1-.415.671c-1.122.562-2.729.83-4.835.83-1.352 0-2.228-.203-3.987-.79-1.616-.538-2.365-.71-3.513-.71-1.619 0-2.872.169-3.75.492v5.507a.75.75 0 1 1-1.5 0V4.5Zm1.5 8.668V4.993C5.378 4.67 6.631 4.5 8.25 4.5c1.148 0 1.897.173 3.513.712 1.759.586 2.635.788 3.987.788 1.502 0 2.75-.136 3.75-.418v8.175c-.878.324-2.131.493-3.75.493-1.148 0-1.897-.173-3.513-.711-1.759-.587-2.635-.789-3.987-.789-1.502 0-2.75.136-3.75.418Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Priority&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO product-ui-task-attribute-pill_overflow__m40_l&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M7 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm7 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm7 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34;/&gt;&lt;div class=&#34;quick-add_footer__ypzk6&#34;&gt;&lt;div class=&#34;quick-add_footerContainer__SCLk_&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU product-ui-button_button__D_P_9&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-blue)&#34; class=&#34;product-ui-button_icon__DhFlD&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M5.246 4.73A2.25 2.25 0 0 1 7.435 3h9.13a2.25 2.25 0 0 1 2.189 1.73l2.226 9.346c.013.057.02.116.02.174v4.5A2.25 2.25 0 0 1 18.75 21H5.25A2.25 2.25 0 0 1 3 18.75v-4.5a.75.75 0 0 1 .02-.174L5.246 4.73Zm2.189-.23a.75.75 0 0 0-.73.577L4.5 14.338v4.412c0 .415.336.75.75.75h13.5a.75.75 0 0 0 .75-.75v-4.412l-2.205-9.261a.75.75 0 0 0-.73-.577h-9.13ZM6.25 15a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75 1.75 1.75 0 1 0 3.5 0 .75.75 0 0 1 .75-.75H17a.75.75 0 0 1 0 1.5h-1.837a3.251 3.251 0 0 1-6.326 0H7a.75.75 0 0 1-.75-.75Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;Inbox&lt;svg width=&#34;14&#34; height=&#34;14&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-button_icon__DhFlD&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4.873 8.873a.886.886 0 0 1 1.254 0L12 14.746l5.873-5.873a.886.886 0 1 1 1.254 1.254l-6.5 6.5a.886.886 0 0 1-1.254 0l-6.5-6.5a.886.886 0 0 1 0-1.254Z&#34; fill=&#34;currentcolor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_footerSpacer__cyK39&#34;&gt;&lt;/div&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA addTaskButton&#34; data-productui=&#34;cta&#34;&gt;Add task&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&#34;productUICursor&#34; class=&#34;product-ui-cursor_productUICursor__a3j3y&#34; data-productui=&#34;cursor&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-context_controls__mE9dh&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA RRhYDjs6PL1ltbRYaang lePD3jMfxmXWJSFrwC94&#34;&gt;&lt;span class=&#34;rym_lVoWNxRNMkfceBG7&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;1em&#34; height=&#34;1em&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4 3.743a.733.733 0 0 1 1.09-.651l7.533 4.257a.75.75 0 0 1 0 1.302L5.09 12.908a.733.733 0 0 1-1.09-.65V3.742Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;Play&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-scenes-section_fullHeight__8_Ujr&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA product-scenes-section_preheader__DUAuK mbe-24&#34;&gt;Focus on what’s important&lt;/p&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF liIOVrso64nx4V5gWj4A mWJbs2TuAw9nS7uYCe19 mbe-24&#34;&gt;Reach that mental clarity you’ve been longing for.&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq product-scenes-section_description__sW_Mc&#34;&gt;Your tasks are automatically sorted into Today, Upcoming, and custom Filter views to help you prioritize your most important work.&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg OuHDHN6jISIW7I2iDwgs&#34;&gt;&lt;div class=&#34;mbs-32&#34;&gt;&lt;div class=&#34;product-ui-context_container__G4mMi&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIFrame__e7Ykc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;today-view-sequence_sequenceContainer__wiPiL&#34; data-productui=&#34;container&#34;&gt;&lt;div class=&#34;product-ui-frame-background_framebackground__ykUlp today-view-sequence_frameBackground__Hbhqf&#34;&gt;&lt;img alt=&#34;&#34; loading=&#34;lazy&#34; width=&#34;590&#34; height=&#34;472&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 590px) 100vw, 590px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/columbia.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIAppFrame__ZPFQf today-view-sequence_appFrame__oK9Zo product-ui-frame_baseRadius__AuMDc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa JsQfzfVodByEpTHhXMTC&#34;&gt;Today&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU product-ui-button_button__D_P_9&#34; data-button=&#34;view&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-button_icon__DhFlD&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M15.636 4.75a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5Zm-2.646.5a2.751 2.751 0 0 1 5.293 0H21a.75.75 0 0 1 0 1.5h-2.717a2.751 2.751 0 0 1-5.293 0H3a.75.75 0 1 1 0-1.5h9.99Zm-4.717 5.5a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5Zm-2.647.5a2.751 2.751 0 0 1 5.293 0H21a.75.75 0 0 1 0 1.5H10.92a2.751 2.751 0 0 1-5.294 0H3a.75.75 0 1 1 0-1.5h2.626Zm10.01 5.5a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5Zm-2.646.5a2.751 2.751 0 0 1 5.293 0H21a.75.75 0 0 1 0 1.5h-2.717a2.751 2.751 0 0 1-5.293 0H3a.75.75 0 1 1 0-1.5h9.99Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;View&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewSection__saPZB&#34; data-productui=&#34;task-section&#34;&gt;&lt;div data-productui-task=&#34;yoga&#34; data-productui=&#34;task-container&#34;&gt;&lt;div class=&#34;product-ui-task_task__QOJoP&#34; data-productui=&#34;task&#34;&gt;&lt;div class=&#34;product-ui-task_taskOverflowContainer__2Yjek&#34;&gt;&lt;div class=&#34;product-ui-task_taskSection__VE96c&#34;&gt;&lt;div class=&#34;product-ui-task_taskInfo__rXfWV&#34;&gt;&lt;div class=&#34;product-ui-task_taskCircle__MDY83&#34;&gt;&lt;div class=&#34;product-ui-task-circle_taskCircle__WOYBl product-ui-task-circle_p3__4cr26&#34; data-productui=&#34;taskcircle&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_taskContent__aPTwE&#34;&gt;Do 30 minutes of yoga 🧘&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_projectSection__rHNVH&#34; style=&#34;--basis:40%&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:100%&#34;&gt;&lt;/div&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task_projectIcon__Imbv_&#34; style=&#34;color:var(--product-ui-meta-red)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34; style=&#34;margin-block-start:var(--space-8)&#34;/&gt;&lt;/div&gt;&lt;div data-productui-task=&#34;shortcut&#34; data-productui=&#34;task-container&#34;&gt;&lt;div class=&#34;product-ui-task_task__QOJoP&#34; data-productui=&#34;task&#34;&gt;&lt;div class=&#34;product-ui-task_taskOverflowContainer__2Yjek&#34;&gt;&lt;div class=&#34;product-ui-task_taskSection__VE96c&#34;&gt;&lt;div class=&#34;product-ui-task_taskInfo__rXfWV&#34;&gt;&lt;div class=&#34;product-ui-task_taskCircle__MDY83&#34;&gt;&lt;div class=&#34;product-ui-task-circle_taskCircle__WOYBl product-ui-task-circle_p2__2Yig0&#34; data-productui=&#34;taskcircle&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_taskContent__aPTwE&#34;&gt;Shortcut update&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_projectSection__rHNVH&#34; style=&#34;--basis:20%&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:100%&#34;&gt;&lt;/div&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task_projectIcon__Imbv_&#34; style=&#34;color:var(--product-ui-meta-lime-green)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34; style=&#34;margin-block-start:var(--space-8)&#34;/&gt;&lt;/div&gt;&lt;div data-productui-task=&#34;bread&#34; data-productui=&#34;task-container&#34;&gt;&lt;div class=&#34;product-ui-task_task__QOJoP&#34; data-productui=&#34;task&#34;&gt;&lt;div class=&#34;product-ui-task_taskOverflowContainer__2Yjek&#34;&gt;&lt;div class=&#34;product-ui-task_taskSection__VE96c&#34;&gt;&lt;div class=&#34;product-ui-task_taskInfo__rXfWV&#34;&gt;&lt;div class=&#34;product-ui-task_taskCircle__MDY83&#34;&gt;&lt;div class=&#34;product-ui-task-circle_taskCircle__WOYBl product-ui-task-circle_p4__yl_Hp&#34; data-productui=&#34;taskcircle&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_taskContent__aPTwE&#34;&gt;Buy bread 🍞&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_projectSection__rHNVH&#34; style=&#34;--basis:20%&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:100%&#34;&gt;&lt;/div&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task_projectIcon__Imbv_&#34; style=&#34;color:var(--product-ui-meta-yellow)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34; style=&#34;margin-block-start:var(--space-8)&#34;/&gt;&lt;/div&gt;&lt;div data-productui-task=&#34;dentist&#34; data-productui=&#34;task-container&#34;&gt;&lt;div class=&#34;product-ui-task_task__QOJoP&#34; data-productui=&#34;task&#34;&gt;&lt;div class=&#34;product-ui-task_taskOverflowContainer__2Yjek&#34;&gt;&lt;div class=&#34;product-ui-task_taskSection__VE96c&#34;&gt;&lt;div class=&#34;product-ui-task_taskInfo__rXfWV&#34;&gt;&lt;div class=&#34;product-ui-task_taskCircle__MDY83&#34;&gt;&lt;div class=&#34;product-ui-task-circle_taskCircle__WOYBl product-ui-task-circle_p1__deyHl&#34; data-productui=&#34;taskcircle&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_taskContent__aPTwE&#34;&gt;Dentist appointment&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-task_projectSection__rHNVH&#34; style=&#34;--basis:40%&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:100%&#34;&gt;&lt;/div&gt;&lt;svg width=&#34;18&#34; height=&#34;18&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task_projectIcon__Imbv_&#34; style=&#34;color:var(--product-ui-meta-blue)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34; style=&#34;margin-block-start:var(--space-8)&#34;/&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewSection__saPZB product-ui-view_empty__8Jyd_&#34; data-hide=&#34;true&#34; data-productui=&#34;inbox-zero-section&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;344&#34; height=&#34;270&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; class=&#34;product-ui-view_emptyStateImage__AI5Ql&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 344px) 100vw, 344px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0&#34;/&gt;&lt;div data-productui=&#34;empty-section-text&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;You reached #TodoistZero!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&#34;productUICursor&#34; class=&#34;product-ui-cursor_productUICursor__a3j3y&#34; data-productui=&#34;cursor&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-context_controls__mE9dh&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA RRhYDjs6PL1ltbRYaang lePD3jMfxmXWJSFrwC94&#34;&gt;&lt;span class=&#34;rym_lVoWNxRNMkfceBG7&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;1em&#34; height=&#34;1em&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4 3.743a.733.733 0 0 1 1.09-.651l7.533 4.257a.75.75 0 0 1 0 1.302L5.09 12.908a.733.733 0 0 1-1.09-.65V3.742Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;Play&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div data-scrollsection=&#34;anchor&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA product-scenes-section_preheader__DUAuK mbe-24&#34;&gt;Get it all done&lt;/p&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF liIOVrso64nx4V5gWj4A mWJbs2TuAw9nS7uYCe19 mbe-24&#34;&gt;Where work and personal tasks can finally coexist.&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq product-scenes-section_description__sW_Mc&#34;&gt;Tons of tasks, just one app. With workspaces, your personal, work, and team tasks can all live harmoniously under the same roof. (Sigh of relief).&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg OuHDHN6jISIW7I2iDwgs&#34;&gt;&lt;div class=&#34;mbs-32&#34;&gt;&lt;div class=&#34;product-ui-context_container__G4mMi&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIFrame__e7Ykc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;get-it-all-done-sequence_sequenceContainer__BDeOj&#34;&gt;&lt;div class=&#34;product-ui-frame-background_framebackground__ykUlp get-it-all-done-sequence_frameBackground__3pN8u product-ui-frame-background_palePink__VPQwZ&#34;&gt;&lt;img alt=&#34;&#34; loading=&#34;lazy&#34; width=&#34;590&#34; height=&#34;472&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 590px) 100vw, 590px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/pale_pink.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIAppFrame__ZPFQf get-it-all-done-sequence_appFrame__DMzrW product-ui-frame_baseRadius__AuMDc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;product-ui-sidebar_container__Qiw6_ get-it-all-done-sequence_sidebar__tppMQ&#34;&gt;&lt;div class=&#34;product-ui-sidebar_section__i9_zT&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-blue)&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M5.246 4.73A2.25 2.25 0 0 1 7.435 3h9.13a2.25 2.25 0 0 1 2.189 1.73l2.226 9.346c.013.057.02.116.02.174v4.5A2.25 2.25 0 0 1 18.75 21H5.25A2.25 2.25 0 0 1 3 18.75v-4.5a.75.75 0 0 1 .02-.174L5.246 4.73Zm2.189-.23a.75.75 0 0 0-.73.577L4.5 14.338v4.412c0 .415.336.75.75.75h13.5a.75.75 0 0 0 .75-.75v-4.412l-2.205-9.261a.75.75 0 0 0-.73-.577h-9.13ZM6.25 15a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75 1.75 1.75 0 1 0 3.5 0 .75.75 0 0 1 .75-.75H17a.75.75 0 0 1 0 1.5h-1.837a3.251 3.251 0 0 1-6.326 0H7a.75.75 0 0 1-.75-.75Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:20%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--display-onlight-color-green)&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M6 8a.75.75 0 0 1 .75-.75h10.5a.75.75 0 0 1 0 1.5H6.75A.75.75 0 0 1 6 8Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6Zm3-1.5A1.5 1.5 0 0 0 4.5 6v12A1.5 1.5 0 0 0 6 19.5h12a1.5 1.5 0 0 0 1.5-1.5V6A1.5 1.5 0 0 0 18 4.5H6Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M7.473 17v-.892L9.758 13.9c.213-.213.391-.403.534-.57.143-.165.25-.327.323-.485.072-.158.108-.326.108-.505a.938.938 0 0 0-.14-.52.903.903 0 0 0-.38-.34 1.192 1.192 0 0 0-.547-.121c-.211 0-.396.044-.556.131a.919.919 0 0 0-.368.37 1.174 1.174 0 0 0-.128.566H7.428c0-.417.095-.78.285-1.09.191-.308.456-.547.792-.715.34-.17.727-.256 1.164-.256.447 0 .84.082 1.176.246.336.164.598.39.783.678.187.287.281.615.281.984 0 .245-.048.487-.144.726-.094.236-.26.5-.498.789-.237.29-.57.638-1 1.045L9.18 15.929v.045h2.825V17H7.473ZM16.024 10.454V17h-1.236v-5.353h-.039l-1.524.971v-1.122l1.627-1.042h1.172Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:40%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-sidebar_section__i9_zT product-ui-sidebar_workspace__vbTEu&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_sideBarType__qegAx&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA&#34;&gt;Workspaces&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_right__aflHW&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-sidebar_section__i9_zT product-ui-sidebar_content__bF_Kp&#34;&gt;&lt;div class=&#34;product-ui-sidebar_section__i9_zT&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_sideBarType__qegAx&#34; data-productuisidebarheaderitem=&#34;personal&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g clip-path=&#34;url(#avatar-personal_svg__a)&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#FBD5D0&#34;&gt;&lt;/path&gt;&lt;mask id=&#34;avatar-personal_svg__b&#34; style=&#34;mask-type:alpha&#34; maskUnits=&#34;userSpaceOnUse&#34; x=&#34;0&#34; y=&#34;0&#34; width=&#34;24&#34; height=&#34;24&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#FBD5D0&#34;&gt;&lt;/path&gt;&lt;/mask&gt;&lt;g mask=&#34;url(#avatar-personal_svg__b)&#34; fill=&#34;#F8EBEB&#34;&gt;&lt;path d=&#34;M-3.091-1.94C-3.221-1.545.637-.425 3.468.365l24.897 6.952c1.56.436 4.647 1.405 5.11.955.464-.45-1.968-1.3-3.239-1.655-1.27-.355-2.973-.616-4.62-1.14-1.645-.524-3.446-1.949-7.33-2.99-3.883-1.042-5.365-.748-7.472-1.25C8.707.733 4.355-.65 1.55-1.33c-3.344-.81-4.53-.948-4.64-.61Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M-3.726-.012c.438-1.331 4.353-.383 7.184.408l24.896 6.952c1.56.435 4.79.974 4.486 2.851-.303 1.877-2.962 1.716-4.233 1.361-1.271-.354-2.69-1.477-4.421-1.744-1.73-.264-4.753 2.015-8.58.802s-4.37-3.764-6.364-4.611C7.248 5.159 2.674 4.45.005 3.355c-3.18-1.306-4.111-2.22-3.731-3.367ZM29.015 28.494c.22-.494-4.649-2.452-8.225-3.848l-31.453-12.279c-1.97-.77-5.856-2.43-6.517-1.907-.661.524 2.388 1.947 3.994 2.574 1.606.627 3.784 1.187 5.856 2.083 2.07.895 4.225 2.982 9.137 4.841 4.912 1.86 6.876 1.67 9.549 2.598 2.673.928 8.149 3.292 11.708 4.542 4.24 1.489 5.764 1.823 5.95 1.396Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M30.092 26.071c-.744 1.674-5.708-.069-9.284-1.465l-31.453-12.278c-1.97-.77-6.097-1.89-5.458-4.29.638-2.4 4.073-1.845 5.679-1.219 1.606.627 3.303 2.27 5.518 2.843 2.215.57 6.44-2 11.256.076 4.816 2.075 5.19 5.461 7.67 6.822 2.481 1.362 8.334 2.878 11.66 4.65 3.964 2.112 5.055 3.42 4.412 4.861Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&#34;M8.375 18V6.727h4.227c.866 0 1.592.162 2.18.485.59.323 1.036.767 1.337 1.332.305.561.457 1.2.457 1.915 0 .723-.152 1.365-.457 1.927a3.265 3.265 0 0 1-1.348 1.326c-.595.32-1.327.48-2.197.48H9.773v-1.68h2.526c.506 0 .921-.088 1.244-.264.323-.176.561-.418.716-.726.157-.309.236-.663.236-1.063 0-.4-.079-.752-.236-1.057a1.608 1.608 0 0 0-.722-.71c-.322-.172-.739-.258-1.249-.258h-1.871V18H8.375Z&#34; fill=&#34;#D64638&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;avatar-personal_svg__a&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M0 0h24v24H0z&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA&#34;&gt;Personal&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_right__aflHW&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-list-item_icon__8fwEX&#34; color=&#34;var(--display-onlight-tertiary)&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M15.127 4.623a.886.886 0 0 1 0 1.254L9.254 11.75l5.873 5.873a.886.886 0 0 1-1.254 1.254l-6.5-6.5a.886.886 0 0 1 0-1.254l6.5-6.5a.886.886 0 0 1 1.254 0Z&#34; fill=&#34;currentcolor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-productui=&#34;sidebarsection&#34; data-sidebarsection=&#34;personal&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-red)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:20%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-yellow)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:40%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-blue)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:60%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-sidebar_section__i9_zT&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_sideBarType__qegAx&#34; data-productuisidebarheaderitem=&#34;team&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;g clip-path=&#34;url(#avatar-teams_svg__a)&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#E7E0B1&#34;&gt;&lt;/path&gt;&lt;mask id=&#34;avatar-teams_svg__b&#34; style=&#34;mask-type:alpha&#34; maskUnits=&#34;userSpaceOnUse&#34; x=&#34;-1&#34; y=&#34;0&#34; width=&#34;25&#34; height=&#34;24&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#F6EDC6&#34;&gt;&lt;/path&gt;&lt;/mask&gt;&lt;g mask=&#34;url(#avatar-teams_svg__b)&#34; fill=&#34;#F6EDC6&#34;&gt;&lt;path d=&#34;M32.92 10.56c-.186-.37-3.705 1.566-6.266 3.009L4.134 26.258c-1.412.795-4.28 2.293-4.29 2.938-.01.646 2.311-.472 3.461-1.12 1.15-.647 2.538-1.666 4.073-2.46 1.534-.793 3.815-1.06 7.298-3.069 3.482-2.01 4.322-3.265 6.167-4.4 1.846-1.134 5.9-3.234 8.366-4.737 2.938-1.792 3.874-2.533 3.712-2.85Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M32.007 8.748c.631 1.252-2.807 3.349-5.368 4.792L4.12 26.227c-1.411.795-4.076 2.698-5.188 1.156-1.113-1.542.88-3.308 2.03-3.956 1.15-.648 2.946-.857 4.36-1.893 1.41-1.036 1.935-4.785 5.5-6.633 3.563-1.849 5.751-.43 7.76-1.24 2.01-.81 5.745-3.544 8.407-4.657 3.173-1.325 4.477-1.337 5.019-.257ZM-11.301 11.743c.194.504 5.02-1.553 8.537-3.095L28.158-4.91c1.938-.85 5.86-2.422 5.957-3.26.097-.838-3.065.312-4.644 1.004-1.578.692-3.515 1.836-5.613 2.668-2.097.83-5.097.88-9.885 3.037C9.185.697 7.93 2.22 5.384 3.455c-2.546 1.234-8.09 3.434-11.49 5.067-4.051 1.946-5.365 2.787-5.195 3.22Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M-10.35 14.217c-.657-1.71 4.085-3.987 7.601-5.529L28.174-4.87c1.937-.85 5.647-2.975 6.893-.826 1.245 2.149-1.576 4.185-3.154 4.877-1.58.692-3.941.73-5.913 1.892-1.968 1.164-3.139 5.968-8.012 7.906-4.873 1.938-7.532-.192-10.248.6-2.717.791-7.928 3.857-11.533 4.957-4.296 1.31-5.992 1.155-6.557-.319Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&#34;M7.5 8.44V6.726h8.994V8.44H13.01V18h-2.025V8.44H7.5Z&#34; fill=&#34;#BD8800&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;avatar-teams_svg__a&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M0 0h24v24H0z&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA&#34;&gt;Team&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_right__aflHW&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-list-item_icon__8fwEX&#34; color=&#34;var(--display-onlight-tertiary)&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M15.127 4.623a.886.886 0 0 1 0 1.254L9.254 11.75l5.873 5.873a.886.886 0 0 1-1.254 1.254l-6.5-6.5a.886.886 0 0 1 0-1.254l6.5-6.5a.886.886 0 0 1 1.254 0Z&#34; fill=&#34;currentcolor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;div data-productui=&#34;sidebarsection&#34; data-sidebarsection=&#34;team&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-orange)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:60%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-purple)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:80%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_basicType__PMeAZ&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-lime-green)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;div class=&#34;product-ui-list-item_abstract__74PRc&#34;&gt;&lt;div class=&#34;product-ui-skeleton-text_skeletonText__HSPz_&#34; style=&#34;--inlineSize:40%&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34; data-productui=&#34;ui-view&#34; data-productuiview=&#34;inbox-zero&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa JsQfzfVodByEpTHhXMTC&#34;&gt;Today&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewSection__saPZB product-ui-view_empty__8Jyd_&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;344&#34; height=&#34;270&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; class=&#34;product-ui-view_emptyStateImage__AI5Ql&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 344px) 100vw, 344px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/product-ui/empty-illustration.jpg?_a=ATCqVcY0&#34;/&gt;&lt;div data-productui=&#34;empty-section-text&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;You reached #TodoistZero!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34; data-productui=&#34;ui-view&#34; data-productuiview=&#34;personal-workspace&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW product-ui-view_workspace__rj2N4&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-view_icon__6BxqD&#34;&gt;&lt;g clip-path=&#34;url(#avatar-personal_svg__a)&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#FBD5D0&#34;&gt;&lt;/path&gt;&lt;mask id=&#34;avatar-personal_svg__b&#34; style=&#34;mask-type:alpha&#34; maskUnits=&#34;userSpaceOnUse&#34; x=&#34;0&#34; y=&#34;0&#34; width=&#34;24&#34; height=&#34;24&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#FBD5D0&#34;&gt;&lt;/path&gt;&lt;/mask&gt;&lt;g mask=&#34;url(#avatar-personal_svg__b)&#34; fill=&#34;#F8EBEB&#34;&gt;&lt;path d=&#34;M-3.091-1.94C-3.221-1.545.637-.425 3.468.365l24.897 6.952c1.56.436 4.647 1.405 5.11.955.464-.45-1.968-1.3-3.239-1.655-1.27-.355-2.973-.616-4.62-1.14-1.645-.524-3.446-1.949-7.33-2.99-3.883-1.042-5.365-.748-7.472-1.25C8.707.733 4.355-.65 1.55-1.33c-3.344-.81-4.53-.948-4.64-.61Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M-3.726-.012c.438-1.331 4.353-.383 7.184.408l24.896 6.952c1.56.435 4.79.974 4.486 2.851-.303 1.877-2.962 1.716-4.233 1.361-1.271-.354-2.69-1.477-4.421-1.744-1.73-.264-4.753 2.015-8.58.802s-4.37-3.764-6.364-4.611C7.248 5.159 2.674 4.45.005 3.355c-3.18-1.306-4.111-2.22-3.731-3.367ZM29.015 28.494c.22-.494-4.649-2.452-8.225-3.848l-31.453-12.279c-1.97-.77-5.856-2.43-6.517-1.907-.661.524 2.388 1.947 3.994 2.574 1.606.627 3.784 1.187 5.856 2.083 2.07.895 4.225 2.982 9.137 4.841 4.912 1.86 6.876 1.67 9.549 2.598 2.673.928 8.149 3.292 11.708 4.542 4.24 1.489 5.764 1.823 5.95 1.396Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M30.092 26.071c-.744 1.674-5.708-.069-9.284-1.465l-31.453-12.278c-1.97-.77-6.097-1.89-5.458-4.29.638-2.4 4.073-1.845 5.679-1.219 1.606.627 3.303 2.27 5.518 2.843 2.215.57 6.44-2 11.256.076 4.816 2.075 5.19 5.461 7.67 6.822 2.481 1.362 8.334 2.878 11.66 4.65 3.964 2.112 5.055 3.42 4.412 4.861Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&#34;M8.375 18V6.727h4.227c.866 0 1.592.162 2.18.485.59.323 1.036.767 1.337 1.332.305.561.457 1.2.457 1.915 0 .723-.152 1.365-.457 1.927a3.265 3.265 0 0 1-1.348 1.326c-.595.32-1.327.48-2.197.48H9.773v-1.68h2.526c.506 0 .921-.088 1.244-.264.323-.176.561-.418.716-.726.157-.309.236-.663.236-1.063 0-.4-.079-.752-.236-1.057a1.608 1.608 0 0 0-.722-.71c-.322-.172-.739-.258-1.249-.258h-1.871V18H8.375Z&#34; fill=&#34;#D64638&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;avatar-personal_svg__a&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M0 0h24v24H0z&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Cym2iJuXNbL6HXbNtN74 JsQfzfVodByEpTHhXMTC&#34;&gt;Personal&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewSection__saPZB&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-red)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Fitness&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-yellow)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Groceries&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-blue)&#34;&gt;&lt;circle cx=&#34;12&#34; cy=&#34;12&#34; r=&#34;5&#34; fill=&#34;currentColor&#34;&gt;&lt;/circle&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Appointments&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34; data-productui=&#34;ui-view&#34; data-productuiview=&#34;team-workspace&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW product-ui-view_workspace__rj2N4&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-view_icon__6BxqD&#34;&gt;&lt;g clip-path=&#34;url(#avatar-teams_svg__a)&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#E7E0B1&#34;&gt;&lt;/path&gt;&lt;mask id=&#34;avatar-teams_svg__b&#34; style=&#34;mask-type:alpha&#34; maskUnits=&#34;userSpaceOnUse&#34; x=&#34;-1&#34; y=&#34;0&#34; width=&#34;25&#34; height=&#34;24&#34;&gt;&lt;path d=&#34;M0 6a6 6 0 0 1 6-6h12a6 6 0 0 1 6 6v12a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V6Z&#34; fill=&#34;#F6EDC6&#34;&gt;&lt;/path&gt;&lt;/mask&gt;&lt;g mask=&#34;url(#avatar-teams_svg__b)&#34; fill=&#34;#F6EDC6&#34;&gt;&lt;path d=&#34;M32.92 10.56c-.186-.37-3.705 1.566-6.266 3.009L4.134 26.258c-1.412.795-4.28 2.293-4.29 2.938-.01.646 2.311-.472 3.461-1.12 1.15-.647 2.538-1.666 4.073-2.46 1.534-.793 3.815-1.06 7.298-3.069 3.482-2.01 4.322-3.265 6.167-4.4 1.846-1.134 5.9-3.234 8.366-4.737 2.938-1.792 3.874-2.533 3.712-2.85Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M32.007 8.748c.631 1.252-2.807 3.349-5.368 4.792L4.12 26.227c-1.411.795-4.076 2.698-5.188 1.156-1.113-1.542.88-3.308 2.03-3.956 1.15-.648 2.946-.857 4.36-1.893 1.41-1.036 1.935-4.785 5.5-6.633 3.563-1.849 5.751-.43 7.76-1.24 2.01-.81 5.745-3.544 8.407-4.657 3.173-1.325 4.477-1.337 5.019-.257ZM-11.301 11.743c.194.504 5.02-1.553 8.537-3.095L28.158-4.91c1.938-.85 5.86-2.422 5.957-3.26.097-.838-3.065.312-4.644 1.004-1.578.692-3.515 1.836-5.613 2.668-2.097.83-5.097.88-9.885 3.037C9.185.697 7.93 2.22 5.384 3.455c-2.546 1.234-8.09 3.434-11.49 5.067-4.051 1.946-5.365 2.787-5.195 3.22Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M-10.35 14.217c-.657-1.71 4.085-3.987 7.601-5.529L28.174-4.87c1.937-.85 5.647-2.975 6.893-.826 1.245 2.149-1.576 4.185-3.154 4.877-1.58.692-3.941.73-5.913 1.892-1.968 1.164-3.139 5.968-8.012 7.906-4.873 1.938-7.532-.192-10.248.6-2.717.791-7.928 3.857-11.533 4.957-4.296 1.31-5.992 1.155-6.557-.319Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;path d=&#34;M7.5 8.44V6.726h8.994V8.44H13.01V18h-2.025V8.44H7.5Z&#34; fill=&#34;#BD8800&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;defs&gt;&lt;clipPath id=&#34;avatar-teams_svg__a&#34;&gt;&lt;path fill=&#34;currentColor&#34; d=&#34;M0 0h24v24H0z&#34;&gt;&lt;/path&gt;&lt;/clipPath&gt;&lt;/defs&gt;&lt;/svg&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Cym2iJuXNbL6HXbNtN74 JsQfzfVodByEpTHhXMTC&#34;&gt;Team&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-view_viewSection__saPZB&#34;&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-orange)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;New Brand&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-purple)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Website Update&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-lime-green)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Product Roadmap&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-list-item_container__YjyEq product-ui-list-item_projectType__bM0YF&#34;&gt;&lt;div class=&#34;product-ui-list-item_left__FeT3F&#34;&gt;&lt;svg width=&#34;24&#34; height=&#34;24&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-lavender)&#34;&gt;&lt;path d=&#34;M12 11.537A3.768 3.768 0 1 0 12 4a3.768 3.768 0 0 0 0 7.537ZM18.78 16.376c.744 1.371-.509 2.697-2.07 2.697H7.29c-1.561 0-2.814-1.326-2.07-2.697.872-1.606 2.747-3.332 6.78-3.332s5.908 1.726 6.78 3.332Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc&#34;&gt;Meeting Agenda&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-cursor_productUICursor__a3j3y&#34; data-productui=&#34;cursor&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-context_controls__mE9dh&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA RRhYDjs6PL1ltbRYaang lePD3jMfxmXWJSFrwC94&#34;&gt;&lt;span class=&#34;rym_lVoWNxRNMkfceBG7&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;1em&#34; height=&#34;1em&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4 3.743a.733.733 0 0 1 1.09-.651l7.533 4.257a.75.75 0 0 1 0 1.302L5.09 12.908a.733.733 0 0 1-1.09-.65V3.742Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;Play&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;scroll-section_scrollContainer__DxGAb&#34;&gt;&lt;div data-scrollsection=&#34;sticky&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;product-ui-context_container__G4mMi&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;product-ui-frame_productFrame__napMY product-ui-frame_productUIFrame__e7Ykc&#34; aria-hidden=&#34;true&#34;&gt;&lt;div class=&#34;quick-add-sequence_sequenceContainer__mbCx7&#34;&gt;&lt;div class=&#34;product-ui-frame-background_framebackground__ykUlp quick-add-sequence_frameBackground__TuGRX product-ui-frame-background_antique__PoHwY&#34;&gt;&lt;img alt=&#34;&#34; loading=&#34;lazy&#34; width=&#34;590&#34; height=&#34;472&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 590px) 100vw, 590px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/productui/antique.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-overlay_overlay__p3EBz quick-add-sequence_overlay__O3SGJ&#34;&gt;&lt;div class=&#34;product-ui-view_viewContainer__hsvg9&#34;&gt;&lt;div class=&#34;product-ui-view_header__Tw6qW&#34;&gt;&lt;div class=&#34;product-ui-view_textContainer__5o_1E&#34;&gt;&lt;span class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa JsQfzfVodByEpTHhXMTC&#34;&gt;Today&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_quickAddContainer__jCNrC quick-add-sequence_quickAdd__HndeA&#34; data-productui=&#34;quickadd&#34;&gt;&lt;div class=&#34;quick-add_details__9MGr9&#34;&gt;&lt;div class=&#34;quick-add_inputFields__Ejr6b&#34;&gt;&lt;div class=&#34;quick-add_taskContainer__YeL65&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa DLF4ip7391hTQFmMhXrA&#34;&gt;&lt;span id=&#34;quickAddPlaceholder&#34; class=&#34;quick-add_intentContainer__QNl8d quick-add_placeholder__da9_w&#34; data-productui=&#34;placeholder&#34;&gt;Task name&lt;/span&gt; &lt;span id=&#34;taskText&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt; &lt;span id=&#34;taskTime&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt; &lt;span id=&#34;taskPriority&#34; class=&#34;quick-add_intentContainer__QNl8d&#34; data-productui=&#34;quickAddText&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_attributesContainer__PYBL9&#34;&gt;&lt;div class=&#34;quick-add_attributeContainer__c3TJR&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M6 8a.75.75 0 0 1 .75-.75h10.5a.75.75 0 0 1 0 1.5H6.75A.75.75 0 0 1 6 8Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M3 6a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3V6Zm3-1.5A1.5 1.5 0 0 0 4.5 6v12A1.5 1.5 0 0 0 6 19.5h12a1.5 1.5 0 0 0 1.5-1.5V6A1.5 1.5 0 0 0 18 4.5H6Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M17.25 16.125a1.125 1.125 0 1 1-2.25 0 1.125 1.125 0 0 1 2.25 0Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Due date&lt;/span&gt;&lt;/div&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M3 4.5a.75.75 0 0 1 .415-.67C4.537 3.267 6.144 3 8.25 3c1.352 0 2.228.202 3.987.789 1.616.538 2.365.711 3.513.711 1.894 0 3.287-.232 4.165-.67A.75.75 0 0 1 21 4.5v9.75a.75.75 0 0 1-.415.671c-1.122.562-2.729.83-4.835.83-1.352 0-2.228-.203-3.987-.79-1.616-.538-2.365-.71-3.513-.71-1.619 0-2.872.169-3.75.492v5.507a.75.75 0 1 1-1.5 0V4.5Zm1.5 8.668V4.993C5.378 4.67 6.631 4.5 8.25 4.5c1.148 0 1.897.173 3.513.712 1.759.586 2.635.788 3.987.788 1.502 0 2.75-.136 3.75-.418v8.175c-.878.324-2.131.493-3.75.493-1.148 0-1.897-.173-3.513-.711-1.759-.587-2.635-.789-3.987-.789-1.502 0-2.75.136-3.75.418Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Priority&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF zRNctiZzzNXY_x4Xux4_ product-ui-task-attribute-pill_pill__a2pAO product-ui-task-attribute-pill_overflow__m40_l&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-task-attribute-pill_prefixIcon__8lJjH&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M7 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm7 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm7 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr class=&#34;lKbkMAAbpfoobELp5Owc rb96v3SgFf7CAdIwrQ95&#34; aria-orientation=&#34;horizontal&#34;/&gt;&lt;div class=&#34;quick-add_footer__ypzk6&#34;&gt;&lt;div class=&#34;quick-add_footerContainer__SCLk_&#34;&gt;&lt;div class=&#34;Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU product-ui-button_button__D_P_9&#34;&gt;&lt;svg width=&#34;20&#34; height=&#34;20&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; color=&#34;var(--product-ui-meta-blue)&#34; class=&#34;product-ui-button_icon__DhFlD&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M5.246 4.73A2.25 2.25 0 0 1 7.435 3h9.13a2.25 2.25 0 0 1 2.189 1.73l2.226 9.346c.013.057.02.116.02.174v4.5A2.25 2.25 0 0 1 18.75 21H5.25A2.25 2.25 0 0 1 3 18.75v-4.5a.75.75 0 0 1 .02-.174L5.246 4.73Zm2.189-.23a.75.75 0 0 0-.73.577L4.5 14.338v4.412c0 .415.336.75.75.75h13.5a.75.75 0 0 0 .75-.75v-4.412l-2.205-9.261a.75.75 0 0 0-.73-.577h-9.13ZM6.25 15a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75 1.75 1.75 0 1 0 3.5 0 .75.75 0 0 1 .75-.75H17a.75.75 0 0 1 0 1.5h-1.837a3.251 3.251 0 0 1-6.326 0H7a.75.75 0 0 1-.75-.75Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;Inbox&lt;svg width=&#34;14&#34; height=&#34;14&#34; viewBox=&#34;0 0 24 24&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;product-ui-button_icon__DhFlD&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4.873 8.873a.886.886 0 0 1 1.254 0L12 14.746l5.873-5.873a.886.886 0 1 1 1.254 1.254l-6.5 6.5a.886.886 0 0 1-1.254 0l-6.5-6.5a.886.886 0 0 1 0-1.254Z&#34; fill=&#34;currentcolor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;quick-add_footerSpacer__cyK39&#34;&gt;&lt;/div&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA addTaskButton&#34; data-productui=&#34;cta&#34;&gt;Add task&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&#34;productUICursor&#34; class=&#34;product-ui-cursor_productUICursor__a3j3y&#34; data-productui=&#34;cursor&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;product-ui-context_controls__mE9dh&#34;&gt;&lt;button class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA RRhYDjs6PL1ltbRYaang lePD3jMfxmXWJSFrwC94&#34;&gt;&lt;span class=&#34;rym_lVoWNxRNMkfceBG7&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;1em&#34; height=&#34;1em&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M4 3.743a.733.733 0 0 1 1.09-.651l7.533 4.257a.75.75 0 0 1 0 1.302L5.09 12.908a.733.733 0 0 1-1.09-.65V3.742Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;Play&lt;/button&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;section&gt;&lt;div class=&#34;Yq3CJKRaogbgzFJ2SQ5k complexity-slider-section_anchor__DIVzm&#34; id=&#34;simple-or-complex&#34;&gt;&lt;/div&gt;&lt;div class=&#34;pi-24 mbe-128 md-mbe-192 YttEe7kIjjIAtcbhghld&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;complexity-slider-section_heading__ByIrl mbe-96&#34;&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF L29FjGZVki0rW0QIhG_A mWJbs2TuAw9nS7uYCe19 mbe-32&#34;&gt;“Todoist makes it easy to go as simple or as complex as you want”&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Cym2iJuXNbL6HXbNtN74&#34;&gt;– The Verge&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;complexity-slider-section_sliderContainer___70_3&#34;&gt;&lt;div class=&#34;complexity-slider-section_contentContainer__DcTKx&#34;&gt;&lt;div class=&#34;complexity-slider-section_videoContainer__ybQpi&#34;&gt;&lt;video muted=&#34;&#34;&gt;&lt;source src=&#34;https://res.cloudinary.com/imagist/video/fetch/f_auto/q_auto/https://todoist.com/static/home/complexity-slider/complexity-video.mp4?_a=ATCqVcY0&#34; type=&#34;video/mp4&#34;/&gt;&lt;/video&gt;&lt;/div&gt;&lt;div class=&#34;slider-container_sliderContainer__lg_FJ&#34;&gt;&lt;li class=&#34;Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU CUB8EtmOP9Ef5rbW73H3&#34;&gt;&lt;span class=&#34;zDThJNppb_pUvKmum1AH&#34;&gt;Simple&lt;/span&gt;&lt;/li&gt;&lt;div class=&#34;slider-container_progressContainer__kQ5PZ&#34;&gt;&lt;div class=&#34;slider-container_progressBackground__nTJVb&#34;&gt;&lt;/div&gt;&lt;div class=&#34;slider-container_progressBar__JoJI3&#34; style=&#34;--progress:0%&#34;&gt;&lt;/div&gt;&lt;div class=&#34;dot-indicator_dotIndicator__2z2lL&#34; style=&#34;--progress:0%&#34;&gt;&lt;div class=&#34;dot-indicator_default__2yZ5A&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;dot-indicator_dotIndicator__2z2lL&#34; style=&#34;--progress:33%&#34;&gt;&lt;div class=&#34;dot-indicator_default__2yZ5A&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;dot-indicator_dotIndicator__2z2lL&#34; style=&#34;--progress:67%&#34;&gt;&lt;div class=&#34;dot-indicator_default__2yZ5A&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;dot-indicator_dotIndicator__2z2lL&#34; style=&#34;--progress:100%&#34;&gt;&lt;div class=&#34;dot-indicator_default__2yZ5A&#34;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;li class=&#34;Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU CUB8EtmOP9Ef5rbW73H3&#34;&gt;&lt;span class=&#34;zDThJNppb_pUvKmum1AH&#34;&gt;Advanced&lt;/span&gt;&lt;/li&gt;&lt;/div&gt;&lt;div class=&#34;complexity-slider-section_list__n9BQE&#34;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;&lt;div class=&#34;mbe-128 xlg-mbe-192 explore-section_container__JlPA8 YttEe7kIjjIAtcbhghld&#34;&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF Cym2iJuXNbL6HXbNtN74 mWJbs2TuAw9nS7uYCe19 mbe-48&#34;&gt;Explore all Todoist has to offer&lt;/h2&gt;&lt;div class=&#34;explore-section_grid__eYZFt&#34;&gt;&lt;a class=&#34;icon-card_iconCard__rsWyN&#34; href=&#34;/features&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;120&#34; height=&#34;119&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/features.png?_a=ATCqVcY0&#34;/&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Features&lt;/p&gt;&lt;/a&gt;&lt;a class=&#34;icon-card_iconCard__rsWyN&#34; href=&#34;/templates&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;120&#34; height=&#34;119&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/templates.png?_a=ATCqVcY0&#34;/&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Template gallery&lt;/p&gt;&lt;/a&gt;&lt;a class=&#34;icon-card_iconCard__rsWyN&#34; href=&#34;/productivity-methods&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;120&#34; height=&#34;119&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/prod-quiz.png?_a=ATCqVcY0&#34;/&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Productivity quiz&lt;/p&gt;&lt;/a&gt;&lt;a class=&#34;icon-card_iconCard__rsWyN&#34; href=&#34;/integrations&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;120&#34; height=&#34;119&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/extensions.png?_a=ATCqVcY0&#34;/&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Extension gallery&lt;/p&gt;&lt;/a&gt;&lt;a class=&#34;icon-card_iconCard__rsWyN&#34; href=&#34;/inspiration&#34;&gt;&lt;img loading=&#34;lazy&#34; width=&#34;120&#34; height=&#34;119&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/explore/inspiration.png?_a=ATCqVcY0&#34;/&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc ghjFWYpaMMS6gFyyKavs&#34;&gt;Inspiration hub&lt;/p&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;container-two-column_containerTwoColumns__BHIh5 container-two-column_breakAbove_xlg__O8PgY YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;container-two-column_textContainerInner__zC5fl container-two-column_lg__QePrC&#34;&gt;&lt;div class=&#34;stats-section_copy__1Xvpc&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA stats-section_preheader__xNKo4&#34;&gt;In it for the long haul&lt;/p&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF liIOVrso64nx4V5gWj4A mWJbs2TuAw9nS7uYCe19&#34;&gt;A task manager you can trust for life&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq mbe-8 stats-section_description__HnHYw&#34;&gt;We’ve been building Todoist for 16 years&lt;!-- --&gt; &lt;!-- --&gt;and 182 days.&lt;!-- --&gt; &lt;!-- --&gt;Rest assured that we’ll never sell out to the highest bidder.&lt;/p&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV odtOENRM8nO67fi6A2f8 o9DYmt4xfLaImiVzI9dQ Bxh88ZVLben5y9mwWDWw zHWt6OJ9yacfxH7GocTm stats-section_articleLink__C0Fl5&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://blog.doist.com/no-exit-strategy/?utm_source=todoist&amp;amp;utm_medium=home&amp;amp;utm_campaign=new_td_landing_page_c2205&#34; target=&#34;_blank&#34;&gt;&lt;svg width=&#34;1em&#34; height=&#34;1em&#34; viewBox=&#34;0 0 16 17&#34; fill=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=&#34;fcno40qhmCgDkMq5y3Tk&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M1.585 3.545c.915-.608 2.12-.96 3.415-.96 1.107 0 2.149.257 3 .712.851-.455 1.893-.713 3-.713 1.295 0 2.5.353 3.415.961a.75.75 0 0 1 .335.625v8.666a.75.75 0 0 1-1.165.625c-.642-.426-1.55-.71-2.585-.71-1.034 0-1.943.284-2.585.71a.75.75 0 0 1-.83 0c-.642-.426-1.551-.71-2.585-.71s-1.943.284-2.585.71a.75.75 0 0 1-1.165-.625V4.17a.75.75 0 0 1 .335-.625ZM7.25 4.598c-.607-.315-1.385-.514-2.25-.514s-1.643.199-2.25.514v7.034a6.666 6.666 0 0 1 2.25-.38c.8 0 1.566.134 2.25.38V4.598Zm1.5 7.034a6.666 6.666 0 0 1 2.25-.38c.8 0 1.566.134 2.25.38V4.598c-.607-.315-1.384-.514-2.25-.514-.865 0-1.643.199-2.25.514v7.034Z&#34; fill=&#34;currentColor&#34;&gt;&lt;/path&gt;&lt;/svg&gt;Read about our long-term mission&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-section_stats__z2bRF&#34;&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg hbwC2BLMAPgUWx5ocgNY&#34;&gt;&lt;div class=&#34;stats-section_carousel__mn2j5&#34;&gt;&lt;div class=&#34;stats-section_scroller__RYon_&#34;&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg OuHDHN6jISIW7I2iDwgs&#34;&gt;&lt;div class=&#34;stats-section_carousel__mn2j5&#34;&gt;&lt;div class=&#34;stats-section_scroller__RYon_&#34;&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV odtOENRM8nO67fi6A2f8 o9DYmt4xfLaImiVzI9dQ stats-section_articleLink__C0Fl5 mbs-16&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://blog.doist.com/no-exit-strategy/?utm_source=todoist&amp;amp;utm_medium=home&amp;amp;utm_campaign=new_td_landing_page_c2205&#34; target=&#34;_blank&#34;&gt;Read about our long-term mission&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;ALjV_FDtdiJ2rGCAH1Lg Of6PyXOI70TmrKqmrOnl SVhGiSzS0M7007sJ4mKJ&#34;&gt;&lt;div class=&#34;stats-section_static__EBLHN&#34;&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-1.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;30+ million&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;app downloads&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-2.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;2 billion+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;tasks completed&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-3.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;160+ countries&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;worldwide&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBox__bWQNv&#34;&gt;&lt;div class=&#34;stats-box_statsBoxImgContainer__vBeXS&#34;&gt;&lt;img fetchPriority=&#34;high&#34; width=&#34;300&#34; height=&#34;300&#34; decoding=&#34;async&#34; data-nimg=&#34;1&#34; style=&#34;color:transparent&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; srcSet=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_480/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 480w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_768/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 768w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_960/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 960w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1120/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1120w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_1536/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 1536w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2240/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2240w, https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0 2624w&#34; src=&#34;https://res.cloudinary.com/imagist/image/fetch/f_auto/q_auto/c_scale,w_2624/https://todoist.com/static/home-teams/stats/stat-box-4.png?_a=ATCqVcY0&#34;/&gt;&lt;/div&gt;&lt;div class=&#34;stats-box_statsBoxTextContainer__Xgj3s&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Gs7wgIm1muuNtpJsHwaa&#34;&gt;1 million+&lt;/p&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Pro users&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV odtOENRM8nO67fi6A2f8 o9DYmt4xfLaImiVzI9dQ stats-section_articleLink__C0Fl5 mbs-16&#34; rel=&#34;noopener noreferrer&#34; href=&#34;https://blog.doist.com/no-exit-strategy/?utm_source=todoist&amp;amp;utm_medium=home&amp;amp;utm_campaign=new_td_landing_page_c2205&#34; target=&#34;_blank&#34;&gt;Read about our long-term mission&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;prefooter_background__cPq_a&#34;&gt;&lt;div class=&#34;prefooter_container___BJxW md-pbs-192 pbs-128 YttEe7kIjjIAtcbhghld&#34;&gt;&lt;h2 class=&#34;Z2j5FoeQ_umI7vX0SmxF L29FjGZVki0rW0QIhG_A mWJbs2TuAw9nS7uYCe19&#34;&gt;Gain calmness and clarity with the world’s most beloved productivity app&lt;/h2&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF VB6LgUAmqv1DrUQhn1Tq ghjFWYpaMMS6gFyyKavs&#34;&gt;337,000+ ★★★★★ reviews on Google Play and App Store&lt;/p&gt;&lt;div class=&#34;prefooter_buttons__C1Edr&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo DLF4ip7391hTQFmMhXrA AisLsJaE_AWnIhDlnTUV cdc4_xoyu5lt350lFjqA o9DYmt4xfLaImiVzI9dQ&#34; href=&#34;/auth/signup&#34;&gt;Get started free&lt;/a&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF fIU_pyh7amL7_gGAWdA7 AisLsJaE_AWnIhDlnTUV fiaIW8EzjGBgQZzGxp9a IEtzmWgJUMZf9_fMKnhx PGgZjaWFAKPSXdn5Faog&#34; href=&#34;/downloads&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; width=&#34;1em&#34; height=&#34;1em&#34; class=&#34;fcno40qhmCgDkMq5y3Tk&#34;&gt;&lt;path d=&#34;M7.47 10.53c.3.3.77.3 1.06 0l3-3a.75.75 0 1 0-1.06-1.06L8.75 8.2V2a.75.75 0 1 0-1.5 0v6.2L5.53 6.46a.75.75 0 0 0-1.06 1.06l3 3Z&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M1 10.25c.41 0 .75.34.75.75v1c0 .7.56 1.25 1.25 1.25h10c.7 0 1.25-.56 1.25-1.25v-1a.75.75 0 0 1 1.5 0v1A2.75 2.75 0 0 1 13 14.75H3A2.75 2.75 0 0 1 .25 12v-1c0-.41.34-.75.75-.75Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;Download apps&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/main&gt;&lt;footer class=&#34;pbs-96 md-pbs-128 MXtus134DS2wrEDs2ROV _d57SGn8vOubB9hlfp6Y&#34; style=&#34;background-color:var(--product-ui-background-antique)&#34;&gt;&lt;div class=&#34;mJhiVUepQlh3t2sM5K9e YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34; style=&#34;--hairline-color:var(--ui-border)&#34;&gt;&lt;div class=&#34;iTrmyjlwfZjq93__YwbZ&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF SjnnY1xZKQ3O3YyVHw3D OEsFnI6y_oUfzgMNpsxQ&#34; aria-label=&#34;Home&#34; href=&#34;/home&#34;&gt;&lt;div class=&#34;ZBX6ji69IqUYUnnbG9hO&#34;&gt;&lt;div class=&#34;JDguX5oZL3ITNTthPuWx&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 128 32&#34; fill=&#34;none&#34; preserveAspectRatio=&#34;xMinYMid slice&#34; height=&#34;32&#34; class=&#34;Q50myWJrCdcY1FP3c1OV&#34;&gt;&lt;rect width=&#34;32&#34; height=&#34;32&#34; fill=&#34;var(--display-onlight-primary)&#34; rx=&#34;5.12&#34;&gt;&lt;/rect&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m6.764 14.993 6.374-3.668.008-.005 6.568-3.78c.277-.16.29-.65-.02-.828l-.217-.124c-.317-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.09-10.501 6.038-10.847 6.235a1.349 1.349 0 0 1-1.339 0L-.072 9.144v2.699l.056.032c1.364.795 4.592 2.675 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m6.764 20.385 6.366-3.664.024-.014 6.56-3.775c.277-.16.29-.651-.02-.828l-.217-.124c-.316-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.089-10.501 6.038-10.847 6.234a1.349 1.349 0 0 1-1.339 0c-.326-.188-5.464-3.174-5.464-3.174v2.698l.056.033c1.365.795 4.592 2.674 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m13.139 22.108-6.375 3.669c-.461.266-.92.272-1.398.002-.79-.446-4.017-2.325-5.382-3.12l-.056-.033v-2.698l5.464 3.174c.413.239.925.236 1.339 0 .346-.196 10.692-6.145 10.847-6.235a1.02 1.02 0 0 1 .997-.012 125.007 125.007 0 0 0 1.12.64c.31.178.296.669.019.829l-6.575 3.784Z&#34;&gt;&lt;/path&gt;&lt;g&gt;&lt;path fill=&#34;var(--display-onlight-primary)&#34; d=&#34;M55.65 18.73c0 .515.089 1.015.264 1.492.176.481.432.904.774 1.273.342.37.751.664 1.23.884.48.221 1.025.331 1.632.331.608 0 1.152-.11 1.631-.33a3.768 3.768 0 0 0 2.005-2.158c.173-.477.26-.977.26-1.492s-.087-1.015-.26-1.494a3.779 3.779 0 0 0-.774-1.271 3.863 3.863 0 0 0-1.23-.885 3.865 3.865 0 0 0-1.632-.333c-.607 0-1.152.113-1.631.333-.48.221-.889.516-1.23.885a3.74 3.74 0 0 0-.775 1.27c-.175.48-.263.98-.263 1.495Zm-3.316 0c0-1.05.19-2.005.567-2.862a6.665 6.665 0 0 1 1.535-2.198 6.78 6.78 0 0 1 2.293-1.411 8 8 0 0 1 2.821-.497c.995 0 1.935.166 2.82.497a6.81 6.81 0 0 1 2.294 1.41 6.689 6.689 0 0 1 1.535 2.199c.378.857.567 1.811.567 2.862 0 1.05-.19 2.005-.567 2.862a6.688 6.688 0 0 1-1.535 2.198A6.766 6.766 0 0 1 62.37 25.2a7.934 7.934 0 0 1-2.819.497 7.946 7.946 0 0 1-2.821-.497 6.735 6.735 0 0 1-2.293-1.409 6.664 6.664 0 0 1-1.535-2.198c-.378-.857-.567-1.811-.567-2.862ZM71.63 18.734c0 .515.087 1.015.263 1.492.175.481.431.904.773 1.273.342.37.752.664 1.231.884.48.22 1.024.331 1.631.331.608 0 1.152-.11 1.632-.33a3.762 3.762 0 0 0 2.005-2.158 4.35 4.35 0 0 0 .26-1.492c0-.515-.087-1.015-.26-1.494a3.772 3.772 0 0 0-2.005-2.156 3.864 3.864 0 0 0-1.632-.333c-.607 0-1.152.113-1.63.333a3.86 3.86 0 0 0-1.232.885c-.341.369-.598.792-.773 1.27-.176.48-.264.98-.264 1.495Zm7.852 4.644h-.057c-.479.812-1.122 1.402-1.934 1.77a6.292 6.292 0 0 1-2.626.552c-1.033 0-1.949-.178-2.752-.538a6.162 6.162 0 0 1-2.059-1.48 6.311 6.311 0 0 1-1.3-2.212 8.26 8.26 0 0 1-.441-2.736 7.8 7.8 0 0 1 .47-2.738 6.813 6.813 0 0 1 1.312-2.212 6.076 6.076 0 0 1 2.031-1.478c.794-.36 1.66-.54 2.6-.54.627 0 1.18.065 1.66.193.479.13.902.295 1.27.5a4.807 4.807 0 0 1 1.575 1.325h.084V6.473c0-.331.263-.722.724-.722h1.873c.434 0 .722.364.722.722v18.173c0 .462-.391.723-.722.723h-1.705a.732.732 0 0 1-.725-.721v-1.27ZM88.157 18.73c0 .515.088 1.015.264 1.492.175.481.432.904.774 1.273a3.85 3.85 0 0 0 1.23.884c.48.221 1.024.331 1.632.331.607 0 1.152-.11 1.631-.33a3.763 3.763 0 0 0 2.005-2.158c.173-.477.26-.977.26-1.492s-.087-1.015-.26-1.494a3.774 3.774 0 0 0-2.005-2.156 3.866 3.866 0 0 0-1.631-.333c-.608 0-1.153.113-1.632.333-.479.221-.888.516-1.23.885-.342.369-.599.792-.774 1.27-.176.48-.264.98-.264 1.495Zm-3.316 0c0-1.05.189-2.005.567-2.862a6.663 6.663 0 0 1 1.534-2.198 6.78 6.78 0 0 1 2.293-1.411 8 8 0 0 1 2.822-.497c.994 0 1.935.166 2.819.497a6.81 6.81 0 0 1 2.295 1.41 6.689 6.689 0 0 1 1.534 2.199c.378.857.568 1.811.568 2.862 0 1.05-.19 2.005-.567 2.862a6.688 6.688 0 0 1-1.535 2.198 6.766 6.766 0 0 1-2.295 1.409 7.934 7.934 0 0 1-2.82.497 7.946 7.946 0 0 1-2.82-.497 6.736 6.736 0 0 1-2.294-1.409 6.662 6.662 0 0 1-1.534-2.198c-.378-.857-.567-1.811-.567-2.862ZM100.945 7.588c0-.535.198-.999.594-1.398.398-.395.9-.594 1.507-.594.608 0 1.121.19 1.535.568.414.378.623.852.623 1.424a1.85 1.85 0 0 1-.623 1.424c-.414.378-.927.567-1.535.567-.607 0-1.109-.198-1.507-.596-.396-.396-.594-.86-.594-1.395ZM114.64 15.77c-.331 0-.575-.25-.616-.359-.276-.723-1.155-.994-1.865-.994-1.119 0-1.997.519-1.997 1.41 0 .863.85 1.04 1.375 1.199.576.174 1.677.414 2.284.557a7.419 7.419 0 0 1 1.728.636c1.761.915 2.012 2.354 2.012 3.22 0 3.197-3.167 4.257-5.366 4.257-1.695 0-4.879-.257-5.578-3.488-.068-.315.21-.798.721-.798h1.832c.36 0 .603.263.674.47.235.649.983 1.14 2.245 1.14 1.353 0 2.153-.537 2.153-1.251 0-.462-.261-.872-.603-1.104-1.026-.696-3.564-.774-4.942-1.508-.528-.28-1.852-.922-1.852-3.109 0-3.015 2.741-4.286 5.149-4.286 3.551 0 4.854 2.243 5.001 3.075.081.459-.176.934-.692.934h-1.663ZM117.833 14.129v-1.373c0-.327.258-.721.717-.721h1.769v-3.37c0-.36.244-.58.429-.66l1.89-.825c.552-.227.999.228.999.666v4.189h2.928c.453 0 .722.395.722.721v1.375a.745.745 0 0 1-.721.723h-2.929v5.808c0 .663-.018 1.182.235 1.565.233.351.574.482 1.257.482.196 0 .371-.033.519-.083a.706.706 0 0 1 .868.317c.216.418.463.877.636 1.206.191.361.037.825-.311.993-.561.273-1.339.494-2.406.494-.884 0-1.385-.096-1.945-.29a3.347 3.347 0 0 1-1.417-1c-.324-.396-.484-.926-.604-1.516-.122-.59-.15-1.304-.15-2.08v-5.896h-1.765c-.463 0-.721-.4-.721-.725ZM41.928 14.129v-1.373c0-.327.259-.721.717-.721h2.021v-3.37c0-.36.245-.58.43-.66l1.89-.825c.552-.227.999.228.999.666v4.189h2.928c.452 0 .722.395.722.721v1.375a.745.745 0 0 1-.722.723h-2.928v5.808c0 .663-.018 1.182.235 1.565.232.351.573.482 1.257.482.196 0 .37-.033.519-.083a.706.706 0 0 1 .867.317c.217.418.464.877.637 1.206.19.361.037.825-.311.993-.562.273-1.34.494-2.406.494-.884 0-1.385-.096-1.945-.29a3.351 3.351 0 0 1-1.418-1c-.324-.396-.484-.926-.603-1.516-.122-.59-.15-1.304-.15-2.08v-5.896H42.65c-.463 0-.722-.4-.722-.725ZM102.115 25.37h1.876a.723.723 0 0 0 .721-.723v-11.89a.723.723 0 0 0-.721-.722h-1.876a.724.724 0 0 0-.721.722v11.89c0 .398.325.722.721.722Z&#34;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;nXWXUhDvwGosQscGvXZK&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 32 32&#34; fill=&#34;none&#34; preserveAspectRatio=&#34;xMinYMid slice&#34; height=&#34;32&#34; class=&#34;Q50myWJrCdcY1FP3c1OV&#34;&gt;&lt;rect width=&#34;32&#34; height=&#34;32&#34; fill=&#34;var(--display-onlight-primary)&#34; rx=&#34;5.12&#34;&gt;&lt;/rect&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m6.764 14.993 6.374-3.668.008-.005 6.568-3.78c.277-.16.29-.65-.02-.828l-.217-.124c-.317-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.09-10.501 6.038-10.847 6.235a1.349 1.349 0 0 1-1.339 0L-.072 9.144v2.699l.056.032c1.364.795 4.592 2.675 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m6.764 20.385 6.366-3.664.024-.014 6.56-3.775c.277-.16.29-.651-.02-.828l-.217-.124c-.316-.18-.727-.414-.902-.516a1.02 1.02 0 0 0-.997.012c-.155.089-10.501 6.038-10.847 6.234a1.349 1.349 0 0 1-1.339 0c-.326-.188-5.464-3.174-5.464-3.174v2.698l.056.033c1.365.795 4.592 2.674 5.382 3.12.479.27.937.264 1.398-.002Z&#34;&gt;&lt;/path&gt;&lt;path fill=&#34;var(--product-ui-background-antique)&#34; d=&#34;m13.139 22.108-6.375 3.669c-.461.266-.92.272-1.398.002-.79-.446-4.017-2.325-5.382-3.12l-.056-.033v-2.698l5.464 3.174c.413.239.925.236 1.339 0 .346-.196 10.692-6.145 10.847-6.235a1.02 1.02 0 0 1 .997-.012 125.007 125.007 0 0 0 1.12.64c.31.178.296.669.019.829l-6.575 3.784Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF Y5eL4cjJHcHaCQ8EbL7V ghjFWYpaMMS6gFyyKavs&#34;&gt;Join millions of people who organize work and life with Todoist.&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;JBVd9xPdHa6T2HcOw9nl&#34;&gt;&lt;div class=&#34;lWbjERyt2pLGn3F9mPqi&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA TZubjRgryCWQXB67QkAP&#34;&gt;Features&lt;/p&gt;&lt;ol class=&#34;b7MGHZeFYj8Es7O3Y5FG&#34;&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/features&#34;&gt;How It Works&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/business&#34;&gt;For Teams&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/pricing&#34;&gt;Pricing&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/templates&#34;&gt;Templates&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class=&#34;lWbjERyt2pLGn3F9mPqi&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA TZubjRgryCWQXB67QkAP&#34;&gt;Resources&lt;/p&gt;&lt;ol class=&#34;b7MGHZeFYj8Es7O3Y5FG&#34;&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/downloads&#34;&gt;Download Apps&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/help?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;Help Center&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/productivity-methods&#34;&gt;Productivity Methods&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/integrations&#34;&gt;Integrations&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/channelpartners&#34;&gt;Channel Partners&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://developer.todoist.com&#34;&gt;Developer API&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://status.todoist.com/&#34;&gt;Status&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class=&#34;lWbjERyt2pLGn3F9mPqi&#34;&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc DLF4ip7391hTQFmMhXrA TZubjRgryCWQXB67QkAP&#34;&gt;Company&lt;/p&gt;&lt;ol class=&#34;b7MGHZeFYj8Es7O3Y5FG&#34;&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://doist.com?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;About Us&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://doist.com/jobs?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;Careers&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;/inspiration?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;Inspiration Hub&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://doist.com/press/?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;Press&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li class=&#34;BMzxjIUzYbp1Q25OJjHV&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF zA288Pg0ZRE8YcTi8CRc AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR IESvGIboWqfsXKFfl5m1&#34; href=&#34;https://twist.com/?utm_source=todoist&amp;amp;utm_medium=landing_page&amp;amp;utm_campaign=home&#34;&gt;Twist&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 16 16&#34; class=&#34;T4V9y6v2rlu3n550XIYd&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.47 3.47a.75.75 0 0 0 0 1.06L9.94 8l-3.47 3.47a.75.75 0 1 0 1.06 1.06l4-4a.75.75 0 0 0 0-1.06l-4-4a.75.75 0 0 0-1.06 0z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div class=&#34;UZBe4HG8k_xSdw13rsgB&#34;&gt;&lt;ul class=&#34;zIzWA00Iqj66gojcYj49&#34;&gt;&lt;li&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ pHhuYvJY2LjocMtj5pZv&#34; aria-label=&#34;Todoist on Twitter&#34; href=&#34;https://twitter.com/todoist&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 24 24&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;M22.393 3.339a8.874 8.874 0 0 1-2.868 1.121A4.452 4.452 0 0 0 16.23 3c-2.49 0-4.512 2.072-4.512 4.628 0 .363.039.715.116 1.054-3.75-.193-7.076-2.034-9.304-4.837a4.711 4.711 0 0 0-.61 2.329c0 1.605.796 3.022 2.008 3.852a4.424 4.424 0 0 1-2.046-.577v.056c0 2.244 1.556 4.115 3.622 4.539a4.305 4.305 0 0 1-1.19.162c-.29 0-.574-.027-.849-.081.575 1.838 2.24 3.177 4.216 3.212A8.91 8.91 0 0 1 1 19.256a12.564 12.564 0 0 0 6.919 2.077c8.303 0 12.842-7.05 12.842-13.167 0-.202-.004-.403-.011-.6A9.269 9.269 0 0 0 23 5.17a8.84 8.84 0 0 1-2.592.729 4.621 4.621 0 0 0 1.985-2.56z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ pHhuYvJY2LjocMtj5pZv&#34; aria-label=&#34;Todoist on YouTube&#34; href=&#34;https://www.youtube.com/channel/UCQ_61yRKscCnkIJBPoR15EA&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 24 24&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;M3.598 4.242C6.958 4 11.995 4 11.995 4h.01s5.038 0 8.396.242l.155.016c.515.05 1.427.138 2.25.995.72.725.954 2.371.954 2.371S24 9.557 24 11.49v1.812c0 1.933-.24 3.866-.24 3.866s-.234 1.646-.954 2.371c-.823.858-1.735.946-2.25.996-.057.005-.108.01-.155.016-3.358.241-8.401.249-8.401.249s-6.24-.057-8.16-.24c-.091-.017-.202-.03-.327-.045-.609-.073-1.562-.187-2.32-.976-.719-.725-.953-2.37-.953-2.37S0 15.234 0 13.301V11.49c0-1.933.24-3.866.24-3.866s.234-1.646.954-2.37c.823-.858 1.735-.947 2.25-.996.057-.006.108-.01.154-.016zm12.408 7.912L9.521 8.787l.001 6.711 6.484-3.344z&#34; fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ pHhuYvJY2LjocMtj5pZv&#34; aria-label=&#34;Todoist on Facebook&#34; href=&#34;https://facebook.com/todoist&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 24 24&#34; aria-hidden=&#34;true&#34;&gt;&lt;path d=&#34;M23 12.067C23 5.955 18.075 1 12 1S1 5.955 1 12.067C1 17.591 5.023 22.17 10.281 23v-7.734H7.488v-3.199h2.793V9.63c0-2.774 1.643-4.306 4.155-4.306 1.203 0 2.462.216 2.462.216v2.724h-1.387c-1.366 0-1.792.853-1.792 1.73v2.074h3.05l-.487 3.2h-2.563V23C18.977 22.17 23 17.591 23 12.067z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF RoZJQRuSAywd550zWiXo AisLsJaE_AWnIhDlnTUV yJmXDmy7f2C2dFexmqOR o9DYmt4xfLaImiVzI9dQ pHhuYvJY2LjocMtj5pZv&#34; aria-label=&#34;Todoist on Instagram&#34; href=&#34;https://www.instagram.com/todoistofficial&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;currentColor&#34; viewBox=&#34;0 0 24 24&#34; aria-hidden=&#34;true&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M6.608 12a5.392 5.392 0 1 1 10.784 0 5.392 5.392 0 0 1-10.784 0zM12 15.5a3.5 3.5 0 1 1 0-7 3.5 3.5 0 0 1 0 7z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;path d=&#34;M17.605 7.655a1.26 1.26 0 1 0 0-2.52 1.26 1.26 0 0 0 0 2.52z&#34;&gt;&lt;/path&gt;&lt;path fill-rule=&#34;evenodd&#34; d=&#34;M12 1.5c-2.852 0-3.21.012-4.33.063-1.117.051-1.88.229-2.548.488a5.146 5.146 0 0 0-1.86 1.211 5.146 5.146 0 0 0-1.21 1.86c-.26.668-.438 1.431-.489 2.549C1.513 8.79 1.5 9.148 1.5 12c0 2.852.012 3.21.063 4.33.051 1.117.229 1.88.488 2.548.269.69.628 1.276 1.211 1.86.584.583 1.17.942 1.86 1.21.668.26 1.431.438 2.549.489 1.12.05 1.477.063 4.329.063 2.852 0 3.21-.012 4.33-.063 1.117-.051 1.88-.229 2.548-.488a5.149 5.149 0 0 0 1.86-1.211 5.149 5.149 0 0 0 1.21-1.86c.26-.668.438-1.431.489-2.549.05-1.12.063-1.477.063-4.329 0-2.852-.012-3.21-.063-4.33-.051-1.117-.229-1.88-.488-2.548a5.148 5.148 0 0 0-1.211-1.86 5.147 5.147 0 0 0-1.86-1.21c-.668-.26-1.431-.438-2.549-.489C15.21 1.513 14.852 1.5 12 1.5zm0 1.892c2.804 0 3.136.01 4.243.061 1.024.047 1.58.218 1.95.362.49.19.84.418 1.207.785.367.368.595.717.785 1.207.144.37.315.926.362 1.95.05 1.107.061 1.44.061 4.243 0 2.804-.01 3.136-.061 4.243-.047 1.024-.218 1.58-.362 1.95-.19.49-.418.84-.785 1.207a3.254 3.254 0 0 1-1.207.785c-.37.144-.926.315-1.95.362-1.107.05-1.44.061-4.243.061-2.804 0-3.136-.01-4.243-.061-1.024-.047-1.58-.218-1.95-.362-.49-.19-.84-.418-1.207-.785a3.253 3.253 0 0 1-.785-1.207c-.144-.37-.315-.926-.362-1.95-.05-1.107-.061-1.44-.061-4.243 0-2.804.01-3.136.061-4.243.047-1.024.218-1.58.362-1.95.19-.49.418-.84.785-1.207a3.253 3.253 0 0 1 1.207-.785c.37-.144.926-.315 1.95-.362 1.107-.05 1.44-.061 4.243-.061z&#34; clip-rule=&#34;evenodd&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;kJ_P1SL9ZvC1wLstHbqp&#34; style=&#34;background-color:var(--product-ui-background-antique)&#34;&gt;&lt;div class=&#34;GHxray4ydudJBMpJdMPS YttEe7kIjjIAtcbhghld BNiOPRzcZXhZrycvcnLa&#34;&gt;&lt;div class=&#34;VxijLRKqoSQVEzALqkgZ&#34;&gt;&lt;ul class=&#34;DFwZNR0zYDpb7fqUM3o6&#34;&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF tH0z6dflaPdI1YyOhjCF&#34; href=&#34;/security&#34;&gt;Security&lt;/a&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF tH0z6dflaPdI1YyOhjCF&#34; href=&#34;/privacy&#34;&gt;Privacy&lt;/a&gt;&lt;a class=&#34;Z2j5FoeQ_umI7vX0SmxF tH0z6dflaPdI1YyOhjCF&#34; href=&#34;/terms&#34;&gt;Terms&lt;/a&gt;&lt;/ul&gt;&lt;p class=&#34;Z2j5FoeQ_umI7vX0SmxF tH0z6dflaPdI1YyOhjCF&#34;&gt;© Doist Inc.&lt;/p&gt;&lt;/div&gt;&lt;div class=&#34;pGaQBhZ1Qh3tUas7U3QJ&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;&#34;&gt;&lt;div class=&#34;vTIN3fP7nNhIbeK_N3YV&#34; style=&#34;--stack:var(--space-12)&#34;&gt;&lt;div class=&#34;yfJzOw4KLuIxWXg2L1RV hCYLYFRPa7x1YWWmBOQT dJ5vG7SdSqW18a6awhAX&#34;&gt;&lt;div class=&#34;f1UEDh2juopQJOFpTNtO&#34;&gt;&lt;svg viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; aria-hidden=&#34;true&#34;&gt;&lt;path fill-rule=&#34;evenodd&#34; clip-rule=&#34;evenodd&#34; d=&#34;M6.012 3.14a5.249 5.249 0 0 0-3.208 4.11h2.46c.058-1.424.275-2.723.61-3.73.043-.13.09-.256.138-.38ZM8 1.25a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5Zm0 1.505a.647.647 0 0 0-.19.18c-.165.21-.346.56-.513 1.06-.277.832-.475 1.965-.53 3.255h2.467c-.056-1.29-.254-2.423-.531-3.256-.167-.5-.348-.849-.514-1.059A.647.647 0 0 0 8 2.755Zm2.735 4.495c-.057-1.424-.274-2.723-.61-3.73a7.557 7.557 0 0 0-.137-.38 5.25 5.25 0 0 1 3.208 4.11h-2.46Zm-1.501 1.5H6.766c.056 1.289.254 2.422.531 3.255.167.5.348.849.514 1.059.096.122.16.166.189.18a.647.647 0 0 0 .19-.18c.165-.21.346-.56.513-1.06.277-.832.475-1.965.53-3.254Zm-3.222 4.108a7.476 7.476 0 0 1-.138-.379c-.335-1.006-.552-2.306-.61-3.73h-2.46a5.25 5.25 0 0 0 3.208 4.11Zm3.976 0c.049-.123.095-.25.138-.379.335-1.006.552-2.306.61-3.73h2.46a5.25 5.25 0 0 1-3.208 4.11Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;select class=&#34;DaZiETNVTwsEP7Ky_aTl Z2j5FoeQ_umI7vX0SmxF V0mB2BLv4MZSojdU0DJU zW1zRZ8jOBjHSOiU5mJP qp2mWWXVKuG2VN5YPA2F&#34; id=&#34;language-picker&#34; aria-describedby=&#34;language-picker-message language-picker-description&#34; aria-label=&#34;Select language&#34;&gt;&lt;option value=&#34;cs&#34;&gt;Čeština&lt;/option&gt;&lt;option value=&#34;da&#34;&gt;Dansk&lt;/option&gt;&lt;option value=&#34;de&#34;&gt;Deutsch&lt;/option&gt;&lt;option value=&#34;en&#34; selected=&#34;&#34;&gt;English&lt;/option&gt;&lt;option value=&#34;es&#34;&gt;Español&lt;/option&gt;&lt;option value=&#34;fi&#34;&gt;Suomi&lt;/option&gt;&lt;option value=&#34;fr&#34;&gt;Français&lt;/option&gt;&lt;option value=&#34;it&#34;&gt;Italiano&lt;/option&gt;&lt;option value=&#34;ja&#34;&gt;日本語&lt;/option&gt;&lt;option value=&#34;ko&#34;&gt;한국어&lt;/option&gt;&lt;option value=&#34;nb&#34;&gt;Norsk&lt;/option&gt;&lt;option value=&#34;nl&#34;&gt;Nederlands&lt;/option&gt;&lt;option value=&#34;pl&#34;&gt;Polski&lt;/option&gt;&lt;option value=&#34;pt-BR&#34;&gt;Português (Brazil)&lt;/option&gt;&lt;option value=&#34;ru&#34;&gt;Pусский (Russian)&lt;/option&gt;&lt;option value=&#34;sv&#34;&gt;Svenska&lt;/option&gt;&lt;option value=&#34;tr&#34;&gt;Türkçe&lt;/option&gt;&lt;option value=&#34;zh-CN&#34;&gt;中文 (简体)&lt;/option&gt;&lt;option value=&#34;zh-TW&#34;&gt;中文 (繁體)&lt;/option&gt;&lt;/select&gt;&lt;span class=&#34;Pva1um76EjjNI_RQc8FE&#34; aria-hidden=&#34;true&#34;&gt;&lt;svg width=&#34;16&#34; height=&#34;16&#34; viewBox=&#34;0 0 16 16&#34; fill=&#34;currentColor&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M8 2.25c.21 0 .41.1.55.25l2.75 3a.75.75 0 0 1-1.1 1L8 4.12l-2.2 2.4A.75.75 0 0 1 4.7 5.5l2.75-3A.75.75 0 0 1 8 2.25Zm-3.26 7.2a.75.75 0 0 1 1.06.05L8 11.9l2.2-2.4a.75.75 0 0 1 1.1 1l-2.75 3a.75.75 0 0 1-1.1 0l-2.75-3a.75.75 0 0 1 .04-1.05Z&#34;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/footer&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id=&#34;__NEXT_DATA__&#34; type=&#34;application/json&#34;&gt;{&#34;props&#34;:{&#34;pageProps&#34;:{&#34;_sentryTraceData&#34;:&#34;3b529ee5063e4f8bb942ae5e1a33291e-bd8d838fe8babfe5-0&#34;,&#34;_sentryBaggage&#34;:&#34;sentry-environment=production,sentry-release=tjRfPRPy4aH1G4B1hKB1F,sentry-transaction=%2F,sentry-public_key=21c438116884488993d944bb643cb906,sentry-trace_id=3b529ee5063e4f8bb942ae5e1a33291e,sentry-sample_rate=0&#34;,&#34;webpSupport&#34;:false,&#34;isAuthenticated&#34;:false,&#34;cookies&#34;:{},&#34;currency&#34;:&#34;USD&#34;,&#34;freePlanType&#34;:&#34;free_old&#34;,&#34;_nextI18Next&#34;:{&#34;initialI18nStore&#34;:{&#34;en&#34;:{&#34;common&#34;:{&#34;getStarted&#34;:&#34;Get Started&#34;,&#34;downloadMacStore&#34;:&#34;Download on the Mac App Store&#34;,&#34;downloadAppStore&#34;:&#34;Download on the App Store&#34;,&#34;downloadGooglePlay&#34;:&#34;Get it on Google Play&#34;,&#34;downloadMicrosoft&#34;:&#34;Get it from Microsoft&#34;,&#34;getApp&#34;:&#34;Get the app&#34;,&#34;signUpInSeconds&#34;:&#34;Sign up in seconds&#34;,&#34;seoTitle&#34;:&#34;The Best To Do List App u0026 Task Manager&#34;,&#34;seoDesc&#34;:&#34;Millions of people trust Todoist to tame life’s chaos. Ranked by The Verge as the world’s best to do list app. Free on iOS, Android, macOS, Windows, u0026 more.&#34;,&#34;seoOpenGraphTitle&#34;:&#34;Todoist – The Best To Do List App u0026 Task Manager&#34;,&#34;tryTodoist&#34;:&#34;Try Todoist&#34;,&#34;home&#34;:&#34;Home&#34;,&#34;templates&#34;:&#34;Templates&#34;,&#34;features&#34;:&#34;Features&#34;,&#34;premium&#34;:&#34;Premium&#34;,&#34;forTeams&#34;:&#34;For Teams&#34;,&#34;pricing&#34;:&#34;Pricing&#34;,&#34;upgrade&#34;:&#34;Upgrade&#34;,&#34;login&#34;:&#34;Log in&#34;,&#34;signup&#34;:&#34;Sign up&#34;,&#34;startForFree&#34;:&#34;Start for free&#34;,&#34;openTodoist&#34;:&#34;Open Todoist&#34;,&#34;todoistOnFacebook&#34;:&#34;Todoist on Facebook&#34;,&#34;todoistOnTwitter&#34;:&#34;Todoist on Twitter&#34;,&#34;todoistOnYoutube&#34;:&#34;Todoist on YouTube&#34;,&#34;todoistOnInstagram&#34;:&#34;Todoist on Instagram&#34;,&#34;selectLanguage&#34;:&#34;Select your language&#34;,&#34;howItWorks&#34;:&#34;How It Works&#34;,&#34;resources&#34;:&#34;Resources&#34;,&#34;downloadApps&#34;:&#34;Download Apps&#34;,&#34;helpCenter&#34;:&#34;Help Center&#34;,&#34;integrations&#34;:&#34;Integrations&#34;,&#34;integrationsDesc&#34;:&#34;Connect Todoist with tools like IFTTT, Alexa, Google Calendar, and more...&#34;,&#34;developerApi&#34;:&#34;Developer API&#34;,&#34;status&#34;:&#34;Status&#34;,&#34;wunderlistAlternative&#34;:&#34;Wunderlist alternative&#34;,&#34;company&#34;:&#34;Company&#34;,&#34;aboutUs&#34;:&#34;About Us&#34;,&#34;careers&#34;:&#34;Careers&#34;,&#34;inspirationHub&#34;:&#34;Inspiration Hub&#34;,&#34;press&#34;:&#34;Press&#34;,&#34;twist&#34;:&#34;Twist&#34;,&#34;new&#34;:&#34;New&#34;,&#34;cookie&#34;:&#34;This site uses cookies for analysis, as well as for personalized content and advertising. By continuing to browse this site, you are accepting this use.&#34;,&#34;joinMillionsPeople&#34;:&#34;Join millions of people who organize work and life with Todoist.&#34;,&#34;security&#34;:&#34;Security&#34;,&#34;privacy&#34;:&#34;Privacy&#34;,&#34;terms&#34;:&#34;Terms&#34;,&#34;shareOnFb&#34;:&#34;Share on Facebook&#34;,&#34;shareOnTt&#34;:&#34;Share on Twitter&#34;,&#34;shareOnMail&#34;:&#34;Share by email&#34;,&#34;comingFromWunderlist&#34;:&#34;Coming from Wunderlist?&#34;,&#34;importWunderlistTasks&#34;:&#34;Import your Wunderlist tasks to Todoist&#34;,&#34;close&#34;:&#34;Close&#34;,&#34;closeBanner&#34;:&#34;Close banner&#34;,&#34;yearInReview&#34;:&#34;Year in Review&#34;,&#34;productivityMethods&#34;:&#34;Productivity Methods&#34;,&#34;gettingStartedGuides&#34;:&#34;Getting Started Guide&#34;,&#34;gettingStartedGuidesDesc&#34;:&#34;Everything you need to know to get your Todoist up and running in minutes.&#34;,&#34;helpCenterDesc&#34;:&#34;Find answers to your questions and tips for getting the most out of your Todoist.&#34;,&#34;productivityMethodsPlusQuiz&#34;:&#34;Productivity Methods + Quiz&#34;,&#34;productivityMethodsPlusQuizDesc&#34;:&#34;Learn the most popular productivity methods and discover which one fits you best.&#34;,&#34;inspirationHubDesc&#34;:&#34;Productivity advice you won‘t find anywhere else, plus Todoist tips and product news.&#34;,&#34;channelpartners&#34;:&#34;Channel Partners&#34;,&#34;openOnTwitter&#34;:&#34;Open on Twitter&#34;,&#34;boardsBannerText&#34;:&#34;Introducing Boards: A more visual way to move your projects forward.&#34;,&#34;boardsBannerLink&#34;:&#34;Learn more&#34;,&#34;openMenu&#34;:&#34;Open menu&#34;,&#34;closeMenu&#34;:&#34;Close menu&#34;,&#34;readBlog&#34;:&#34;Read blog&#34;,&#34;search&#34;:&#34;Search&#34;,&#34;clearSearch&#34;:&#34;Clear search&#34;,&#34;previous&#34;:&#34;Previous&#34;,&#34;next&#34;:&#34;Next&#34;,&#34;uploadIndicator&#34;:{&#34;uploading&#34;:&#34;Uploading…&#34;,&#34;uploadCompleted&#34;:&#34;Upload completed!&#34;,&#34;uploadFailed&#34;:&#34;Upload failed!&#34;,&#34;removeFile&#34;:&#34;Remove file&#34;,&#34;openPreview&#34;:&#34;Open preview&#34;}},&#34;home-teams&#34;:{&#34;seoTitle&#34;:&#34;Todoist | A To-Do List to Organize Your Work u0026 Life&#34;,&#34;seoDescription&#34;:&#34;Trusted by 30 million people and teams. Todoist is the world&#39;s favorite task manager and to-do list app. Finally become focused, organized and calm.&#34;,&#34;seoImageAlt&#34;:&#34;Organize work u0026 life&#34;,&#34;heroTitle&#34;:&#34;Organize your work and life, finally.&#34;,&#34;heroSubtitle&#34;:&#34;Become focused, organized, and calm with Todoist. The world’s #1 task manager and to-do list app.&#34;,&#34;ctaButtonText&#34;:&#34;Start for free&#34;,&#34;companyTitle&#34;:&#34;30 million+ people and teams trust their sanity and productivity to Todoist&#34;,&#34;productuiScene1&#34;:{&#34;preheader&#34;:&#34;Clear your mind&#34;,&#34;title&#34;:&#34;The fastest way to get tasks out of your head.&#34;,&#34;description&#34;:&#34;Type just about anything into the task field and Todoist’s one-of-its-kind natural language recognition will instantly fill your to-do list.&#34;},&#34;productuiScene2&#34;:{&#34;preheader&#34;:&#34;Focus on what’s important&#34;,&#34;title&#34;:&#34;Reach that mental clarity you’ve been longing for.&#34;,&#34;description&#34;:&#34;Your tasks are automatically sorted into Today, Upcoming, and custom Filter views to help you prioritize your most important work.&#34;},&#34;productuiScene3&#34;:{&#34;preheader&#34;:&#34;Get it all done&#34;,&#34;title&#34;:&#34;Where work and personal tasks can finally coexist.&#34;,&#34;description&#34;:&#34;Tons of tasks, just one app. With workspaces, your personal, work, and team tasks can all live harmoniously under the same roof. (Sigh of relief).&#34;},&#34;complexitySlider&#34;:{&#34;title&#34;:&#34;“Todoist makes it easy to go as simple or as complex as you want”&#34;,&#34;titleAuthor&#34;:&#34;– The Verge&#34;,&#34;linkToFeatures&#34;:&#34;Explore more features&#34;,&#34;simple&#34;:&#34;Simple&#34;,&#34;advanced&#34;:&#34;Advanced&#34;,&#34;items&#34;:{&#34;task&#34;:{&#34;title&#34;:&#34;Add a task&#34;,&#34;tooltip&#34;:&#34;Step one…&#34;},&#34;completeIt&#34;:{&#34;title&#34;:&#34;Complete it&#34;,&#34;tooltip&#34;:&#34;And now you&#39;re done!&#34;},&#34;dueDate&#34;:{&#34;title&#34;:&#34;Give it a due date&#34;,&#34;tooltip&#34;:&#34;Like &#34;today &#34; or &#34;every weekday at 10am &#34;&#34;},&#34;reminder&#34;:{&#34;title&#34;:&#34;Schedule a reminder&#34;,&#34;tooltip&#34;:&#34;At a time of day or location&#34;},&#34;taskPriority&#34;:{&#34;title&#34;:&#34;Give tasks a priority level&#34;,&#34;tooltip&#34;:&#34;With 4 color-coded levels&#34;},&#34;completeTheTask&#34;:{&#34;title&#34;:&#34;Complete the task&#34;,&#34;tooltip&#34;:&#34;And now you&#39;re done!&#34;},&#34;subtasks&#34;:{&#34;title&#34;:&#34;Break it into subtasks&#34;,&#34;tooltip&#34;:&#34;To make it more manageable&#34;},&#34;projects&#34;:{&#34;title&#34;:&#34;Move tasks into projects&#34;,&#34;tooltip&#34;:&#34;With a simple drag u0026 drop&#34;},&#34;shareProjects&#34;:{&#34;title&#34;:&#34;Share your projects&#34;,&#34;tooltip&#34;:&#34;By adding someone via email&#34;},&#34;assignTasks&#34;:{&#34;title&#34;:&#34;Assign the tasks&#34;,&#34;tooltip&#34;:&#34;To keep folks accountable&#34;},&#34;setupReminders&#34;:{&#34;title&#34;:&#34;Set up reminders&#34;,&#34;tooltip&#34;:&#34;At a time of day or location&#34;},&#34;discussInComments&#34;:{&#34;title&#34;:&#34;Discuss in comments&#34;,&#34;tooltip&#34;:&#34;To centralize conversations&#34;},&#34;completeTasks&#34;:{&#34;title&#34;:&#34;Complete tasks&#34;,&#34;tooltip&#34;:&#34;And now you&#39;re done!&#34;},&#34;integrations&#34;:{&#34;title&#34;:&#34;Add some extensions&#34;,&#34;tooltip&#34;:&#34;For your calendar, email, etc.&#34;},&#34;filterViews&#34;:{&#34;title&#34;:&#34;Create filter views&#34;,&#34;tooltip&#34;:&#34;To customize your workflow&#34;}},&#34;steps&#34;:{&#34;easeIn&#34;:&#34;Ease in&#34;,&#34;organize&#34;:&#34;Organize&#34;,&#34;delegate&#34;:&#34;Delegate&#34;,&#34;customize&#34;:&#34;Customize&#34;},&#34;pro&#34;:&#34;Pro&#34;},&#34;exploreTitle&#34;:&#34;Explore all Todoist has to offer&#34;,&#34;exploreCards&#34;:{&#34;features&#34;:&#34;Features&#34;,&#34;templates&#34;:&#34;Template gallery&#34;,&#34;quiz&#34;:&#34;Productivity quiz&#34;,&#34;extensions&#34;:&#34;Extension gallery&#34;,&#34;inspiration&#34;:&#34;Inspiration hub&#34;},&#34;statsPreheader&#34;:&#34;In it for the long haul&#34;,&#34;statsTitle&#34;:&#34;A task manager you can trust for life&#34;,&#34;statsDescriptionYears&#34;:&#34;We’ve been building Todoist for {{count}} year&#34;,&#34;statsDescriptionYears_other&#34;:&#34;We’ve been building Todoist for {{count}} years&#34;,&#34;statsDescriptionDays&#34;:&#34;and {{count}} day.&#34;,&#34;statsDescriptionDays_other&#34;:&#34;and {{count}} days.&#34;,&#34;statsDescriptionRestAssured&#34;:&#34;Rest assured that we’ll never sell out to the highest bidder.&#34;,&#34;statsButtonText&#34;:&#34;Read about our long-term mission&#34;,&#34;statsBox1&#34;:{&#34;title&#34;:&#34;30+ million&#34;,&#34;desc&#34;:&#34;app downloads&#34;},&#34;statsBox2&#34;:{&#34;title&#34;:&#34;2 billion+&#34;,&#34;desc&#34;:&#34;tasks completed&#34;},&#34;statsBox3&#34;:{&#34;title&#34;:&#34;160+ countries&#34;,&#34;desc&#34;:&#34;worldwide&#34;},&#34;statsBox4&#34;:{&#34;title&#34;:&#34;1 million+&#34;,&#34;desc&#34;:&#34;Pro users&#34;},&#34;statsBox1Title30million&#34;:&#34;30+ million&#34;,&#34;statsBox1Desc&#34;:&#34;app downloads&#34;,&#34;statsBox2Title&#34;:&#34;2 billion+&#34;,&#34;statsBox2Desc&#34;:&#34;tasks completed&#34;,&#34;statsBox3Title160Countries&#34;:&#34;160+ countries&#34;,&#34;statsBox3Desc&#34;:&#34;worldwide&#34;,&#34;statsBox4Title&#34;:&#34;1 million+&#34;,&#34;statsBox4DescProUsers&#34;:&#34;Pro users&#34;,&#34;preFooter&#34;:{&#34;title&#34;:&#34;Gain calmness and clarity with the world’s most beloved productivity app&#34;,&#34;reviews_one&#34;:&#34;{{reviews}} ★★★★★ review on Google Play and App Store&#34;,&#34;reviews_few&#34;:&#34;{{reviews}}+ ★★★★★ reviews on Google Play and App Store&#34;,&#34;reviews_other&#34;:&#34;{{reviews}}+ ★★★★★ reviews on Google Play and App Store&#34;,&#34;getStartedButtonText&#34;:&#34;Get started free&#34;,&#34;downloadButtonText&#34;:&#34;Download apps&#34;}},&#34;productui&#34;:{&#34;play&#34;:&#34;Play&#34;,&#34;pause&#34;:&#34;Pause&#34;,&#34;permissionListItem&#34;:{&#34;member&#34;:&#34;Member&#34;},&#34;sideBar&#34;:{&#34;favorites&#34;:&#34;Favorites&#34;,&#34;workspaces&#34;:&#34;Workspaces&#34;},&#34;taskAttributePill&#34;:{&#34;dueDate&#34;:&#34;Due date&#34;,&#34;today&#34;:&#34;Today&#34;,&#34;tomorrow&#34;:&#34;Tomorrow&#34;,&#34;tomorrowTime&#34;:&#34;Tomorrow {{time}}&#34;,&#34;nextWeek&#34;:&#34;Next week&#34;,&#34;thisWeekend&#34;:&#34;This weekend&#34;,&#34;noDate&#34;:&#34;No date&#34;,&#34;priority&#34;:&#34;Priority&#34;,&#34;p1&#34;:&#34;P1&#34;,&#34;p2&#34;:&#34;P2&#34;,&#34;p3&#34;:&#34;P3&#34;,&#34;p4&#34;:&#34;P4&#34;,&#34;label&#34;:&#34;Label&#34;,&#34;reminders&#34;:&#34;Reminders&#34;,&#34;subtasks&#34;:&#34;{{count}}/{{total}}&#34;},&#34;view&#34;:{&#34;addProject&#34;:&#34;Add project&#34;,&#34;view&#34;:&#34;View&#34;,&#34;sortedPriority&#34;:&#34;Sorted by priority&#34;},&#34;quickAdd&#34;:{&#34;placeholders&#34;:{&#34;taskName&#34;:&#34;Task name&#34;,&#34;description&#34;:&#34;Description&#34;},&#34;inbox&#34;:&#34;Inbox&#34;,&#34;addTask&#34;:&#34;Add task&#34;},&#34;sequence&#34;:{&#34;quickadd&#34;:{&#34;callAlex&#34;:&#34;Call Alex&#34;,&#34;tomorrow&#34;:&#34;tomorrow&#34;,&#34;reviewTraffic&#34;:&#34;Review website traffic&#34;,&#34;everyMondayEightWeeks&#34;:&#34;every Monday for 8 weeks&#34;,&#34;everyMondayPill&#34;:&#34;Monday&#34;,&#34;readEmail&#34;:&#34;Read work emails&#34;,&#34;everyDay&#34;:&#34;every day&#34;,&#34;p1&#34;:&#34;p1&#34;,&#34;expenseReport&#34;:&#34;Do expense report&#34;,&#34;expenseReportWhen&#34;:&#34;every other Friday starting Dec 1 ending June 1&#34;,&#34;expenseReportWhenPill&#34;:&#34;1 Dec&#34;},&#34;todayView&#34;:{&#34;yoga&#34;:&#34;Do 30 minutes of yoga 🧘&#34;,&#34;shortcutUpdate&#34;:&#34;Shortcut update&#34;,&#34;buyBread&#34;:&#34;Buy bread 🍞&#34;,&#34;dentist&#34;:&#34;Dentist appointment&#34;,&#34;todoistZero&#34;:&#34;You reached #TodoistZero!&#34;},&#34;getItAllDone&#34;:{&#34;workspaces&#34;:&#34;Workspaces&#34;,&#34;personal&#34;:&#34;Personal&#34;,&#34;team&#34;:&#34;Team&#34;,&#34;fitness&#34;:&#34;Fitness&#34;,&#34;groceries&#34;:&#34;Groceries&#34;,&#34;appointments&#34;:&#34;Appointments&#34;,&#34;newBrand&#34;:&#34;New Brand&#34;,&#34;websiteUpdate&#34;:&#34;Website Update&#34;,&#34;productRoadmap&#34;:&#34;Product Roadmap&#34;,&#34;meetingAgenda&#34;:&#34;Meeting Agenda&#34;}}}}},&#34;initialLocale&#34;:&#34;en&#34;,&#34;ns&#34;:[&#34;common&#34;,&#34;home-teams&#34;,&#34;productui&#34;],&#34;userConfig&#34;:{&#34;i18n&#34;:{&#34;defaultLocale&#34;:&#34;en&#34;,&#34;locales&#34;:[&#34;en&#34;,&#34;ru&#34;,&#34;fr&#34;,&#34;nl&#34;,&#34;pt-BR&#34;,&#34;zh-CN&#34;,&#34;ko&#34;,&#34;nb&#34;,&#34;de&#34;,&#34;sv&#34;,&#34;tr&#34;,&#34;it&#34;,&#34;da&#34;,&#34;pl&#34;,&#34;fi&#34;,&#34;zh-TW&#34;,&#34;ja&#34;,&#34;es&#34;,&#34;cs&#34;],&#34;localeDetection&#34;:true},&#34;localePath&#34;:&#34;public/static/locales&#34;,&#34;react&#34;:{&#34;useSuspense&#34;:false},&#34;trailingSlash&#34;:true,&#34;returnNull&#34;:false,&#34;default&#34;:{&#34;i18n&#34;:{&#34;defaultLocale&#34;:&#34;en&#34;,&#34;locales&#34;:[&#34;en&#34;,&#34;ru&#34;,&#34;fr&#34;,&#34;nl&#34;,&#34;pt-BR&#34;,&#34;zh-CN&#34;,&#34;ko&#34;,&#34;nb&#34;,&#34;de&#34;,&#34;sv&#34;,&#34;tr&#34;,&#34;it&#34;,&#34;da&#34;,&#34;pl&#34;,&#34;fi&#34;,&#34;zh-TW&#34;,&#34;ja&#34;,&#34;es&#34;,&#34;cs&#34;],&#34;localeDetection&#34;:true},&#34;localePath&#34;:&#34;public/static/locales&#34;,&#34;react&#34;:{&#34;useSuspense&#34;:false},&#34;trailingSlash&#34;:true,&#34;returnNull&#34;:false}}},&#34;user&#34;:null,&#34;userPlan&#34;:null,&#34;pricingModel&#34;:null,&#34;pricingModelV2&#34;:null,&#34;absoluteUrl&#34;:&#34;https://todoist.com/&#34;,&#34;featureFlags&#34;:{&#34;flags&#34;:{&#34;teams_public_beta&#34;:true,&#34;teams_public_release&#34;:true,&#34;test_ab&#34;:false},&#34;identity&#34;:&#34;visitor_5ae6721c-20b9-4c27-8f88-0d7a89f88a5a&#34;,&#34;expiry&#34;:1690748608951},&#34;billingCycle&#34;:&#34;yearly&#34;,&#34;isInAppBrowser&#34;:false,&#34;query&#34;:{},&#34;years&#34;:16,&#34;days&#34;:182,&#34;celebrationStatesSocialImg&#34;:null},&#34;__N_SSP&#34;:true},&#34;page&#34;:&#34;/&#34;,&#34;query&#34;:{},&#34;buildId&#34;:&#34;tjRfPRPy4aH1G4B1hKB1F&#34;,&#34;isFallback&#34;:false,&#34;gssp&#34;:true,&#34;appGip&#34;:true,&#34;locale&#34;:&#34;en&#34;,&#34;locales&#34;:[&#34;en&#34;,&#34;ru&#34;,&#34;fr&#34;,&#34;nl&#34;,&#34;pt-BR&#34;,&#34;zh-CN&#34;,&#34;ko&#34;,&#34;nb&#34;,&#34;de&#34;,&#34;sv&#34;,&#34;tr&#34;,&#34;it&#34;,&#34;da&#34;,&#34;pl&#34;,&#34;fi&#34;,&#34;zh-TW&#34;,&#34;ja&#34;,&#34;es&#34;,&#34;cs&#34;],&#34;defaultLocale&#34;:&#34;en&#34;,&#34;scriptLoader&#34;:[]}&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; . 60. Deciding which Collection to Use . Notes: . The 2 main considerations when determining which type of data structure to use are: what you need the data structure to do, and what are the fastest/most efficient (e.g. in terms of insertion/deletion, retrieval, and traversal speeds) data structures for your purposes. | The 3 main groups of collections are Lists, Sets, and Maps, which are used the most often and are the most practical. There are other kinds of collections, such as Stacks and Queues, that are used occasionally and can also be quite useful at times. | Lists are a type of Generic collection that store ordered &quot;lists&quot; of objects (you can add elements to the end of the List by default, or add them to a specified index in the List), and each element in a List is marked with an index via an integer (zero-indexed, meaning start at 0, and increment by 1 for each consecutive element). Duplicates are allowed in Lists. | Checking if a particular element exists in a List is relatively slow (as the List has to traverse through itself to find it), accessing an element via index is fast due to the memory location of the element in the List being related to the index (memory location of the collection contains references to the memory locations of its elements), and iterating/traversing through a List is decently fast. The Collection class provides methods to sort Lists, and Lists can also be sorted via a custom method that reflects a type of sort (e.g. bubble sort, selection sort, etc.). Lists have 2 main sub-types: ArrayList and LinkedList. | Sets are a type of Generic collection that store only unique values, meaning they are useful for filtering out duplicate elements. They are not indexed (elements are accessed via iteration, or the Set is converted to a List then elements are accessed via index), and can either be ordered or un-ordered, depending on the sub-type you are using, which can be HashSet, LinkedHashSet, or TreeSet. Checking if a particular element exists in a Set is very fast due to the optimized built-in contains() method. When storing custom objects into Sets, the class of those objects needs to implement the hashCode() and equals() method, so that the Sets can determine whether or not 2 objects are distinct from each other. | Maps are a type of Generic collection that stores elements as key-value pairs, where the keys have the be unique, but there can be duplicate values. A Map is sort of like a lookup table, as it literally contains an internal hash table. Retrieving values by key in Maps is fast, since the hash table stores key-value pairs by index, and each index is related to the hash code of the key. | However, Maps are not really optimized for iteration, as iterating through Map keys is relatively fast (keys are associated with the indices and corresponding hash codes of the hash table, while values are not associated), but iterating through Map values is very slow. When storing custom objects as keys of Maps, the class of those objects needs to implement the hashCode() and equals() method, so that the Maps can determine whether or not 2 objects are distinct from each other. Maps can be ordered or un-ordered, depending on the sub-type, which can be HashMap, LinkedHashMap, or TreeMap. | Most types of Lists, Sets, and Maps are Generic types, meaning they take a parameterized data type that indicates the variable type of data they save within themselves. | . Examples: . import java.util.List; import java.util.ArrayList; import java.util.LinkedList; import java.util.Set; import java.util.HashSet; import java.util.LinkedHashSet; import java.util.TreeSet; import java.util.Map; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.TreeMap; public class Application { public static void main(String[] args) { // Conventionally use grouping interface (e.g. List, Set, Map) as the variable type, and sub-type class as the object type (e.g. ArrayList, HashSet, HashMap) // The variable type accounts for just about all of its sub-types, which are used for the object type // Types of List // Use ArrayList if you only want to add and remove elements at the end of the List List&lt;String&gt; arrayList = new ArrayList&lt;String&gt;(); // Use LinkedList if you want to add and remove elements anywhere else within the List List&lt;String&gt; linkedList = new LinkedList&lt;String&gt;(); // Types of Set // Use HashSet if you want the Set to be unordered (order can change at random too) Set&lt;String&gt; hashSet = new HashSet&lt;String&gt;(); // Use LinkedHashSet if you want the Set to maintain insertion order Set&lt;String&gt; linkedHashSet = new LinkedHashSet&lt;String&gt;(); // Use TreeSet if you want the Set to sort elements in ascending natural order (numerically for numbers, alphabetically for words, alphanumerically for combined numbers and words, and custom-defined natural order for custom objects (must implement Comparable interface for classes of custom objects)) Set&lt;String&gt; treeSet = new TreeSet&lt;String&gt;(); // Types of Map // Use HashMap if you want the keys of the Map to be unordered (order is liable to change at random too) Map&lt;String, String&gt; hashMap = new HashMap&lt;String, String&gt;(); // Use LinkedHashMap if you want the keys of the Map to maintain insertion order Map&lt;String, String&gt; linkedHashMap = new LinkedHashMap&lt;String, String&gt;(); // Use TreeMap if you want the keys of the Map to be sorted in natural order - classes of custom objects must implement Comparable interface Map&lt;String, String&gt; treeMap = new TreeMap&lt;String, String&gt;(); // Consider using SortedSet and SortedMap interfaces when applicable } } Application.main(null); . 61. Complex Data Structures . Notes: . Usually, when obtaining data from resources such as files and databases, we would want to create a class that contains properties to hold the different kinds of data, then save objects of that class (each object represents an individual element of the resource, and each element has properties of data), along with each of their properties holding certain areas of the data from the resource, into a Generic Java collection that has a parameterized data type of the class variable type. However, sometimes, we do not necessary know how we should represent certain parts of the data from a resource in a class, such as when some parts of the data are more intricate (i.e. some of the data cannot be directly stored as Wrapper classes or Strings, but rather need to be represented as a data structure that possible stores other data structures) and we want to also represent the important relationships amongst the different data sets. This is where complex data structures come to use. | In Java, a complex data structure is typically a data structure that stores and combines other objects and data structures within itself, and is sometimes sort of like a nested collection; for example, a Map that contains Sets as its values (with Set and its parameterized type defined in the Map&#39;s value parameterized type). A complex data structure essentially combines multiple instances of other data structures, and can come in numerous forms such as a List of Lists or an array of arrays. Complex data structures are mainly used to represent and manage more intricate data sets and the relationships amongst them, effectively enabling greater abstraction (reduce data complexity and increase efficiency and readability), as well as more efficient and advanced data management. | . Examples: . import java.util.Map; import java.util.Set; import java.util.HashMap; import java.util.LinkedHashSet; public class Application { // Make arrays static, so that they can be accessed directly within the static main() method without creating an object of the Application class // Use example with arrays to represent JSON data that you would typically get from resources such as files and databases public static String[] vehicles = { &quot;ambulance&quot;, &quot;helicopter&quot;, &quot;lifeboat&quot; }; public static String[][] drivers = { {&quot;Fred&quot;, &quot;Sue&quot;, &quot;Pete&quot;}, {&quot;Sue&quot;, &quot;Richard&quot;, &quot;Bob&quot;, &quot;Fred&quot;}, {&quot;Pete&quot;, &quot;Mary&quot;, &quot;Bob&quot;} }; public static void main(String[] args) { // The scenario here is that the first row of drivers can operate the ambulance, the second row can operate the helicopter, and the third row can operate the lifeboat // In each row, the first person (0th index) has the highest precedence of driving their assigned vehicle, but if they are not available, the second person takes precedence, and so on // Example of a complex data structure, where the Map takes keys of parameterized type String, but also values of parameterized type Set, which in turn has parameterized type String // So basically, a complex data structure in this case is sort of like a nested collection, where a Map is storing Sets within it. The key here represents the vehicle, and the corresponding value represents the unique set of eligible drivers // Use Map then parameterized Set interfaces for variable type in order to account for different types of Maps and Sets, then specify HashMap class for object type but still with parameterized Set interface, since we need to define the type of class for the Map object, but we do not need to define the type of Set yet as it is still just a parameterized variable type Map&lt;String, Set&lt;String&gt;&gt; personnel = new HashMap&lt;String, Set&lt;String&gt;&gt;(); // Use length to get size of array, but use size() to get size of Generic collections such as Lists and Sets // Append appropriate key-value pairs to the Map, according to the scenario described earlier for (int i = 0; i &lt; vehicles.length; i++) { String vehicle = vehicles[i]; String[] driverList = drivers[i]; // Specify LinkedHashSet class for the Set type, since we are creating a Set object here, and we want to maintain array/insertion order Set&lt;String&gt; driverSet = new LinkedHashSet&lt;String&gt;(); for (String driver : driverList) { driverSet.add(driver); } // Vehicle as key, and set of corresponding unique eligible drivers as value personnel.put(vehicle, driverSet); } // Put this block of code in a manual pair of curly brackets, which manually scopes this code block to between the brackets // This allows us to use the variable names defined within this code block outside the manually-defined scope { // Get one particular Set of drivers for a specified vehicle from the Map // Can use driverList as variable name again because it is outside the scope of the previously defined driverList variable Set&lt;String&gt; driverList = personnel.get(&quot;helicopter&quot;); for (String driver : driverList) { System.out.println(&quot;Eligible driver: &quot; + driver); } } System.out.println(); // Iterate through keys and corresponding values of the Map, which in this case can be considered a complex data structure // keySet() method creates an unordered Set of all of the unique keys in the HashMap for (String vehicle : personnel.keySet()) { System.out.print(vehicle + &quot;: &quot;); Set&lt;String&gt; driverList = personnel.get(vehicle); for (String driver : driverList) { System.out.print(driver + &quot; &quot;); } System.out.println(); } } } Application.main(null); . Eligible driver: Sue Eligible driver: Richard Eligible driver: Bob Eligible driver: Fred helicopter: Sue Richard Bob Fred lifeboat: Pete Mary Bob ambulance: Fred Sue Pete . 62. General Tips for Computer Science Jobs and Coding . Notes: . You do not necessarily need a degree to obtain a computer programming job, but having one certainly helps as it causes employers to take you more seriously. | Experience is important for obtain a computer science job. If you lack experience, the first several steps you may want to take is becoming proficient in core computer programming languages, successfully developing tangible personal projects that demonstrate a large variety of skills (e.g. Frontend, Backend), and sometimes even gain monetization on your software (this counts as commercial experience, which means experience in a business environment). At the end of the day, commercial experiences such as internships and previous work experiences are very useful for your job application. | The CV, or Curriculum Vitae, is a tangible list of a job applicant&#39;s accomplishments (or a summary of their professional career), which can include their education, projects, awards, activities, and professional/commercial experiences. It is key to make your CV unique, and contain as many valuable and interesting experiences (do not necessarily always have to relate to computer science) as possible, in order to attract potential employers. | An effective strategy for finding a good job: first create an honest, attractive, and unique CV, then use a job search website such as Indeed (to find multitude of job postings) or LinkedIn (to publicize your skills for companies to see) to post your resume/CV, filter the type jobs you want (e.g. skills and academics needed, pay rate, technology sector, etc.), and allow successful businesses to discover you. Apply to multiple jobs that fit your criteria, and if you are just starting off, try to look for entry-level jobs to gain at least some sort of experience, then build up your experience from there, and gradually achieve higher-level job positions. | Keep in mind that it sometimes takes companies a while to respond back to you when you submit a job application (either via a job search website or directly to the company itself). You will not always get a job interview, but when you do, make the best out of it and present your greatest qualities to the interviewer. | 10 tips to become a better computer programmer overall: Learn to touch type (type without looking at the keys). | Name variables and methods descriptively (name should be concise but still descriptive enough). | Type rather than read (hands-on programming can help you learn more than reading tutorials, although tutorials are occasionally useful and are present in college courses. Try to keep a balance between listening to lectures and practicing your coding abilities). | Write software that interests you (passion projects). | Read stack traces (error messages) from the top line down. | Aim to write the smallest-working program possible, then once you get it working you can expand on it and make the code more complicated. | Google like crazy when you have questions (use Chat-GPT in this day and age). | Build programs one step at a time (e.g. work on one feature at a time, making sure that every feature works properly before you move on to the next). | Ensure braces (keep track of the corresponding close bracket of each open bracket). | Format code correctly (e.g. indents, brackets, code-readability, etc.). Also keep your code as concise as possible while still accomplishing the intended purpose (e.g. use methods that can be called multiple times within your code, so that you don&#39;t have repeat code throughout the program, use Java libraries such as Lombok to reduce boilerplate code (code that needs to be included in many places without much alteration in order for the program to run smoothly, such as getters and setters for variables, constructors, or built-in methods like hashCode() and equals()), developing more efficient and effective algorithms that use less code but still accomplish the required task, etc.). | | . 63. Lambda Expressions . Notes: . In Java, lambda expressions (introduced in Java 8) essentially represent a single-method interface by utilizing a functional interface, which is an interface that contains only one abstract method, but can have multiple instance or static methods. Lambda expressions are also known as lambda functions or anonymous methods, because they basically provide a method that does not have a name, but still has code functionality. Lambda expressions enable the ability to instantiate a functional interface and define the implementation of its abstract method in a concise way. Lambda expressions have a variety of uses, such as when a programmer wants to pass a block of code to run in its own separate thread (employed in multi-thread environments), or when the programmer wants to re-define the abstract methods of widely-used functional interfaces such as Comparable of the Java Collections framework. | Final variables essentially have constant values that cannot be changed. Effectively final variables are essentially normal variables whose values do not change after being instantiated with initial values. Final and effectively final variables are allowed to be used in anonymous classes and lambda expressions. Lambda expressions are very similar to anonymous classes in terms of purpose, although they have their key differences. Lambda expressions are essentially objects/instances of functional interfaces, and have useful abilities that allow it to support functional programming, which is a programming style that mainly applies and inter-connects functions as its algorithmic-based programming model. | . Examples: . // The Executable interface can be considered a functional interface, since it only contains one abstract method interface Executable { // Abstract method (body is not defined yet, but will be defined by classes/lambda expressions that implement the Executable functional interface) void execute(); } interface AnotherExecutable { // This abstract method needs to have a return value int anotherExecute(); } interface ThirdExecutable { // Abstract method that takes parameters int thirdExecute(int a); } interface StringExecutable { int stringExecute(String a); } interface FourthExecutable { int fourthExecute(int a, int b); } class Runner { // The run() method takes in its parameter objects of classes that implement the Executable interface // Executable can be considered the parent variable type of all of the child classes that implement it, since those classes technically inherit its declared methods // The object/anonymous class/lambda expression passed here will have its own execute() abstract method of the Executable interface defined public void run(Executable e) { System.out.println(&quot;Executing code block...&quot;); e.execute(); } public void anotherRun(AnotherExecutable e) { System.out.println(&quot;Executing code block...&quot;); int value = e.anotherExecute(); System.out.println(&quot;Return value is: &quot; + value); } // Method overloading with different kinds of parameters public void thirdRun(ThirdExecutable e) { System.out.println(&quot;Executing code block...&quot;); int value = e.thirdExecute(12); System.out.println(&quot;Return value is: &quot; + value); } public void thirdRun(StringExecutable e) { System.out.println(&quot;Executing code block...&quot;); int value = e.stringExecute(&quot;Hello&quot;); System.out.println(&quot;Return value is: &quot; + value); } public void fourthRun(FourthExecutable e) { System.out.println(&quot;Executing code block...&quot;); int value = e.fourthExecute(12, 13); System.out.println(&quot;Return value is: &quot; + value); } } public class Application { public static void main(String[] args) { Runner runner = new Runner(); // Before lambda expressions... // Pass into the run() method an anonymous class, which does not have a name. Although we cannot instantiate an object of the interface itself, the instantiated anonymous class here implements the Executable interface and subsequently implements its method(s), as shown by new Executable() {} notation runner.run(new Executable() { // Define execute() method here to be called in the run() method in the Runner class @Override public void execute() { System.out.println(&quot;Hello there&quot;); } }); // After lambda expressions... // Lambda expression that only has one statement is passed to the run() method // (parameters) -&gt; expression is the syntax of the lambda expression we passed into the run() method, where (parameters) indicates the parameters (can be none) of the abstract method of the functional interface (we can define operations on the parameters. Keep in mind that we are talking about the parameters themselves, not the arguments passed into the method), and expression indicates the code body of the lambda expression that defines the implementation of the abstract method // Since run() takes parameters of variable type Executable (objects of classes that implement the Executable functional interface), when the lambda expression is passed into run(), the program will know that it will define the abstract method of the functional interface Executable, and so the abstract execute() method will now have statements to actually execute when called upon within run() runner.run(() -&gt; System.out.println(&quot;Hello there&quot;)); // Lambda expression that has a code block that contains multiple expressions is passed to the run() method // (parameters) -&gt; {statements;} is the syntax of the lambda expression here, where {statements;} indicates the multiple statements, each separated by a ; and a new line, that are passed into the run() method to define the implementation of the abstract execute() method of the Executable functional interface // The lambda expression will take on a variable type Executable functional interface, which will determine the abstract method the lambda expression will ultimately implement, effectively allowing it represent a single-method interface with the utilization of a functional interface runner.run(() -&gt; { System.out.println(&quot;This is code passed in a lambda expression&quot;); System.out.println(&quot;Hello there&quot;); }); // Store a lambda expression into an object of variable type Executable interface // The lambda expression here sort of acts like an anonymous class that implements the Executable interface (satisfying the defined variable type), as it implements the code body of the abstract method provided by the functional interface // The lambda expression is considered like sort of an anonymous function, as it defines the code block of a method that has no name, but this method ultimately defines the implementation of the abstract method of the functional interface that this lambda expression is declared to implement Executable executableObject = () -&gt; { System.out.println(&quot;Hello again&quot;); }; // Alternate way, where you cast the lambda expression object to variable type Executable, and store it in an object variable of variable type Object, which encompasses all child classes and interfaces /* * Object executableObject = (Executable) () -&gt; { * System.out.println(&quot;Hello again&quot;); * }; */ runner.run(executableObject); System.out.println(); // Pass into anotherRun() an anonymous class of variable type AnotherExecutable that will define the anotherExecute() abstract method runner.anotherRun(new AnotherExecutable() { @Override public int anotherExecute() { System.out.println(&quot;Anonymous class running&quot;); return 7; } }); // Pass into anotherRun() a lambda expression with multiple statements, which after being passed into the method will take on variable type AnotherExecutable, and this variable type allows the program to know which method the lambda expression implements, as well as that method&#39;s return type runner.anotherRun(() -&gt; { System.out.println(&quot;Lambda expression running&quot;); return 8; }); // Pass into anotherRun() a lambda expression with one statement, and the program can automatically recognize the data type of that statement, and use that statement as the return value (thus removing the need for the return keyword here) runner.anotherRun(() -&gt; 9); runner.thirdRun(new ThirdExecutable() { // Override abstract method while keeping the same parameters // Make sure to have appropriate return value @Override public int thirdExecute(int a) { return 7 + a; } }); // Return the sum of 8 and a as the return value of the lambda expression // Declare the parameter(s) of the abstract method in the lambda expression (we don&#39;t usually need to define the data type of the parameter, but since thirdRun() has been method overloaded in such a way (same number of parameters but different types), we need to in order for the program to determine which version of thirdRun() is being run), as well as the define the code body of the abstract method runner.thirdRun((int a) -&gt; 8 + a); // Call other version of thirdRun(), where the abstract method and lambda expression take a parameter of type String instead of int runner.thirdRun((String a) -&gt; { System.out.println(a); return 7; }); // Use effectively final variable defined in main() method in anonymous class and lambda expression int c = 100; int d = 77; runner.fourthRun(new FourthExecutable() { @Override public int fourthExecute(int a, int b) { // Can do this: int d = 88, since the anonymous class creates its own scope that allows us to redeclare variables just for within that scope // Reminder that re-declared variables within inner scope do not affect the previously declared variables in the outer scope return a + b + c; } }); // No need to define data types of the parameters here since there is no method overloading. The program will figure out the data types itself runner.fourthRun((a, b) -&gt; { // Can&#39;t do this: int d= 8, since the lambda expression technically does not create its own scope return a + b + c; }); } } Application.main(null); . Executing code block... Hello there Executing code block... Hello there Executing code block... This is code passed in a lambda expression Hello there Executing code block... Hello again Executing code block... Anonymous class running Return value is: 7 Executing code block... Lambda expression running Return value is: 8 Executing code block... Return value is: 9 Executing code block... Return value is: 19 Executing code block... Return value is: 20 Executing code block... Hello Return value is: 7 Executing code block... Return value is: 125 Executing code block... Return value is: 125 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/07/16/Java-Fundamentals-Java-Collections-Framework.html",
            "relUrl": "/jupyter/2023/07/16/Java-Fundamentals-Java-Collections-Framework.html",
            "date": " • Jul 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Java Fundamentals - Notes Part 2",
            "content": "23. Packages . Notes: . Packages in Java allow you to organize your code in a way that helps you find necessary files/classes quickly. They also assist in preventing conflicts in class names (e.g. 2 classes with the same name will not conflict if they are in separate packages). | The naming convention of package names is typically lowercase, with no spaces nor underscores (package names are usually concise). | Use the package keyword the specify the package a file is a part of, and use the import keyword to be able to implement that file from a separate file/class. The * keyword in an import statement indicates that all of the files/classes of the package will be imported. | Packages in Java follow a hierarchy, which means that you can have packages within packages. Slashes (/) are used to indicate/separate sub-folders, while dots (.) are used to indicate/separate sub-packages. | Package names should be unique in the whole world, so that code can be redistributed effectively without any conflicts. The naming convention of unique package names is first putting either your name (full name) or reversing the name (order of words) of your organization&#39;s website, then putting the sub-package name that indicates the purpose of your package. | . Examples: . // The package statement should be the first statement in the file, and defines the package that the file is a part of package ocean; public class Fish { } . | package ocean; illegal start of expression . // Another class (Shark) that is a part of the ocean package, aside from the Fish class. package ocean; public class Shark { } . | package ocean; illegal start of expression . // The plants package is a part of the ocean package. package ocean.plants; // The Algae class is a part of the plants sub-package of the ocean package. public class Algae { } . | package ocean.plants; illegal start of expression . // Unique package name, where the ToDoList class is a part of the personalization sub-package, whose parent package is thebusinessnexus, whole parent package is com. // This order of package names is unique and is unlikely to conflict with other package names. // The personalization package by itself may not be unique, but will be unique if combined with the reversed name of thebusinessnexus.com. package com.thebusinessnexus.personalization; public class ToDoList { } . | package com.thebusinessnexus.todolist; illegal start of expression . // Import the Fish class from the ocean package, so that the Application class can implement the Fish class. import ocean.Fish; // Import the Shark class from the ocean package. import ocean.Shark; // Import the Algae class from the plants sub-package of the ocean package. import ocean.plants.Algae; // * indicates that every class from the ocean package is imported. import ocean.*; // Import the ToDoList class from the personalization sub-package of the thebusinessnexus sub-package of the com package (thebusinessnexus and com make up the actual website name). import com.thebusinessnexus.personalization.ToDoList; public class Application { public static void main(String[] args) { Fish fish = new Fish(); Shark shark = new Shark(); Algae algae = new Algae(); ToDoList toDoList = new ToDoList(); } } Application.main(null); . | import ocean.Fish; package ocean does not exist . 24. Interfaces . Notes: . In Java, interfaces are implicitly abstract (you do not need to declare them with the abstract keyword), and the methods within them are in turn implicitly public and abstract (but can still be custom defined). Interfaces do not contain code that perform actions, but rather the headers of defined methods and sometimes attributes (which are usually public, static, and final). | Interfaces are ultimately used to achieve abstraction, where they group related methods that all have empty bodies. Interfaces are accessed with the &quot;implement&quot; keyword from another class, and that class defines the bodies of the interface methods, thus overriding (redefining the method to have a body but with the same exact name and signature/headers) the interface method. Distinct classes can define a particular interface&#39;s methods differently. However, attributes can be declared and have their values defined in interfaces, and child classes will inherit the values defined in interfaces, or re-define the variables again (making sure to keep the same modifiers and variable name). | Similar to abstract classes, interfaces cannot be used to initialize objects (where the interface name follows the new keyword), and do not have &quot;bodies&quot; of code. An interface is implemented by separate classes, in which all of the methods defined in the interface must be overridden with method bodies of code defined in the class. It is important to note that a class can implement multiple interfaces (in contrast, a class can only extend one parent class), and an interface can be implemented by multiple classes (a parent class can be inherited by multiple child classes). | . Examples: . // Creating a Java interface with the name Info interface Info { // Header of the showInfo() method. public void showInfo(); } // The Machine class implements the Info interface class Machine implements Info { private int id = 7; public void start() { System.out.println(&quot;Machine started...&quot;); } // Need to override the showInfo() method of the Info interface @Override public void showInfo() { System.out.println(&quot;Machine ID is: &quot; + id); } } // The Person class implements the Info interface class Person implements Info { private String name; public Person(String name) { this.name = name; } public void greet() { System.out.println(&quot;Hello there!&quot;); } @Override public void showInfo() { System.out.println(&quot;Person name is: &quot; + name); } } public class Application { public static void main(String[] args) { Machine mach1 = new Machine(); mach1.start(); // Call the showInfo() interface method defined in the Machine class mach1.showInfo(); Person person1 = new Person(&quot;Bob&quot;); person1.greet(); // Call the showInfo() interface method defined in the Person class person1.showInfo(); // We can initialize info1 like this because the Machine class implements the Info interface. // info1 is a variable of type Info that points to an object reference of type Machine. // Since info1 is a variable of type Info, it can only be used to run the methods of the Info interface, which are redefined in the Machine class, which is referenced as an object here. Info info1 = new Machine(); info1.showInfo(); // info2 is a variable of type Info that points to an already defined object reference of class type Person Info info2 = person1; info2.showInfo(); // mach1 and person1 are both objects that implement the Info interface, which means that are technically of type Info. // Pass the mach1 and person1 objects to the outputInfo() method, which in itself calls the showInfo() interface method, which is redefined in the Machine and Person classes. outputInfo(mach1); outputInfo(person1); } // Make this method static so that the Application class can directly access the method within itself (even though the method is private) // The outputInfo() method calls the showInfo interface method, which should be defined in the separate classes that are called in the parameter of outputInfo() private static void outputInfo(Info info) { info.showInfo(); } } Application.main(null); . Machine started... Machine ID is: 7 Hello there! Person name is: Bob Machine ID is: 7 Person name is: Bob Machine ID is: 7 Person name is: Bob . 25. Public, Private, and Protected . Notes: . When referencing an attribute or method of a particular class within that class itself, you do not need to prefix the variable name. In other words, notation like objectName.variableName is unnecessary, since variableName works by itself. This means that the access modifier does not matter; as long as you are referencing the variable within the same class, you can directly access it by name or optionally prefix dot notation. | Just for review, you typically should have one (and only one) public class in a file, and that public class&#39;s name should match the name of the file. However, you can have as many non-public classes with different names in the file as you want. | Access modifiers define the access level of attributes, methods, classes, and constructors, while non-access modifiers do not define the access level, but rather other forms of functionality. | Encapsulation is typically used to keep certain attributes or methods of a class hidden/private from the rest of the world, for the purpose of controlling the way people access these variables, and preventing unnecessary changes from happening to them. | Usually when we declare a particular variable public, that variable is defined as static and/or final, which means it belongs and remains constant (or has a constant change if final is not declared) to the class itself, so that it is relatively unchangeable by others. | The order in which modifiers appear does not necessarily matter all of the time, but there is a recommended order. | The public access modifier defines a class, attribute, method, or constructor as directly accessible to all other classes. | The private access modifier defines an attribute, method, or constructor as only directly accessible within the class it is declared in (can be accessed with getter methods from other classes though). Private variables are not inherited by child classes. | The protected access modifier defines an attribute, method, or constructor as only accessible within the same package (implies same file too) and any subsequent subclasses (even subclasses in separate packages, unlike the default access modifier) of the class it is declared in. This means that protected variables are inherited by child classes. | The default access modifier (happens when no access modifier is declared at all) defines a class, attribute, method, or constructor as only accessible by other classes in the same package (implies same file too). A child class can inherit default access modified variables from the parent class only if it is in the same package. It is possible for a child class to extend a parent class in another package using the import feature, but in that case, default variables are not inherited. | . Examples: . class Plant { // Bad practice public String name; // Acceptable practice // The ID variable belongs to the Plant class itself and remains constant public final static int ID = 8; // The type variable is private, so it is not inherited by subclasses private String type; // The size variable is protected, so it is inherited by subclasses protected String size; // The height variable has the default access modifier int height; public Plant() { // this.name works, since the this keyword refers to the object that name is a part of. this.name = &quot;Joe&quot;; // Even though it is private, the type instance variable is in the Plant class itself, so it can just be referenced by type. type = &quot;plant&quot;; // size is defined as medium in the parent class size = &quot;medium&quot;; height = 8; } } // Oak is a child class of the parent class Plant class Oak extends Plant { public Oak() { // size was defined as medium in the parent class and that value is inherited by the child class // Here, we are overriding the value of size inherited from the parent class, and setting it to large this.size = &quot;large&quot;; // height variable is inherited, since Oak is in the same package as Plant height = 10; } } class Field { // Create an instance variable that is an object of the Plant class. // The Plant class is accessible from the Field class because it has the default access modifier and is in the same file and package as the Field class. private Plant plant = new Plant(); public Field() { // size is protected, but Field is in the same file and package as Plant System.out.println(plant.size); } } public class Application { public static void main(String[] args) { Plant plant = new Plant(); // The name instance variable of the Plant class can be directly accessed outside of the class because it is public, using the prefix dot notation. System.out.println(plant.name); System.out.println(plant.ID); Oak oak = new Oak(); System.out.println(oak.size); // Application is in the same package as Oak and Plant, so it can directly access height System.out.println(oak.height); // The constructor of Field will print the initialized value of size when an object of the Plant class is created Field field = new Field(); } } Application.main(null); . Joe 8 large 10 medium . // Pretend that Plant is a part of the world package, and that Grass in another package import world.Plant; class Grass extends Plant { public Grass() { // This won&#39;t work because even though Grass is a child class of Plant, it is not in the same package as Plant, and height is a default access-modified variable. System.out.println(this.height); } } . | import world.Plant; package world does not exist . 26. Polymorphism . Notes: . Polymorphism, which means &quot;many shapes/forms&quot;, involves the process of creating multiple classes that related to each other in some way through the inheritance of a super class. It is efficient in allowing code reusability amongst different classes. Polymorphism also states that an object of a sub-class can also have the variable type of the super-class (i.e. SuperClass variableName = new SubClass()). | However, it is important to note that the initialized variable type of an object variable defines the attributes and methods the variable has access to (can only access those listed in the class of the variable type), while the initialized object type of the variable defines the values of its attributes and the actions of its methods (the values and code defined in the class of the object type). | As inheritance allows different sub-classes to inherit the attributes and methods of a super class, polymorphism gives us the ability to take those attributes and methods and perform different kinds of tasks amongst different sub-classes that are each somewhat related to each other. Polymorphism basically gives sub-classes the ability to override the attributes and methods defined in the super-class. | Example: The Animal super-class, which has a sound() method, is inherited by the Pig, Cat, and Dog sub-classes. Pig, Cat, and Dog, will each have their own unique implementation/override of the inherited sound() method. | . Examples: . class Plant { public void grow() { System.out.println(&quot;Plant is growing&quot;); } } class Tree extends Plant { @Override public void grow() { System.out.println(&quot;Tree is growing&quot;); } public void shedLeaves() { System.out.println(&quot;Leaves shedding&quot;); } } public class Application { public static void main(String[] args) { Plant plant1 = new Plant(); Tree tree = new Tree(); // plant2 of variable type Plant can refer to the same object of the Tree class that tree refers to. Plant plant2 = tree; // Although its variable type is Plant, plant2 refers to a Tree object, and so will run the Tree class&#39;s version of the grow() method plant2.grow(); // Will not work, since plant2 has a variable type Plant, and Plant does not contain the shedLeaves() method. // plant2.shedLeaves(); // Will work, since tree has a variable type Tree, and Tree does contain the shedLeaves() method. tree.shedLeaves(); // tree is of variable type Plant, and so can be passed as a valid argument to the doGrow() method. // Since the grow() method is defined in the Plant class, it will run effectively // The Tree class&#39;s version of the grow() method will be used during the calling of doGrow(), since its object type is of the Tree class. doGrow(tree); } // The doGrow() method is public and static, so we can directly call it within the main test method (both main and doGrow are static methods, so they can directly access each other) in the same Application class. // The doGrow() method takes parameters of variable type Plant. // Polymorphism states that where ever a parent class type is expected, a child class type can be used there as well. public static void doGrow(Plant plant) { plant.grow(); // An object of the Application class needs to be created in order to access the test() instance method within a static method Application app = new Application(); app.test(); } public void test() { System.out.println(&quot;Testing...&quot;); // An instance method can directly access a static method test2(); } public static void test2() { System.out.println(&quot;Testing again...&quot;); } } Application.main(null); . Tree is growing Leaves shedding Tree is growing Testing... Testing again... . 27. Encapsulation and the API Docs . Notes: . The purpose of encapsulation (Using access modifiers like private or protected) is primarily to purposely hide some of the inner-workings/elements of a particular class from the public. This prevents direct access to certain attributes or methods of the class, restricting users from directly accessing the state values of those variables. The state/inner values and actions of encapsulated attributes and methods are usually intended to only be directly used within the class (they are typically indirectly used outside the class). Encapsulation is also useful for preventing conflicts in variables amongst different classes. A state value of a variable refers to its instantaneous value during any point of the program&#39;s execution. | Encapsulated variables are typically accessed outside the class with getter and setter methods for those specific variables (encapsulated variables cannot be accessed straight away with dot notation with the object, but can be accessed with dot notation on the getters and setters with the object). The getter method allows users to read values of encapsulated variables, while the setter method allows users to change values of encapsulated variables, all-the-while the inner-workings of the class are modified but hidden away from the public for privacy and security. Getters and setters allow encapsulated attributes and methods to be applied toward external purposes outside of the class. | The accepted good practice is that whenever you can make a certain variable (attribute or method) private, make it private; if the variable needs to be inherited by child classes, make it protected; and if the user should be able to access the variable, make it public. Most data should be encapsulated, with the exception of constant variables. | An API stands for Application Programming Interface, which essentially allows the public to access certain features and functionalities of a program. | An API documentation is essentially a collection of references, descriptions, and examples (such as different kinds of attributes/methods and constructors, as well as the API&#39;s properties) that show users how to use and employ the functionality of a particular API. | It is important to note that when you are working with an object within a class, and the object is of that particular class (instantiating an object of the class within itself), we do not necessarily need getters and setters to access the encapsulated attributes and methods of that object; we can just access them using dot notation with the object name, and this is because the separate object&#39;s attributes and methods can be directly accessed within the class it was originally defined from (we just need the object name for reference, in order to differentiate its properties from that of the current object, which is represented by the current class code itself). | . Examples: . class Plant { private String name; // Variables are typically declared as public when they are static and final, meaning their value remains constant and cannot be changed outside the class nor by the public. public static final int ID = 7; public String getData() { String data = &quot;Some stuff &quot; + getGrowthForecast(); return data; } // Private methods cannot be directly access outside of the class, and are intended to only be used within the class. private int getGrowthForecast() { return 9; } // The public getter and setter methods of the name variable allow name to be accessed (though not directly) outside of the class public String getName() { return name; } public void setName(String name) { this.name = name; } } public class Application { public static void main(String[] args) { Plant plant = new Plant(); System.out.println(plant.getData()); plant.setName(&quot;Daniel&quot;); System.out.println(plant.getName()); } } Application.main(null); . Some stuff 9 Daniel . 28. Casting Numerical Values . Notes: . In Java, there are several different numerical variable types, such as int (stores integers) and double (can store numbers with or without decimals). | Type casting is a method used to convert data for a certain variable type to a different variable type. Type casting can be used for primitive variable types (note that special types of conversion methods different from type casting are used to convert from primitive to non-primitive types and vice versa. Basically, reference/non-primitive types use unique conversion methods rather than type casting), and during its process, data is not changed, but rather the data type, allowing us to see different kinds of conversions amongst different data types. | Widening casting involves converting a smaller data type to larger data type size, in which the type casting is done automatically by the program (changes are not necessarily major for the value being casted). Narrowing casting involves converting a larger data type to a smaller data type size, in which the type casting is done manually by the programmer (changes may be major for the value being casted). | Truncation is a form of approximation used when part of a number is chopped off or ignored (e.g. 3.7 --&gt; 3), and typically occurs when an integer is divided from an integer in Java. Rounding is form of approximation used when the number is rounded to the nearest number that satisfies the appropriate place value. Rounding is usually used to round decimals to whole numbers (e.g. 7.8 --&gt; 8). | . Examples: . public class Application { public static void main(String[] args) { // Variable types for storing numerical values // 16-bits short shortValue = 55; System.out.println(shortValue); // 32-bits int intValue = 888; System.out.println(intValue); // 8-bits byte byteValue = 20; System.out.println(byteValue); // 64-bits long longValue = 23355; System.out.println(longValue); // float values have to end with f float floatValue = 8834.3f; // Alternative notation to instantiating float float floatValue2 = (float) 99.3; System.out.println(floatValue); System.out.println(floatValue2); // double values can end with decimal points double doubleValue = 32.4; System.out.println(doubleValue); // Use the non-primitive version of primitive variable types to access set methods to display useful information // For example, the non-primitive version of the double numerical type can be used to displayed the max value it can store // The non-primitive versions of primitive types are typically referenced similar to the primitive type name, but with the first letter capitalized and the full work being used (e.g. int becoming Integer). System.out.println(Double.MAX_VALUE); System.out.println(Byte.MAX_VALUE); // Notation for type casting // Narrowing casting // Here, manual casting is needed, since the long value may be too large to be stored in int, which is why type casting might be needed to perform the necessarily changes to the long value // Convert the value of longValue to an int, and set it equal to intValue intValue = (int) longValue; System.out.println(intValue); // Widening casting // Here, manual casting is not needed, because int is automatically converted to double, since its actual value itself does not necessarily change when it is converted to a floating point doubleValue = intValue; System.out.println(doubleValue); // Convert float to int. The decimal portion is just chopped off, and there is no rounding; this is known as truncation intValue = (int) floatValue; System.out.println(intValue); // Cast value of 130 to byte variable type // 127 is the max positive value of byte, so 130 will loop around starting at the min value of byte, and move up accordingly to its remaining value byteValue = (byte) 130; System.out.println(byteValue); // Example of type casting during operations int a = 10; int b = 3; double c = a/b; // Here, widening casting is used convert int to double // However, since a and b are both integers, their division will result in a truncated answer, since integers cannot hold decimals System.out.println(c); // All of these produce the same results // As long as at least one of the numbers in the operation is correctly casted to a double, the result will of the operation will also be a double, and that computation will be stored in a double variable double d1 = (double) a / (double) b; double d2 = a / (double) b; double d3 = (double) a / b; System.out.println(d1); System.out.println(d2); System.out.println(d3); } } Application.main(null); . 55 888 20 23355 8834.3 99.3 32.4 1.7976931348623157E308 127 23355 23355.0 8834 -126 3.0 3.3333333333333335 3.3333333333333335 3.3333333333333335 . 29. Upcasting and Downcasting . Notes: . Upcasting and downcasting are primarily used for conversions between child and parent objects. During upcasting and downcasting, the object type remains the same, but the variable type changes. | Upcasting involves the typecasting of a child object to a parent object, and can be done implicitly/automatically. After upcasting, the child object can only access the inherited and overridden attributes/methods of its parent class, but can no longer access the new attributes/methods defined in the child class. | Downcasting involves the typecasting of a parent object to a child object, and cannot be done implicitly, but rather manually. After downcasting, the parent object can now access all of the attributes and methods, both overridden and new, found in the child class. | The variable type determines which attributes and methods can be accessed, while the object type determines the actual implementation of the attributes and methods. | . Examples: . class Machine { public void start() { System.out.println(&quot;Machine started&quot;); } } class Camera extends Machine { public void start() { System.out.println(&quot;Camera started&quot;); } public void snap() { System.out.println(&quot;Photo taken&quot;); } } public class Application { public static void main(String[] args) { // The Machine object type cannot be referred to by the Camera child variable type, but can be referred to by the Machine parent variable type Machine mach1 = new Machine(); Camera cam1 = new Camera(); mach1.start(); cam1.start(); cam1.snap(); // Upcasting // Set mach2 of variable type Machine to refer to the same Camera object that cam1 refers to // Moving up the class hierarchy, from child variable type Camera to parent variable type Machine Machine mach2 = cam1; // The object type is Camera, so the start() method overridden in Camera will be ran. The variable type is simply a reference to the object, and defines the range of attributes and methods that can be accessed. mach2.start(); // mach2.snap() won&#39;t work, because the variable type is Machine, and snap() is not a method in the Machine class // Downcasting Machine mach3 = new Camera(); // Set cam2 of variable type Camera to refer to the same Camera object that mach3 refers to // This way, all of the attributes and methods of Camera can be accessed with our new object // Notation for manual casting, which is needed for downcasting. This is because downcasting is more inherently unsafe than upcasting, as more changes are being made to the object variable itself (object type stay the same) // The Camera object type can be referred to both by the Camera child variable type and the Machine parent variable type Camera cam2 = (Camera) mach3; cam2.start(); cam2.snap(); // This won&#39;t work, because the parent object type Machine cannot be referenced by the child variable type Camera // Object types remain constant, which means the object type Machine cannot be converted to an object type Camera // Review: Child objects can be referred to by Parent types, but Parent objects cannot be referred to by Child types // Machine mach4 = new Machine(); // Camera cam3 = (Camera) mach4; } } Application.main(null); . Machine started Camera started Photo taken Camera started Camera started Photo taken . 30. Using Generics . Notes: . A Generic class is basically a class that can work with different data types and objects. Generic entities operate on a parameterized type(s), which specify the type of data they will work with (i.e. the types of objects they can store and retrieve for the programmer) when instantiated as methods or objects. Generics are able to provide templates for certain classes in a sense. Generic classes are used to create useful data structures in Java such as ArrayList, LinkedList, HashSet, HashMap, etc. | A Generic method, working just like a normal method, takes a &quot;type&quot; parameter(s) that specifies the type of data that should be passed into the method (usually in between the diamond brackets &lt;&gt;), enabling a general usage of the method. | A Generic class, working just like a normal class, takes a &quot;type&quot; parameter(s) in a certain section of its definition (usually in between the diamond brackets &lt;&gt;), which specifies the type of data the object of the class works with in general. | As Generics follow a parameterized type(s), they eliminate the need for programmers to perform redundant type castings (Programmers used to have to type cast the data retrieved from certain data structure classes in order to convert from unwanted object to desired variable type. Now, Generics will return data of the appropriate type). So, for a Generic entity to be Generic, it needs to have one or more type parameters. Parameterized types basically allow Generics to hold and work with (e.g. add, remove, retrieve) a general range of data that fit within the specified data type(s), in turn allowing for type-safety during compile time. | It is important to note that when defining parameterized types within the &lt;&gt; of a Generic entity, they need to be specified as objects. This means that primitive types need to be specified in their wrapper class forms (e.g. int - Integer). A parameterized type can also be specified as an object (referred by the class name) of a custom class that you created. You can also have nested parameterized types, where the outer parameterized type represents some kind of list which has its own parameterized data type (e.g. type parameter is ArrayList). | Wrapper classes are basically classes that represent equivalent primitive type counterparts. For example, the wrapper class of int is Integer, and the wrapper class of char is Character. Wrapper classes are essentially the reference/object equivalents to primitive types, and should be defined with Generics in Java&#39;s Collection framework. | . Examples: . class Animal { private String type = &quot;animal&quot;; } public class Application { public static void main(String[] args) { // Before Java 5 with Generics was released // Old way of initializing an ArrayList ArrayList list = new ArrayList(); // Append elements to and retrieve elements from the ArrayList list.add(&quot;apple&quot;); list.add(&quot;banana&quot;); list.add(&quot;orange&quot;); // In the old version, list.get(1) retrieves an object, and so we need to downcast the value of the object to get the desired String value String fruit = (String) list.get(1); System.out.println(fruit); // After Generics were introduced with Java 5 // Modern way of initializing an ArrayList // Notice how the parameterized type is specified with the ArrayList in between the diamond brackets &lt;&gt;, during both variable type declaration and object type declaration. ArrayList&lt;String&gt; strings = new ArrayList&lt;String&gt;(); // Append elements to and retrieve elements from the ArrayList // Modern way of modifying ArrayList is very similar to the old way, except we no longer need to type cast due to the parameterized types of Generics strings.add(&quot;cat&quot;); strings.add(&quot;dog&quot;); strings.add(&quot;alligator&quot;); String animal = strings.get(1); System.out.println(animal); // There can be more than one parameterized type defined in Generic entities // The multiple parameterized types are separated by commas // Initialize HashMap Generic data structure HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;(); // Java 7 style of initializing Generics // The parameterized type only needs to be specified once (in the variable declaration), as the program automatically infers the parameterized type in the second part of declaration // The ArrayList holds objects of the created Animal class ArrayList&lt;Animal&gt; someList = new ArrayList&lt;&gt;(); } } Application.main(null); . banana dog . 31. Generics and Wildcards . Notes: . Normally, a Generic entity such as ArrayList with a parameterized type object of a child class is NOT a subclass of a Generic entity with a parameterized type object of a parent class. | In Java, a wildcard, represented by the ? symbol in the type parameter, indicates that the Generic entity works with data of an unknown type. Wildcard Generics are declared in the parameters of methods. Because of this, the type of variable(s) the Generic entity in the method parameter ultimately works with is typically specified as an argument during the passing of another Generic (which itself has a specified type parameter) to the method. | Keep in mind that after the parameterized type of a wildcard Generic has been determined with the argument passed, the parameterized type needs to remain consistent (e.g. An ArrayList of type parameter String was passed as an argument for the ArrayList parameter with a wildcard type parameter. In the method, the ArrayList parameter will now be treated as an ArrayList with type parameter String). A wildcard is basically a special kind of type parameter that essentially dictates the type safety of Generics on a broader scale. | Upper bounds and lower bounds of wildcards cannot be specified at the same time. The lower bound of a wildcard indicates that the unknown type is limited to the specified class type, or any super class of the specified class type. The upper bound of a wildcard indicates that the unknown type is limited to the specified class type, or an sub class of the specified class type. | . Examples: . // Import ArrayList class from the java.util library import java.util.ArrayList; // Every class created extends from the Object ultimate parent class class Machine { @Override // Override toString() method inherited from the Object class public String toString() { return &quot;I am a machine&quot;; } public void start() { System.out.println(&quot;Machine is started&quot;); } } class Camera extends Machine { @Override public String toString() { return &quot;I am a camera&quot;; } public void snap() { System.out.println(&quot;Snap&quot;); } } public class Application { public static void main(String[] args) { ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;one&quot;); list.add(&quot;two&quot;); showList(list); ArrayList&lt;Machine&gt; machList = new ArrayList&lt;Machine&gt;(); // Add objects of the Machine class to the ArrayList // Since the object type is Machine, the program assumes that the variable type is Machine as it is not declared? (inferring the variable type from the object type) machList.add(new Machine()); machList.add(new Machine()); showMachList(machList); ArrayList&lt;Camera&gt; camList = new ArrayList&lt;Camera&gt;(); // Add objects of the Machine class to the ArrayList // Since the object type is Camera, the program assumes that the variable type is Camera as it is not declared? (inferring the variable type from the object type) camList.add(new Camera()); camList.add(new Camera()); showWhateverList(camList); showWhateverMachineList(machList); showWhateverMachineList(camList); showWhateverCameraList(machList); showWhateverCameraList(camList); } // Make method static so that it can be directly accessed by the static main method, getting rid of the need of creating an object of the Application class // Parameter of showList() is of variable type ArrayList with parameterized type String public static void showList(ArrayList&lt;String&gt; list) { // Enhanced for loop for (String value : list) { System.out.println(value); } } // Parameter of showMachList() is of variable type ArrayList with parameterized type Machine public static void showMachList(ArrayList&lt;Machine&gt; machList) { for (Machine mach : machList) { System.out.println(mach.toString()); } } // Usage of wildcard (indicated by ? symbol) // Parameter of showWhateverList() is of variable type ArrayList with any kind of parameterized type public static void showWhateverList(ArrayList&lt;?&gt; whateverList) { // Since wildcard is used, we have to refer to the objects of the ArrayList as Object, since Object is the parent class of all classes in Java for (Object value : whateverList) { // Object itself has a toString() method that runs when an object is printed. Here, Camera&#39;s toString() method overrides that of the Object class, since objects of Camera were added to the ArrayList // Since the variable type is Object, only attributes and methods a part of the Object class can be accessed. // If we wanted to use the attributes and methods of the other classes here, we would have to downcast the variable type Object to a variable type of a child class System.out.println(value); } } // Usage of wildcard while specifying the upper bound of the parameterized type to be of variable type Machine (which encompasses the Machine class, or any child class of Machine) public static void showWhateverMachineList(ArrayList&lt;? extends Machine&gt; list) { // Since the variable type is Machine, only attributes and methods found in the Machine class can be accessed, though they could have been overridden any child classes for (Machine value : list) { // The toString() method runs when an object is printed System.out.println(value); value.start(); } } // Usage of wildcard while specifying the lower bound of the parameterized type to be of variable type Camera (which encompasses the Camera class, or any super/parent class of the Camera class) public static void showWhateverCameraList(ArrayList&lt;? super Camera&gt; list) { // Since lower bound is specified instead of upper bound, the Object class variable type needs to be used as sort of a parent in order to encompass objects of the Camera class and its super classes for (Object value : list) { System.out.println(value); } } } Application.main(null); . one two I am a machine I am a machine I am a camera I am a camera I am a machine Machine is started I am a machine Machine is started I am a camera Machine is started I am a camera Machine is started I am a machine I am a machine I am a camera I am a camera . 32. Anonymous Classes . Notes: . In Java, an anonymous class allows you to declare/define and instantiate a class at the same time. They are similar to normal local classes in terms of properties and behaviors, except for the fact that they do not have a name, and are created during instead of before the runtime of the program. | Anonymous classes primarily serve to provide a way of extending a class or implementing an interface. An anonymous class is used whenever you only want to utilize that local class once in your code (i.e. Only one object refers to the anonymous class, which is the object declared with the creation of an anonymous class that stems off a parent class or interface declaration. You can call as many attributes and methods from that object as you want, as long as they exist within the range of properties inherited from a parent class or implemented from an interface. Reminder that anonymous classes are typically declared to be children of parents classes and implementations of interfaces). | Anonymous classes ultimately help you make your code more concise, allowing you to essentially make real-time, temporary modifications to the attributes and methods of classes through a single object declaration. | . Examples: . class Machine { public void start() { System.out.println(&quot;Starting machine...&quot;); } public void stop() { System.out.println(&quot;Machine stopped&quot;); } } interface Plant { // Reminder that you declare methods in interfaces, but you do not declare bodies of code, as they are defined by classes that implement the interface public void grow(); } public class Application { public static void main(String[] args) { // Create reference variable mach1 to refer to object of Machine class Machine mach1 = new Machine(); mach1.start(); // Notation for creating an anonymous class that is not the Machine class itself, but rather a child of the Machine class // Notice how the anonymous class does not have a name, but rather inherits or overrides the attributes and methods of Machine Machine mach2 = new Machine() { @Override public void start() { System.out.println(&quot;Camera snapping&quot;); } }; // Call multiple methods of the single object of the above anonymous class mach2.start(); mach2.stop(); // You cannot instantiate an object of an interface, as the interface cannot be implemented that way // You need to instead instantiate an object of a class that actually implements the interface // Notation for creating an anonymous class that is not the Plant interface itself, but rather a class that implements the Plant interface // With the anonymous class, we can instantiate an object, since the object is derived from a valid class that implements the interface Plant plant1 = new Plant() { // Need to override all of the attributes and methods defined in the interface @Override public void grow() { System.out.println(&quot;Growing...&quot;); } }; plant1.grow(); } } Application.main(null); . Starting machine... Camera snapping Machine stopped Growing... . 33. Reading Files Using Scanner . Notes: . A backslash in a String usually indicates a special character within the String. To fix this problem, we could put double backslashes instead of single backslashes, because a double backslash indicates that the special character really is a backslash. You could also use forward slashes as an alternative to the double backslashes. | The Scanner class of the java.util library can be used to read the contents of a specified file, or scan the inputs given by users through an inputStream such as System.in. It provides a variety of methods to read through different data types, usually line by line. | The &quot;next&quot; methods of the Scanner class, such as nextLine() and nextInt(), literally read the &quot;next specified content&quot; of a file or user input each time they are called (e.g. nextInt() reads the next integer in the file, nextDouble() reads the next decimal number in the file, and nextLine() reads the next remaining line of content in the file). If multiple different data types were to be on the same line, the program can (but does not necessarily need to; could for example use nextInt() to read only the integer and use nextLine() to read the remaining content on the line) read the whole line as a String, concatenating all of the different data types into a single content. | If an alternative next function to nextLine() is used, such as nextInt(), after the integer in the first line has been read, there will be a blank line that will be read before the rest of the content in the file is read. This is because after the last character of each line, there is an invisible character(s) that represents the line feed, or the end of the line. The nextLine() method accounts for these line feeds along with its selected content, while most of the other next methods do not, as they only read through their appropriate data type contents. | . Examples: . // Import the File class from the java.io library import java.io.File; // Import the FileNotFoundException class from the java.io library import java.io.FileNotFoundException; // Import the Scanner class from the java.util library import java.util.Scanner; public class Application { // Indicates that the main program will just stop and throw a FileNotFoundException, in the case where the file path defined is not found on the system public static void main(String[] args) throws FileNotFoundException { // Set file path of the desired file on the project file system // I used the project relative file path instead of the absolute computer system file path used in the tutorial String filePath = &quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/lesson-33-file.txt&quot;; // Create object of the Java File class, and pass filePath as an argument into the File class&#39;s constructor File textFile = new File(filePath); // Create object of the Java Scanner class, and pass the textFile object (instead of System.in, which indicates that Scanner will take user input. Here, the Scanner reads from the File we defined) as an argument into the Scanner class&#39;s constructor Scanner in = new Scanner(textFile); // nextInt() does not account for line feeds, while nextLine() does. // Use nextInt() to appropriately store the data in the first line of the file as an int, which is an integer variable type. int value = in.nextInt(); System.out.println(&quot;Read value: &quot; + value); // Read through the double value on the same line as the first integer read, and appropriately store it as a double variable type double floatingPoint = in.nextDouble(); System.out.println(&quot;Read decimal: &quot; + floatingPoint); // Line feed on the first line will be read after the integer and double data have been read in.nextLine(); // Number the lines in the file after the first line that was just read int count = 2; // Loop to read the file line by line, after the first line that has already been read above // While the file still has another line to read, perform the following actions while (in.hasNextLine()) { // Store the word content of the currently selected line in the file into a String variable // The Scanner iterates through each line of the file from top to bottom String line = in.nextLine(); System.out.println(count + &quot;: &quot; + line); count++; } // Here, the close() method will automatically close the specified file in the constructor after it has been scanned through in.close(); } } Application.main(null); . Read value: 7 Read decimal: 7.7 2: Hello World 3: I am Dylan 4: I love programming, especially in Java 5: I love to work out 6: I love to play soccer 7: I hope to create a world-dominating AI . 34. Handling Exceptions . Notes: . In Java, an exception is essentially an event during a program&#39;s execution in which an error occurs in the flow of the code, leading to the program&#39;s disruption and possible stoppage, and sometimes prompting the program to create an object (exceptions are actually objects of a class called Exception) detailing the exception and sending it to the runtime. | The throws keyword is defined in a method signature/declaration, and determines which kind of exception (should usually be only one) should be thrown from the method, ultimately defining the certain kind of error the program should handle if it occurs. Generally, we should use throws to handle checked exceptions, since unchecked exceptions do not need to be manually handled as they are automatically caught by runtime. Throwing an exception means creating an object for the exception, then throwing it to the runtime to display. The message presented by the runtime about the exception is known as the stack trace. | In Java, the try catch statement provides a way of handling exceptions in the program. The code block within the try statement define the code that the program will test for errors. The moment a line of code within the try statement has an error, the try statement immediately throws an exception to the catch statement. | The exception is essentially caught by the catch statement (parameter of catch statement defines which kind of exceptions it should look for. e.g. FileNoteFoundException e, where e is the object variable to store the FileNoteFoundException; Exception e, where e is the object variable to store any kind of exceptions, as indicated by the general name Exception), and the code block within the catch statement defines the action that will be taken if an error is found within the try statement. | Following the try catch statement you can optionally write a finally statement, and the code block in the finally statement defines the actions that will be taken after the try catch statement regardless of the result. The useful aspect of try catch is that the program will still run even if errors are found in the try statement (since the exception thrown by try is caught by catch and handled, instead of thrown to runtime). However, exceptions found in the catch statement or finally statement will be thrown to runtime. | Sometimes, methods will call each other, which means that multiple methods could encounter the same exception. This means that good practice is that each method should have a way (throw or try catch) to handle the exception. Any exceptions that may be thrown that may be encountered anywhere else in the program should be handled in some way (either thrown again or caught again). | . Examples: . import java.io.File; import java.io.FileReader; public class Application { // Use throws keyword to allow the main method to handle FileNotFoundException checked exceptions public static void main(String[] args) throws FileNotFoundException { File file = new File(&quot;test.txt&quot;); // FileReader class serves as intermediate step to reading objects of File class FileReader fr = new FileReader(file); } } class ApplicationTwo { public static void main(String[] args) { File file = new File(&quot;test.txt&quot;); // Notation for try catch statement // Create FileReader object in the try statement // Catch statement specifically checks for FileNotFoundException try { FileReader fr = new FileReader(file); // This will not run as an exception is thrown before it System.out.println(&quot;Continuing...&quot;); } catch (FileNotFoundException e) { // If FileNotFoundException occurs, use the printStackTrace() message of the object of the FileNotFoundException class // e.printStackTrace(); // Use toString() to print a clear representation of the file object System.out.println(&quot;FileNotFoundException occurred. File not found: &quot; + file.toString()); } } } class ApplicationThree { // If FileNotFoundException occurs in the main method, the method will by default throw it to runtime // But if FileNoteFoundException occurs in a try statement, the catch statement will catch the exception and take its own action, preventing the program from throwing the exception to runtime public static void main(String[] args) throws FileNotFoundException { // Directly access openFile() method from static main tester method // Since openFile() throws an exception itself, and is called in the main method, we need to choose what to do with the exception // We can either throw the exception from main to runtime, and/or use a try catch statement to catch the exception thrown by openFile() try { openFile(); // Use Exception e to allow catch statement to handle any kind of exception } catch (Exception e) { System.out.println(&quot;Could not open file. File not found&quot;); } } // Make method static so we can directly access it in the static main method. This is because both methods are static and are in the same class // The openFile() method throws the FileNotFoundException itself public static void openFile() throws FileNotFoundException { File file = new File(&quot;test.txt&quot;); FileReader fr = new FileReader(file); } } ApplicationTwo.main(null); ApplicationThree.main(null); // Most exceptions stop the runtime of the program completely Application.main(null); . FileNotFoundException occurred. File not found: test.txt Could not open file. File not found . java.io.FileNotFoundException: test.txt (No such file or directory) at java.base/java.io.FileInputStream.open0(Native Method) at java.base/java.io.FileInputStream.open(FileInputStream.java:219) at java.base/java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:157) at java.base/java.io.FileReader.&lt;init&gt;(FileReader.java:75) at Application.main(#14:1) at .(#42:1) . 35. Multiple Exceptions . Notes: . In Java, a method can be modified to be able to handle multiple exceptions, defined in the method signature and separated by commas. The thing is that the method can only throw one exception, but it has the potential to handle any of the exceptions defined, and the exception that is handled depends on the order in which the exceptions occur (whichever occurs first is handled first). | The throw keyword allows us to explicitly cause the program to throw a type of exception (checked or unchecked) from a block of code. The throw new command allows us to manually throw an object of the Exception class during the program, also enabling us to define a custom error message in the constructor of the object (different exception classes may have different constructor parameters). The throw keyword stops the running of the program. | The throws keyword, which is defined with exceptions separated commas in the method signature, helps us define a list of potential exceptions that may occur in a method. We can use try catch statements to choose how to handle each kind of exception (each catch statement parameter takes a specific type of exception, and the code block within the catch statement can take custom action with the program still running, or throw the appropriate exception to stop the running of the program). | In a try multi-catch statement, one catch statement typically lists multiple different exceptions that could occur, separated by |, and defines what action should be taken if any of those exceptions occur. | The classes that represent each kind of exception are all sub-classes of the Exception parent class. This means the Exception class can encapsulate any kind of exception that could occur. Child exceptions should always be checked before parent exceptions, since parent exceptions always (encapsulate) catch errors of child exceptions, but child exceptions cannot catch errors from the other children of parent exceptions. If a parent exception checker were to be placed before the child exception checker, the child exception would never be reached, because it would be handled by the parent exception checker. | . Examples: . import java.io.IOException; import java.text.ParseException; // The exceptions in this program are mostly checked exceptions that are checked during compile time. This means they need to be handled for the program to run. More on this topic later class Test { // The run() method can throw either the IOException or the ParseException public void run() throws IOException, ParseException { // throw new IOException(); // You cannot simultaneously throw 2 different exceptions, so only throw one exception here, as we do not have a try catch statement to sort out the different cases // The object of the ParseException class takes 2 parameters for its constructor // Throw a custom exception message in the case of a ParseException. The program will take the default action of printing out a stack trace in the case of an IOException throw new ParseException(&quot;Error in command list.&quot;, 2); } // FileNotFoundException is a child class of IOException public void input() throws IOException, FileNotFoundException { throw new FileNotFoundException(&quot;File not found.&quot;); } } public class Application { public static void main(String[] args) { Test test = new Test(); // All of the possible exceptions thrown by run() need to be handled by the main() method too // Try statement comes with multiple catch statements, each defining the case for a different kind of exception try { test.run(); } catch (IOException e) { // The printStackTrace() method prints an error message just like throw, but it does not stop the runtime e.printStackTrace(); } catch (ParseException e) { System.out.println(&quot;Couldn&#39;t parse command file.&quot;); } try { test.run(); // Exception (variable type of variable e) means the catch statement can catch any kind of exception here } catch (Exception e) { e.printStackTrace(); } // try multi-catch statement, which defines an action for IOException and ParseException try { test.run(); } catch(IOException | ParseException e) { e.printStackTrace(); } // Catch blocks are checked in the chronological order in which they are defined // FileNotFoundException is a child class of IOException, which means that IOException encapsulates FileNoteFoundException // This means that FileNotFoundException should be checked first, as if IOException were to be placed before, the catch statement containing FileNotFoundException would not be reached try { test.input(); } catch (FileNotFoundException e) { System.out.println(&quot;FileNotFoundException occurred&quot;); } catch (IOException e) { System.out.println(&quot;IOException occurred&quot;); } } } Application.main(null); . Couldn&#39;t parse command file. . java.text.ParseException: Error in command list. at REPL.$JShell$14G$Test.run($JShell$14G.java:25) at REPL.$JShell$15H$Application.main($JShell$15H.java:33) at REPL.$JShell$21.do_it$($JShell$21.java:18) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) java.text.ParseException: Error in command list. at REPL.$JShell$14G$Test.run($JShell$14G.java:25) at REPL.$JShell$15H$Application.main($JShell$15H.java:41) at REPL.$JShell$21.do_it$($JShell$21.java:18) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . FileNotFoundException occurred . 36. Runtime vs. Checked Exceptions . Notes: . Checked exceptions are exceptions that are found during compile time and force you to handle them. Runtime (unchecked) exceptions are exceptions that are found during the actual runtime of the program, and do not necessarily force you to handle them all the time. Both checked and runtime exceptions need to be handled or fixed in some kind of way in order for the program to run properly. | If a compile time error occurs, the entire program just isn&#39;t able to execute. If a runtime error occurs, the part of the program before the line of the code that caused the exception is able to execute, but the rest of the program after it is unable to. | . Examples: . public class Application { public static void main(String[] args) { // Checked exception (checked during compile time) // Thread.sleep(111); // Runtime exception (checked during runtime) // This prompts an ArithmeticException, which is a child class of RuntimeException, which in turn is a child class of the Exception class // int value = 7; // value = value/0; // Another runtime exception // text is a String reference to null, and you cannot really call methods on a reference to a null value // Will produce NullPointerException // String text = null; // System.out.println(text.length()); // Another runtime exception // Array texts only goes up to index 2, which is why texts[3] will produce an ArrayIndexOutOfBoundsException String[] texts = {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;}; try { System.out.println(texts[3]); } catch (RuntimeException e) { // The toString() method of exception object e with variable type RuntimeException prints a clear text representation of the ArrayIndexOutOfBoundsException (RuntimeException encapsulates ArrayIndexOutOfBoundsException) that occurred System.out.println(e.toString()); } System.out.println(&quot;Exceptions are pretty interesting, right?&quot;); } } Application.main(null); . java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 Exceptions are pretty interesting, right? . 37. Abstract Classes . Notes: . In Java, abstraction is essentially hiding certain details about attributes and methods, and only providing essential information to users. | Abstract is a non-access modifier, and can be used on classes and methods. An abstract class basically serves as a base class, which is restricted in that it cannot be used to create objects. To set and get the actual values and bodies of the attributes and methods of an abstract class, it must be inherited by the child class, in which the values are actually established and accessed. | An abstract class can contain attributes, methods, and abstract methods. An abstract method can only be defined within an abstract class, and does not have a body, which means the action it does (its body) can only defined in a child class that inherits the abstract class. The normal attributes and methods of an abstract class can have values and bodies, though they can only be accessed through a child class that extends the abstract class (note that private instance variables of a parent class can be accessed/inherited by a separate/child class if that instance variable has public getters and setters). | Abstract methods defined in an abstract class should be coupled with the abstract keyword and have no body, but should not have the abstract modifier and should have a body when re-defined in child classes. Normal attributes and methods defined in either the abstract class or the child classes should not have the abstract keyword, and their values and bodies can be defined in both the abstract class and child classes. | The main difference in purpose between abstract classes and interfaces is that abstract classes are not intended to create objects from, as they serve to provide common functionality (sort of like a base parent class) to child classes that are related to each other (we want to create objects of these child classes), while interfaces serve to provide common functionality to child classes that are not necessarily related to each other. For example an abstract class Animal can be extended to child classes Pig and Cow (class hierarchy), which are related, while an interface showInfo can be implemented by child classes Machine and Person, which are not that related. | A class can implement multiple interfaces, but can only have one parent class (although it could technically inherit from the parent class of its parent class). In an interface you should have no implementation of methods (no bodies defined), but in an abstract class you can have implementation of methods (bodies defined for conventional methods but not abstract methods). | . Examples: . // Make the Machine class abstract, so that we cannot create objects of it, since it serves as a base class for child classes abstract class Machine { // Private attribute id. You cannot necessarily have abstract attributes, as you can set values for attributes of an abstract class in the abstract class itself // Use encapsulation to hide details of attributes private int id; // Provide getters and setters for the private instance variable id, so that classes that inherit Machine can actually set and get the value of id public int getId() { return id; } public void setId(int id) { this.id = id; } // Define an abstract method called start(). Note that it does not have a body public abstract void start(); public abstract void doStuff(); public abstract void shutDown(); // Define a normal method called run(). Note that it does have a body public void run() { // Call abstract methods in the non-abstract method run(), which is also inherited to child classes // These abstract methods will ultimately have to be defined in the child classes, in order for run() to compute properly start(); doStuff(); shutDown(); } } // Both Camera and Car extend from Machine, implying they have some common functionalities // Camera and Car are conventional classes, meaning they can define the bodies of the abstract methods defined in Machine class Camera extends Machine { // Implement once-abstract method start(), by overriding it and giving the method a body @Override public void start() { System.out.println(&quot;Starting camera&quot;); } @Override public void doStuff() { System.out.println(&quot;Do stuff in camera&quot;); } @Override public void shutDown() { System.out.println(&quot;Shutting down camera&quot;); } } class Car extends Machine { @Override public void start() { System.out.println(&quot;Starting car&quot;); } @Override public void doStuff() { System.out.println(&quot;Do stuff in car&quot;); } @Override public void shutDown() { System.out.println(&quot;Shutting down car&quot;); } } public class Application { public static void main(String[] args) { Camera cam1 = new Camera(); cam1.setId(6); System.out.println(cam1.getId()); // Call inherited method run() from cam1 object, which was not overridden and maintained its original definition from Machine cam1.run(); Car car1 = new Car(); car1.setId(1); System.out.println(car1.getId()); car1.run(); } } Application.main(null); . 6 Starting camera Do stuff in camera Shutting down camera 1 Starting car Do stuff in car Shutting down car . 38. Reading Files with File Reader . Notes: . The FileReader class in Java is a way of reading the contents of files. FileReader is typically used to read a stream, or line, of characters from a particular file when called. FileReader can be used to read a line of characters, and store that data in the form of bytes (which would later be converted to characters either by FileReader or more efficiently BufferedReader) with the process of buffering. | A buffer is essentially a linear and finite sequence of values that are of a particular primitive type. The BufferedReader class in Java serves an efficient way of reading and buffering characters from a character byte stream. | When it comes to reading files in Java, checked exceptions may be frequently met, so it is important to handle these exceptions in the program, usually in the form of try catch statements. Remember that a try statement can be accompanied by multiple catch statements, each specifying a different type of exception(s). | Reminder: Variables declared in Java are limited to the scope of the curly brackets around it. It can inside anywhere inside the brackets, but not outside the brackets. A variable can be declared in a wider scope, and its value can be changed either within that scope or within a more inner scope. | . Examples: . import java.io.File; import java.io.FileReader; import java.io.FileNotFoundException; import java.io.BufferedReader; public class Application { public static void main(String[] args) { // File class for Java&#39;s representation of the file path, attributes, and systems File file = new File(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/lesson-38-file.txt&quot;); // Define BufferedReader outside the try catch statement, so that it can be closed after the first set of try catch statements have been run through // Give br a temporary null value as if the first catch statement executes before br gets a value, the program will not be able to execute the close() method later, since br does not have a value BufferedReader br = null; // Nested try catch statements try { // FileReader class for Java to actually read the contents of the file object, and store the data in bytes FileReader fr = new FileReader(file); // BufferedReader class to buffer the byte data from FileReader into readable char data br = new BufferedReader(fr); // Do not define the actual value of String variable line yet, as Strings are immutable. Each time a line is read, store that stream of characters into line. Each time the value of line changes, a brand new String is created and stored into memory. // Use StringBuilder actually work with mutable Strings String line; // While there is still actual content to read from the file, print out each line of the file using the readLine() method // The readLine() method reads a particular line of the file provided in bytes by FileReader, and converts it to char (readable format). Each time the readLine() method is called, the next current line of the file is read while ((line = br.readLine()) != null) { System.out.println(line); } } catch (FileNotFoundException e) { // Indicate that the file name that was not found on the system (for FileReader) // Use toString() to represent the file name in an appropriate format System.out.println(&quot;File not found: &quot; + file.toString()); } catch (IOException e) { // Indicate that the file was unable to be read (for the readLine() method of BufferedReader) System.out.println(&quot;Unable to read file &quot; + file.toString()); // The finally statement always runs regardless of the result of the try catch statement } finally { // New try catch statement to possibly re-throw exceptions that are met again. This is usually proper convention, as it indicates any further errors down the method hierarchy try { // BufferedReader is at the top of the chain, as it is reading the FileReader which in turn is reading the File, so it needs to be closed for the purpose of preventing memory leaks due to open files // Because of this, closing BufferedReader will ultimately close both FileReader and File br.close(); } catch (IOException e) { // IOException to account for errors produced by the close() method of BufferedReader System.out.println(&quot;Unable to close file: &quot; + file.toString()); } catch (NullPointerException e) { // NullPointerException for if the BufferedReader object has a null value // This exception probably would not even be met, since if the file were to be null, it would likely be handled by the catch statements above System.out.println(&quot;Null Pointer Exception: &quot; + file.toString()); } } } } Application.main(null); . first line second line third line . 39. Try-With-Resources . Notes: . The built-in AutoCloseable interface of Java indicates that a class implementing it should have some adequate form of the close() method. | The try-with-resources statement in Java is very similar to the try catch statement. The notation is mostly the same, except the try statement can now take parameters/clauses, and within the parameters/clauses, you can declare the resources (or objects that work with resources) that the try statement will check and work with. Resources may include files or sockets, which are opened when they are accessed, and should be closed to prevent memory leaks. | The catch statement in the try-with-resources serves basically the same purpose, handling any exceptions that may be thrown during the running of the try statement, or any exceptions thrown while working with or closing the resource(s), and the finally statement will run no matter the outcome of the try and catch statements. | Objects of classes that implement AutoCloseable, which are declared within try-with-resources, will automatically call the close() method after finishing performing all of its called actions. If any errors are met before the close() method (in the try statement), the try-with-resources will call the catch statement, and the rest of the try statement will not be executed (known as try exception). However, the catch statement will check again for the close() method, which is ran at the very end of the try-with-resources (known as try-with-resources exception, which may become a suppressed exception if a try exception is met before the same try-with-resources statement. A suppressed exception is basically one that is thrown but somehow is ignored, and mainly appears within try, catch, and finally statements). | . Examples: . import java.io.File; import java.io.FileReader; import java.io.BufferedReader; import java.io.FileNotFoundException; import java.io.IOException; // Temp needs to have a close() method because it implements AutoCloseable class Temp implements AutoCloseable { // Override the close() method provided by AutoCloseable // The throws keyword indicates that the close() method is capable of handling, or throwing, exceptions of type Exception (basically any exception) @Override public void close() throws Exception { System.out.println(&quot;Closing!&quot;); // Manually throw an Exception at the end of the close() method throw new Exception(&quot;oh no!&quot;); } } public class Application { public static void main(String[] args) { // Notation for try-with-resources // The close() method may throw an exception, and that exception must be handled in some way in the main method try(Temp temp = new Temp()) { // The close() method of the temp object (which implements AutoCloseable) will automatically be called after the try-with-resources has fully been executed System.out.println(&quot;Try-with-resources example&quot;); } catch (Exception e) { // Print error message in standard format e.printStackTrace(); } File file = new File(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/lesson-39-file.txt&quot;); // Use FileReader and BufferedReader to read the file line by line (FileReader) and effectively get all the characters in each line (BufferedReader) // Don&#39;t store the new object of FileReader in a variable, since we don&#39;t reference it again. Here, we just need to pass the new object of FileReader into the constructor of BufferedReader // Try-with-resources with multiple catch statements try(BufferedReader br = new BufferedReader(new FileReader(file))) { // Perform actions on the declared resource (object that works with files) in the try clause above, inside the try statement String line; // While there is still actual content to read from the file, print out each line of the file using the readLine() method // The readLine() method reads a particular line of the file provided in bytes by FileReader, and converts it to char (readable format). Each time the readLine() method is called, the next current line of the file is read while ((line = br.readLine()) != null) { System.out.println(line); } } catch (FileNotFoundException e) { System.out.println(&quot;Can&#39;t find file &quot; + file.toString()); } catch (IOException e) { System.out.println(&quot;Unable to read file &quot; + file.toString()); } finally { System.out.println(&quot;End of program&quot;); } } } Application.main(null); . Try-with-resources example Closing! . java.lang.Exception: oh no! at REPL.$JShell$12G$Temp.close($JShell$12G.java:30) at REPL.$JShell$13P$Application.main($JShell$13P.java:28) at REPL.$JShell$34.do_it$($JShell$34.java:21) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at io.github.spencerpark.ijava.execution.IJavaExecutionControl.lambda$execute$1(IJavaExecutionControl.java:95) at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) at java.base/java.lang.Thread.run(Thread.java:829) . Dylan will take over the mf world! End of program . 40. Creating and Writing Text Files . Notes: . In Java, the FileWriter class is essentially used to change or write data in the form of characters to text files. If the specified file path does not exist, FileWriter will create the file itself. | The BufferedWriter class is essentially used to change or write data to text files while utilizing a character-output stream (contains character bytes that need to be buffered), effectively and efficiently buffering the character-stream passed into its constructor that is to be written into the text files. | As a reminder, a buffer is essentially an area of memory that is allocated toward temporarily saving data (used when working with files) while it is moved from one place to another (e.g. from program to text file), and buffering is the act of facilitating the data flow and transfer between these 2 places. | The key difference between FileWriter and BufferedWriter is that FileWriter writes that character-stream directly into the text file, while BufferedWriter internally buffers the character-stream into the text, effectively allowing for less IO operations and thus better overall performance. | FileWriter and BufferedWriter, like FileReader and BufferedReader, are usually used in correspondence, where FileWriter (initially accesses the file and inputted character streams) is passed into the constructor of BufferedWriter (buffers the character streams and appends them to file). Note that whenever FileWriter and BufferedWriter are used, they will make changes to the original state of the file in its creation (usually blank), not its latest state, which means you cannot add to changes throughout multiple runs of the program (the file will refresh to blank at the beginning of each run of the program). However, you can save the changes to the file, and the file will not refresh unless you run the program again. | . Examples: . import java.io.File; import java.io.FileWriter; import java.io.BufferedWriter; import java.io.IOException; public class Application { public static void main(String[] args) { File file = new File(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/lesson-40-file.txt&quot;); // Try-with-resources statement // Declare resource(s) in the try clause // Try-with-resources automatically closes resources // Use FileWriter and BufferedWriter to access/create a file (FileReader), and change the content within it with buffered inputted character streams (BufferedReader) try (BufferedWriter br = new BufferedWriter(new FileWriter(file))) { // The write() method of BufferedReader can append new text/Strings to the current line of the file that the program is on br.write(&quot;This is line one&quot;); // The newLine() method moves the program to the next line of the file br.newLine(); br.write(&quot;This is line two&quot;); br.newLine(); br.write(&quot;Last line&quot;); } catch (IOException e) { System.out.println(&quot;Unable to read file &quot; + file.toString()); } finally { System.out.println(&quot;End of program&quot;); } } } Application.main(null); . End of program . 41. The Equals Method . Notes: . The == (equal to) sign in Java is a relational/comparison operator, that returns true if 2 values are the same, and false otherwise. For primitive types, == checks if the 2 values are equal. For reference (non-primitive) types, == checks if the 2 references refer to the same object. Back to primitive types, == returns true if 2 values are of the same data type and have the same value, or if 2 values are of different data types but can be converted to the same data type and have the same value, and false otherwise. | The equals() method in Java is inherited by all objects from the Object superclass, and is typically used to compare the values of object (reference) variables semantically (often in terms of attribute/property values, and in terms of object type and sometimes variable type) to check for equality (return true if the defined properties in the equals() method are equal in both objects, and false otherwise). The equals method is typically overridden in classes to define how objects of that class should be compared, in terms of which attributes or other kinds of properties should be checked. | A general rule of thumb is that when checking for equality semantically, use == for comparing primitive types, and equals() for comparing non-primitive (object) types. | The String class, like all other classes, inherits the Object class, and has its own implementation of the equals() method. The equals() method for Strings compares the contents of 2 String, are returns true if the characters in both Strings are all the same (also same order and same number of characters), and false otherwise. | In Java, the default toString() method of the Object class outputs a string representation of a particular object, which comprises the package and class name, as well as the hexadecimal memory location. The toString() method is automatically called when any value is printed to the Java console, and can be explicitly called on objects. A hash code is usually a unique integer value that is assigned to all created objects (generated by defined hashing algorithm. 2 objects can have the same hash code if generally they have equal properties and are of the same class (satisfying conditions of equals() method)), and a hash code of a particular object can be retrieved using the default hashCode() method. It is important to note that objects that are deemed equal by the equals() method have the same hash code, since the properties checked in the equals() method are also used in the hashing algorithm of the hashCode() method. equals() and hashCode() usually both need to be overridden in a particular class. | . Examples: . class Person { private int id; private String name; public Person(int id, String name) { this.id = id; this.name = name; } // Override toString() method inherited from ultimate parent Object class // Conventional notation for toString() method @Override public String toString() { return &quot;Person [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } // Override equals() method inherited from ultimate parent Object class // Conventional notation for equals() method // Here, the equals() method checks to see if the id and name attributes of 2 objects are the same. Notice how some preconditions are checked before the actual values, such how equals() checks for null values // Notice how the equals() method compares the properties of the object it is called on to the properties of the object passed into its parameter @Override public boolean equals(Object obj) { // Check if both objects refer to the same object, and immediately return true if that&#39;s the case if (this == obj) { return true; } if (obj == null) { return false; } // The object passed into the parameter is of variable type Object, for the purpose of preventing exceptions in the case objects of different variable types (classes) are compared, in which case equals() will return false if (getClass() != obj.getClass()) { return false; } // Start comparing properties once it is known that the 2 objects have the same object type, and make sure both objects have the same variable type to allow for effective property comparing Person other = (Person) obj; if (id != other.id) { return false; } if (name == null) { if (other.name != null) { return false; } } else if (!name.equals(other.name)) { return false; } return true; } // The inner-workings of the default hashCode() method (hashing algorithm) // Notice how hashCode() takes the same properties defined in equals() into consideration, showing how 2 objects can have the same hash code if they are equal semantically @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + id; result = prime * result + ((name == null) ? 0 : name.hashCode()); return result; } } public class Application { public static void main(String[] args) { Person person1 = new Person(5, &quot;Bob&quot;); Person person2 = new Person(8, &quot;Sue&quot;); Person person3 = new Person(5, &quot;Bob&quot;); // Will return false because person1 and person2 refer to different objects System.out.println(person1 == person2); // Even though person1 and person3 have the same values in terms of properties (equal semantically), this will return false, because they refer to different objects, which in terms of memory are different System.out.println(person1 == person3); // Use equals() method inherited from Object superclass to compare objects semantically (in terms of properties, not object stored in memory) System.out.println(person1.equals(person2)); System.out.println(person1.equals(person3)); // Experiment with wrapper classes, which are non-primitive counterparts to primitive data types // Wrapper classes are essentially like objects, so == will check if the variables refer to the same object, not their actual value Double value1 = 7.2; Double value2 = 7.2; // Will return false, since Java doesn&#39;t automatically set 2 references of Double initialized with the same value to the same object System.out.println(value1 == value2); // Will return true, since equals() checks actual values System.out.println(value1.equals(value2)); Integer number1 = 7; Integer number2 = 7; // Will return true, since Java does automatically set 2 references of Integer initialized with the same value to the same object System.out.println(number1 == number2); // Will return true, since equals() checks actual values System.out.println(number1.equals(number2)); String word1 = &quot;hey&quot;; String word2 = &quot;hey&quot;; String word3 = &quot;hey&quot;.substring(0, 3); // Will return true, since Java does automatically set 2 references of String initialized with the same content to the same object System.out.println(word1 == word2); // Will return false, since even though word1 and word3 have the same content, they didn&#39;t initially have the same content, and so were not referenced to the same String object System.out.println(word1 == word3); // Use equals() to effectively semantically compare the content of 2 Strings, regardless of their initial content System.out.println(word1.equals(word2)); System.out.println(word1.equals(word3)); // The default toString() method of the Object class outputs the package and class name, as well as the hexadecimal memory location System.out.println(new Object()); // Use hashCode() method to output unique hash code of instantiated object of Object superclass System.out.println(new Object().hashCode()); // These 2 objects have different hash codes because they are not equal in terms of Object&#39;s equals() method (checks if references refer to same object) System.out.println(new Object().hashCode()); // These 2 objects have the same hash code because they have equal properties and are of the same class (so they are equal in terms of Person&#39;s equals() method) Person test1 = new Person(7, &quot;Dylan&quot;); Person test2 = new Person(7, &quot;Dylan&quot;); System.out.println(test1.hashCode()); System.out.println(test2.hashCode()); } } Application.main(null); . false false false true false true true true true true true true java.lang.Object@16ccc45e 843134895 774477045 66512222 66512222 . 42. Inner Classes . Notes: . In Java, an inner class is a class that is nested inside another class (or sometimes interface). Inner classes serve to group related classes together, allowing them to collectively function as a whole for the outer class. | While outer classes can only be declared as public or as the default access modifier, inner classes can be declared as public, private, protected, or default, allowing them to have the properties of the just mentioned access modifiers (e.g. private inner classes are only accessible within the outer class, and protected inner classes are only accessible within the same package of the outer class or any subclasses, similar to attributes and methods). | Outside classes cannot be static, but inner classes can. Static inner classes, similar to static attributes and methods, belong to the outer class itself (there is only one copy of it for the class and its subsequent objects), which means that a static inner class can be accessed without instantiating the outer class first (i.e. objects of a non-static inner class can only be created after an object of the outer class has been instantiated, but objects of a static inner class can be created without first creating an object for the outer class). A static inner class can have both static and non-static members (e.g. attributes, methods, but not constructors), but cannot directly access the instance (non-static) variables of the outer class (an object of the outer class would need to be created). A non-static inner class however, can have both static and non-static members, and can also directly access both static and non-static variables of the outer class. | Basically, non-static inner classes are grouped together for common functionality, while static inner classes are not necessarily associated to the instance variables of the outer class, but are still related to the outer class. | . Examples: . class Robot { private int id; // Nested class that is a kind of inner-class // Nested classes can directly access the instance (non-static) attributes and methods of the outer classes // Make inner class public so that objects of it can be created outside of the outer class public class Brain { public void think() { System.out.println(&quot;Robot &quot; + id + &quot; is thinking&quot;); } } // Make inner class private so that objects of it can only be created within the outer class private class Legs { private String name = &quot;Robot&#39;s legs&quot;; private void run() { System.out.println(&quot;Running&quot;); } } // Default access modifier so that objects of it can be created within the same package as outer class static class Battery { public void charge() { System.out.println(&quot;Battery charging...&quot;); } } public Robot(int id) { this.id = id; } public void start() { System.out.println(&quot;Starting robot &quot; + id); // Outer class can access attributes and methods of inner classes by creating objects of the inner classes Brain brain = new Brain(); brain.think(); Legs legs = new Legs(); // The outer class can even access the private attributes and methods of the inner class using objects as a reference, while outside classes can not (getters and setters would be needed for private attributes, and non-private methods of the class would be needed to run the private methods) System.out.println(legs.name); legs.run(); // Like anonymous classes, inner classes declared within a method should have access to local variables (variables within the same method), but the local variables should conventionally be final (constant) final String name = &quot;Robert&quot;; // You can even declare inner classes within methods // The inner class has direct access to variables defined inside the method, as well as variables within the outer class that the method itself is in // Nested classes inside methods do not have access modifiers, because their scope is limited to the methods, which means that they cannot be accessed outside of the method class Temp { public void doSomething() { System.out.println(&quot;ID is: &quot; + id); System.out.println(&quot;My name is: &quot; + name); } } Temp temp = new Temp(); temp.doSomething(); } } // Reminder that you can only have one public class per file, but you can have as many classes in a file as you want. Public class has to match name of file public class Application { public static void main(String[] args) { Robot robot = new Robot(7); robot.start(); // Notation for creating an object for the non-static inner class Brain outside of outer class Robot, since creating an instance of Robot does not automatically create an instance of Brain Robot.Brain brain = robot.new Brain(); brain.think(); // Notation for creating an object of static inner class Battery Robot.Battery battery = new Robot.Battery(); battery.charge(); } } Application.main(null); . Starting robot 7 Robot 7 is thinking Robot&#39;s legs Running ID is: 7 My name is: Robert Robot 7 is thinking Battery charging... . 43. Enum Types: Basic and Advanced Usage . Notes: . In Java, an enum is a special kind of class that contains a group of constant values (implicitly static and final). Enum stands for enumeration, which in turn means &quot;specifically listed.&quot; Like attributes of a class, constant values of an enum can be accessed with the dot syntax, and the value name of a constant inside an enum is conventionally all upper case. Enum values have essentially their own data type (they are NOT Strings), and are represented by objects names similar to that of variable names; enum values are data type safe, as they are actually objects of the enum type they are declared within. | An enum type in Java is primarily used for storing a fixed group of already-defined constant values, which usually all have a common relation. An example of an enum set includes the days of the week, and the values of enums are typically checked with a switch statement. Enum values cannot be changed once the enum has been declared. An enum variable has the variable type of the enum type, can be used to store a particular enum value/object, and can subsequently access attributes and methods of that enum value using the dot notation. | An enum type can contain a constructor or multiple constructors, which can be used to initialize the instance data of an enum object. Since enum values are essentially objects of the enum type, when the list of enum values are declared within the enum, appropriate arguments must be passed for each of them (if the constructor(s) has parameters). An enum type/class can have attributes and methods like a normal class, which can be accessed with the dot notation on enum variables or enum values declared outside of the enum type (getters and setters needed for private variables), or directly from inside the enum type. All enum types have a values() method, which returns an array of all of the enum values/objects. | . Examples: . // enum is a special kind of class // Syntax for declaring an enum, with 3 certain values that it contains enum Animal { // Enum values are objects of their enum type // Make sure to end list of enum values with semi-colon // The constructor of Animal has a parameter, so every enum value must be declared with an argument passed // When enum values are accessed outside of the enum type, arguments do not need to be passed, since the constructors are ran in the enum type itself CAT(&quot;Fergus&quot;), DOG(&quot;Fido&quot;), MOUSE(&quot;Jerry&quot;); // Instance data of enum type private String name; // Access modifier for enum type can either be private or package-private (default) Animal(String name) { this.name = name; } public String getName() { return name; } // Override toString() method inherited from Object parent class @Override public String toString() { return &quot;This animal&#39;s name is &quot; + name; } // Method public void speak() { System.out.println(&quot;My name is &quot; + name); } } public class Application { // Possible variables that the variable animal should be able to take on. This whole process is inefficient and can be faulty, which is why enums can be useful here public static final int DOG = 0; public static final int CAT = 1; public static final int MOUSE = 2; public static void main(String[] args) { int animal1 = CAT; // Switch statement, with the case values representing the values of certain final variables switch (animal1) { case DOG: System.out.println(&quot;Dog&quot;); break; case CAT: System.out.println(&quot;Cat&quot;); break; case MOUSE: System.out.println(&quot;Mouse&quot;); break; } // Syntax for setting a particular value of an enum type to an object enum variable. Notice how we need to define the enum type of the enum variable, similar to how we have to define the variable and object type when creating an ordinary object variable Animal animal2 = Animal.DOG; // Check the possible values of the enum variable switch(animal2) { case DOG: System.out.println(&quot;Dog&quot;); break; case CAT: System.out.println(&quot;Cat&quot;); break; case MOUSE: System.out.println(&quot;Mouse&quot;); break; } // Enum is a part of the java.lang package, which is automatically imported/available to Java compilers // Print out the enum value CAT of the enum type Animal System.out.println(Animal.CAT); // Get the class of the enum value DOG System.out.println(Animal.DOG.getClass()); // Check if the enum value DOG is part of the enum class Animal System.out.println(Animal.DOG instanceof Animal); // Check if the enum value DOG is an instance of the Enum class // Objects of child classes count as instances of parent classes, since child classes extend from parent classes (e.g. object of Toyota child class is technically an instance of the Car parent class) System.out.println(Animal.DOG instanceof Enum); // Print toString() return value of MOUSE enum value/object System.out.println(Animal.MOUSE.toString()); // Store enum object DOG (object constructor ran automatically in enum type itself) in an enum variable for further usage Animal animal3 = Animal.DOG; // Call method of enum type on enum variable animal3.speak(); // name() method of Enum class that prints enum value/object name as a String System.out.println(&quot;Enum name as a string: &quot; + Animal.DOG.name()); // valueOf() method that calls String representation of a specified enum object name System.out.println(Animal.valueOf(&quot;CAT&quot;)); // values() method to get an array (stores data types of enum type) of the list of values/objects of a particular enum type // When the objects are printed out, the toString() method is automatically ran on each of them for (Animal animal : Animal.values()) { System.out.println(animal); } } } Application.main(null); . Cat Dog This animal&#39;s name is Fergus class REPL.$JShell$14K$Animal true true This animal&#39;s name is Jerry My name is Fido Enum name as a string: DOG This animal&#39;s name is Fergus This animal&#39;s name is Fergus This animal&#39;s name is Fido This animal&#39;s name is Jerry . 44. Recursion . Notes: . Recursion is essentially the technique of commanding a method to call itself repeatedly until a halting/base condition is met (like a loop). Often times the halting condition checks the value of a particular variable(s), which is usually changed each time method calls itself, and often belongs to the parameter variable passed into the method. The primary purpose of recursive functions is too break complicated problems into simpler problems which can be solved more easily. | Stack memory is mostly used to store local variables and method calls (e.g. order of method execution), while heap memory is mostly used to store objects of classes, utilizing dynamic (allocating memory during runtime) memory allocation and de-allocation. A StackOverflowError can occur if a method calls itself in an infinite recursive loop. | A factorial integer is the product of an integer and all of the integers below it (e.g. 3! = 1 2 3 = 6). | Basically, the first call to a non-void recursive function will start a chain of return values, and each subsequent recursive call will become a part of the base return chain, as the return statement of a recursive call will usually perform some sort of operation on the original base return chain, then return a call of the recursive method again with some variables (typically parameters) changed, and connect that recursive call with the base return chain with the operation specified by the return statement (e.g. halting condition is value == 1, and return 1 when that happens --&gt; return calculate(value - 1) value --&gt; calculate(3) --&gt; return calculate(2) 3 --&gt; return calculate(1) 2 3 --&gt; return 1 2 3 --&gt; return 6). Once the halting condition has been reached, the recursive method will return a value that is usually combined with the rest of the return chain, stopping the calling of the method altogether, and computing and returning the final return value from the whole base return chain and its values (which can be visualized by a recursive tree). | For void recursive functions, the function will repeatedly call itself (without actually returning the calls) until the base condition has been met, in which case it will just return (returns no value, or void), putting a stop to the recursive calls. In each iteration, the program will perform some sort of action, allowing the recursive method to be one step closer to the halting condition. The halting/base condition is essential for the program to run effectively, as it prevents stack overflow, and allows the recursive method to actually stop calling itself. | The Towers of Hanoi is a popular recursive solution example. | . Examples: . public class Application { // Private methods can only be accessed within the class // Static methods can be called without creating an object of the class (directly within the class, or dot notation with class name for outside the class) private static void test(int value) { value = value - 1; System.out.println(value); } private static void calculate(int value) { System.out.println(value); // Halting condition to stop recursive calls. Each time calculate is called, its parameter variable value is decremented by 1 if (value == 1) { // Return keyword to stop the method execution and thus any more method calls return; } calculate(value - 1); } private static int factorial(int value) { System.out.println(value); // If value is equal to 1 in the latest recursive call, return the integer 1 if (value == 1) { return 1; } // Else, return the current value multiplied by the return value of a new recursive call, which calls the factorial method again with value decremented by 1, and multiply all of this with the base return chain of values (the base return chain is appended to in every recursive call) return factorial(value - 1) * value; } public static void main(String[] args) { // value is of a primitive type, so its value here will not be affected by the operations performed in the method it is passed in as an argument // The method allocates new memory to its parameters, which means the values of its parameter variables are independent of the actual argument variables passed into it. This is an example of passing by value int value = 7; // The value variable inside the test() method is different from the value variable inside the main() tester method test(value); System.out.println(value); System.out.println(&quot;Example recursive function:&quot;); calculate(value); System.out.println(&quot;Factorial recursive calculator:&quot;); System.out.println(factorial(value)); } } Application.main(null); . 6 7 Example recursive function: 7 6 5 4 3 2 1 Factorial recursive calculator: 7 6 5 4 3 2 1 5040 . 45. Serialization: Saving Objects to Files . Notes: . Serialization is essentially the process of converting an object state (object&#39;s data) into a byte stream and saving that to a database, file, or over a network, while de-serialization is the process of converting an object byte stream into an actual object whose properties can be accessed in the program. Primitive types can also go through the same process of serialization and de-serialization. | Normally the file read program and file write program belong to the same program, and take on the forms of the open (read) and save (write) functions. | In Java, it is normal to have more than one main() method, as it allows the programming to have multiple entry points to their program, with each entry point serving a different purpose (e.g. run main function, test specific area of code, etc.). | Streaming in Java is basically sending an unchangeable, ordered sequence of elements, usually objects, to a specified location. We can perform different kinds of operations on sent streams (e.g. serializing, reading, writing, etc.). | The FileOutputStream class is primary used for writing data byte streams to a file, focusing on primitive data types like int, while FileWriter is used to write data byte streams for character-oriented data. | The ObjectOutputStream class essentially serializes Java objects into data byte streams, which are marked with the class name and object properties. These converted object data streams can be written to files and transferred over networks. | FileOutputStream and ObjectOutputStream both follow sequential file writing, meaning that the lines of data written into their files are done so by an ordered sequence of code between the opening and closing of the file. | In Java, to make objects of a class serializable, the class needs to implement the Serializable interface of the java.io package. The Serializable interface doesn&#39;t have any methods to implement, as it only really identifies classes that implement it as serializable. | Just to review, byte streams are used for the input and output of 8-bit byte data. Byte streams are sent to the program to be read from an input stream, and are sent to a file or database when written from an output stream, and they contain raw binary data (string of bits) which can be converted to multiple different data types. | FileInputStream is primarily used to reading raw byte data streams (such as image data or object data) from files to the program, while FileReader is more useful for reading character-oriented data. ObjectInputStream is used for de-serializing and reading object data previously written by ObjectOutputStream, converting the object data back into their corresponding objects to be accessed by the program. | It is important to note again that each time a certain FileOutputStream and ObjectOutputStream are ran, they don&#39;t build upon previously written data to files from previous runs. Instead, the files are reset to their default states at the start of the program (usually empty), and data is written to them from there (overwriting files). | serialVersionUID is usually a private, static, final, and long, and is a pre-defined unique identifier for a specific class. The purpose of this variable is to make sure that the class of a de-serialized object is the exact same as the class it was serialized as. The pre-defined serialVersionUID may be changed for a certain class by the programmer if the version of that class changes (i.e. attributes and methods are updated, so the programmer changes the serialVersionUID to make it so that the current version of the class is incompatible with previously serialized objects of an older version of the class) If serialVersionUID for an object of a particular class has somehow changed after de-serialization, the program will output an InvalidClassException runtime error. | . Examples: . import java.io.FileOutputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.io.ObjectOutputStream; import java.io.Serializable; import java.io.FileInputStream; import java.io.ObjectInputStream; // Person implements Serializable interface class Person implements Serializable { // Example serialVersionUID // private static final long serialVersionUID = 7683485275814867L; private int id; private String name; public Person(int id, String name) { this.id = id; this.name = name; } @Override public String toString() { return &quot;Person [id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } } public class ReadObjects { public static void main(String[] args) { System.out.println(&quot;Reading objects...&quot;); // Try-with-resources to automatically close FileInputStream // FileInputStream to read bytes from file try (FileInputStream fi = new FileInputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/people.bin&quot;)) { // ObjectInputStream used with FileInputStream to de-serialize and read byte streams of object data from the file ObjectInputStream is = new ObjectInputStream(fi); // De-serialize and read current object data stream from the input stream of the file. Each time a read() method of the input stream is called, the input stream moves on to the next byte stream to read // Downcast variable type of object back to Person, since the ObjectOutputStream saves objects as the parent variable type Object Person person1 = (Person) is.readObject(); Person person2 = (Person) is.readObject(); is.close(); // Read objects in same order in which they were written System.out.println(person1); System.out.println(person2); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); // Happens if de-serialized object&#39;s class could not be found in the program } catch (ClassNotFoundException e) { e.printStackTrace(); } } } class WriteObjects { public static void main(String[] args) { System.out.println(&quot;Writing objects...&quot;); Person mike = new Person(543, &quot;Mike&quot;); Person sue = new Person(123, &quot;Sue&quot;); System.out.println(mike); System.out.println(sue); // If people.bin does not already exist, FileOutStream will automatically create the file to the specified file path, or to the working directory if no path is specified // Try-with-resources notation with FileOutputStream as the resource, which automatically closes the files opened by FileOutputStream after all of their actions // FileOutputStream to enable to writing a data byte streams try (FileOutputStream fs = new FileOutputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/people.bin&quot;)) { // ObjectOutputStream used in correspondence with FileOutputStream to serialize objects and write them as data byte streams to files ObjectOutputStream os = new ObjectOutputStream(fs); // Serialize and write object of Person to file os.writeObject(mike); os.writeObject(sue); // Manually close ObjectOutputStream, preventing memory leaks of the file os.close(); // Happens if we can&#39;t create file to specified file location } catch (FileNotFoundException e) { e.printStackTrace(); // Happens if we somehow can&#39;t write to the specified file } catch (IOException e) { e.printStackTrace(); } } } WriteObjects.main(null); ReadObjects.main(null); . Writing objects... Person [id=543, name=Mike] Person [id=123, name=Sue] Reading objects... Person [id=543, name=Mike] Person [id=123, name=Sue] . 46. Serializing Arrays . Notes: . In Java, an array is actually a type of object that is dynamically created (mutable), which means it is serializable as long as the objects within it are serializable. During serialization, the array will be serialized along with the objects within it. | An ArrayList is a generic class that is basically like a resizable array. Like an array, an ArrayList and its elements can also be serialized in the program. | Both arrays and ArrayList, when de-serialized, will take on their original form, as well as the objects within them. Like de-serializing objects, programmers are required to type cast the de-serialized arrays and ArrayLists, due to the Object Stream storing objects as the grandparent variable type Object (e.g. type[] for arrays, ArrayList&lt;type&gt; for ArrayLists). | Generic classes such as ArrayList encounter type erasure. Type erasure happens during compile time and is basically when the information about the parameterized type is lost during some kind of operation. Arrays, however, do not encounter type erasure, as they maintain the information about the variable type they store during compile time. | The purpose of the defined parameterized type is to prevent programmers from appending elements of the wrong variable type to the Generic, but after compile time, or in this case after serializing and de-serializing the Generic, the full information about the parameterized type is basically erased. Because of this, the program will produce a warning when you type cast a de-serialized Generic, but it will still work as long as the elements saved inside the Generic have the same variable type as the type casted parameterized type. | . Examples: . import java.io.FileOutputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.io.ObjectOutputStream; import java.io.Serializable; import java.io.FileInputStream; import java.io.ObjectInputStream; public class WriteObjects { public static void main(String[] args) { System.out.println(&quot;Writing objects...&quot;); // Instantiate array that stores variable type Person, which contains 3 objects of the Person class // The objects are not assigned to a variable but are rather instantiated directly in the array // Since the objects are not stored in variables, they can be considered anonymous objects, but since they are stored in an array, they can actually be referenced more than one time in the code with the array&#39;s methods, as well as take up individual heap memory // Even though the variable types of the objects are not defined, they will automatically be assigned variable type of the array, since they are references of the same class type as the variable type (would also work if they were references of a child class type of the variable type) Person[] people = {new Person(1, &quot;Sue&quot;), new Person(2, &quot;Mike&quot;), new Person(3, &quot;Bob&quot;)}; // ArrayList of parameterized variable type Person // Here, the asList() method of the Arrays class initializes the elements of the ArrayList by sort of converting an already-defined array into an ArrayList (the array itself doesn&#39;t change, but the ArrayList does) ArrayList&lt;Person&gt; peopleList = new ArrayList&lt;Person&gt;(Arrays.asList(people)); // Notation for try-with-resources with multiple auto-closable resources defined within the try parameter try (FileOutputStream fs = new FileOutputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/people-array.ser&quot;); ObjectOutputStream os = new ObjectOutputStream(fs)) { // Serialize and write an array of Person objects to the file os.writeObject(people); // Serialize and write an ArrayList of Person objects to the file os.writeObject(peopleList); // Serialize and write an integer that is the size of the ArrayList into the file os.writeInt(peopleList.size()); for (Person person : peopleList) { // Serialize and write each object in peopleList one at a time to the file os.writeObject(person); } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } // Implement Serializable interface to make class serializable by the program class Person implements Serializable { private int id; private String name; public Person(int id, String name) { this.id = id; this.name = name; } @Override public String toString() { return &quot;Person[id=&quot; + id + &quot;, name=&quot; + name + &quot;]&quot;; } } class ReadObjects { public static void main(String[] args) { System.out.println(&quot;Reading objects...&quot;); // Have try-with-resources auto-close both the FileInputStream and ObjectInputStream // This is so that the resources will be able to close no matter the outcome of the try-with-resources statement, as even if an exception is caught before the end of the resources&#39; actions, they will auto-close at the end of the try-with-resources statement try (FileInputStream fi = new FileInputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/people-array.ser&quot;); ObjectInputStream is = new ObjectInputStream(fi);) { // Type cast de-serialized array back to variable type Person[], since the ObjectOutputStream stores objects as grandparent variable type Object, and store it inside a new initialized array of type Person called people, defining its size and the objects within it Person[] people = (Person[]) is.readObject(); // Iterate through each Person object in the array and print out its String representation // Each object has been automatically assigned the variable type of the array for (Person person : people) { System.out.println(person); } // Type cast de-serialized ArrayList back to variable type ArrayList of parameterized type Person // Annotation for suppressing unchecked exception warnings @SuppressWarnings(&quot;unchecked&quot;) ArrayList&lt;Person&gt; peopleList = (ArrayList&lt;Person&gt;) is.readObject(); // Iterate through ArrayList with enhanced for loop for (Person person : peopleList) { System.out.println(person); } // De-serialize integer that is the currently selected byte stream of the ObjectInputStream, and use that as the capacity of the for loop after, which iterates through the following de-serialized objects int num = is.readInt(); for (int i = 0; i &lt; num; i++) { // De-serialize current object Person person = (Person) is.readObject(); // Print out object, which automatically calls the toString() method System.out.println(person); } is.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } } } WriteObjects.main(null); ReadObjects.main(null); . Writing objects... Reading objects... Person[id=1, name=Sue] Person[id=2, name=Mike] Person[id=3, name=Bob] Person[id=1, name=Sue] Person[id=2, name=Mike] Person[id=3, name=Bob] Person[id=1, name=Sue] Person[id=2, name=Mike] Person[id=3, name=Bob] . 47. The Transient Keyword and More Serialization . Notes: . In Java, a thread is essentially a directional path that is ran through during the program&#39;s execution. Most programs have at least one thread, known as the main thread, which allows for the program&#39;s execution. Having multiple threads helps the program to be more efficient, as it is able to perform many tasks at the same time. To achieve this, programmers often implement the Runnable or Callable interface into their classes. | The transient keyword defines a property of a class as un-serializable, meaning it will not be converted into a byte stream and will not be saved into a file, database, or over a network. An object will maintain the values of any transient variables before serialization, but after the process of serialization and de-serialization, its transient variables&#39; values will be erased and instead have Java&#39;s respective data type default values. | In Java, all instance variables of a serializable class will be serialized, static variables will not be serialized and will default to the current value set by the class after de-serialization, transient variables will not be serialized, and super class variables will be serialized if the super class is serializable. It is important to note that during the de-serialization process, the program creates a new instance of the object in memory, but does not actually invoke the constructor call, as it instead bypasses it, populating the object&#39;s data with its original state and fields from the de-serialized information (with the exception of transient variables which are not serialized and static variables, which are given the current value set by the class itself). | . Examples: . public class Person implements Serializable { private int id; private String name; // Make secondId variable transient, so that it cannot be serialized private transient int secondId; // Only one copy of static variables are created, and that copy is shared amongst multiple objects of the same class. This means whenever its value is changed, it will stay the value for all subsequent objects unless changed again private static int count; public Person() { System.out.println(&quot;Default constructor&quot;); } public Person(int id, String name, int secondId) { this.id = id; this.name = name; this.secondId = secondId; System.out.println(&quot;Normal constructor&quot;); } // Use static getters and setters to access a static attribute public static int getCount() { return count; } public static void setCount(int count) { // Static method notation, as Person refers to the same class reference as the this keyword // The this keyword usually refers to the object, but since we are working with a static variable, the class should be referred to instead Person.count = count; } @Override public String toString() { return &quot;Person [id=&quot; + id + &quot;, name=&quot; + name + &quot;, secondId=&quot; + secondId + &quot;, count=&quot; + count + &quot;]&quot;; } } class WriteObjects { public static void main(String[] args) { System.out.println(&quot;Writing objects...&quot;); // Try-with-resources auto-closes FileOutputStream and ObjectOutputStream try (ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/transient.ser&quot;))) { // Define transient variable secondId as 10 for person object before serialization // Will print Normal constructor, since we are using the three-argument constructor Person person = new Person(7, &quot;Mark&quot;, 10); // Use dot notation to access setter method, but use the class name instead of object name, since the static method belongs to the class itself // The count static attribute will be set to 88 for all subsequent objects of the Person class, unless changed later on Person.setCount(88); System.out.println(person); os.writeObject(person); } catch (FileNotFoundException e) { // Print default error message for this kind of exception, and continue on with code e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } class ReadObjects { public static void main(String[] args) { System.out.println(&quot;Reading objects...&quot;); // Make code more concise by not storing the FileInputStream object in a variable, but instead instantiating it and passing it directly as an argument into ObjectInputStream // The FileInputStream object type is compatible to the FileInputStream variable type, and so is an appropriate argument for ObjectInputStream&#39;s parameter try (ObjectInputStream is = new ObjectInputStream(new FileInputStream(&quot;/home/dylanluo05/DylanLuoAPCSA/assets/java-fundamentals-resources/transient.ser&quot;))) { // transient secondId was not serialized, so after de-serialization, the secondId attribute of the person object doesn&#39;t have an actual value, and so will default to a value of 0 // Does not run constructor, since the fields of the object have already been previously defined, and are simply being de-serialized to be accessed // Default constructor nor Normal Constructor are printed, since no constructor&#39;s are actually invoked, as the program is restoring the object state from the serialized data Person person = (Person) is.readObject(); // static variable count is not serialized, and so Java will give it the current static value set by the class System.out.println(person); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } } } WriteObjects.main(null); ReadObjects.main(null); . Writing objects... Normal constructor Person [id=7, name=Mark, secondId=10, count=88] Reading objects... Person [id=7, name=Mark, secondId=0, count=88] . 48. Passing by Value . Notes: . Java follows the system of passing by value, which often occurs in passing arguments to methods or constructors. | Passing by value for primitive data types means that whenever a value or variable value is passed as an argument to a method or constructor, the program creates a copy of that value for the parameter variable to store into new memory, instead of an actual reference to the primitive variable. This means that changes made to the parameter variable do not affect and are not connected to the argument variable. This also implies that the name of the argument variable doesn&#39;t really matter, as once it is passed to the method/constructor, its value will be copied to the parameter variable, and the program will perform operations on the parameter instead of the actual argument. | The normal scope of a variable is limited to the closest enclosing block, or curly parentheses, meaning it cannot be accessed outside of the block, but can be accessed and changed anywhere within the block (even within inner code blocks). This sort of explains the phenomenon of passing by value, since the argument value and parameter value are not even in the same code block. | Just a reminder that the Java compiler normally executes code in a sequence from the top to bottom of the program. Statements such as loops can loop the reading of the code back to a certain point of the program after certain code has been read, and will continue doing so until a halting condition has been met. | In Java, method overloading is where we create multiple methods of one class with the same name but with different parameters (can be different number of parameters or different data types of parameters). We can have 2 methods with the same name and parameters if they are from separate classes, since they are called/referenced by different objects (or classes if the methods are static) anyway. | When declaring primitive data in Java, the program allocates enough memory to store any value fits that data type (e.g. enough memory for maximum value of int). But when declaring non-primitive data, or objects, in Java, the program allocates memory for an address/reference to the actual memory of the object data. | Passing by value for non-primitive types is similar to that of passing by value for primitive types, but instead of the program creating a copy of the value itself, it creates a copy of the reference to the object passed. Because the parameter object variable refers to the same object as the argument object variable, changes made to the parameter object variable via the object&#39;s defined methods (or dot notation) will actually affect the argument object variable. This means that whenever the object is modified ANYWHERE in the program (usually by the object references that address it), the memory storing its data is actually modified. | However, if the parameter object reference is assigned to a new object, the parameter variable will now refer to a different area of memory, since the new keyword creates heap memory for a new object. This means that any subsequent changes to the object referenced by the parameter variable do not affect the object referenced by the argument variable, since the parameter and argument now refer to different objects. | Just to review, in Java, you cannot define a variable (meaning declaring variable type and name) more than once within the same code block, meaning every variable in a code block must have a unique variable name. | . Examples: . class Person { private String name; public Person(String name) { this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return &quot;Person[name=&quot; + name + &quot;]&quot;; } } public class Application { public void show(int value) { // show() method creates a copy of the value passed into it for its parameter // So, the value parameter variable here is in a separate part of memory from the value variable passed as an argument // This value variable only exists within the show() method // Changes to value variable in this method do not affect the value variable in main() method System.out.println(&quot;Parameter value is initially: &quot; + value); value++; System.out.println(&quot;Parameter value is now: &quot; + value); } // Method overloading, where we create another show() method but with different parameters public void show(Person person) { System.out.println(&quot;Parameter object is initially: &quot;+ person.toString()); // Change the name attribute of the object currently referenced by both the parameter and the argument person.setName(&quot;John&quot;); // Set person object variable to a new object of Person with a different name attribute value // The parameter and argument now refer to different objects person = new Person(&quot;Mike&quot;); // The person object variable now does not affect the person object variable in the main() method, as the parameter person refers to a new object now person.setName(&quot;Tom&quot;); System.out.println(&quot;Parameter object is now: &quot; + person.toString()); } public void show(String text) { System.out.println(&quot;Parameter String is initially: &quot; + text); // Changes like concatenation to a String variable will cause it to reference a new String object with new memory allocated toward it text += &quot;!&quot;; System.out.println(&quot;Parameter String is now: &quot; + text); } public void show(int[] nums) { System.out.print(&quot;Parameter array of integers before passing by value is: &quot;); for (int num : nums) { System.out.print(num + &quot; &quot;); } System.out.println(); // Use method of arrays to modify the object (array) referenced by both the parameter and the argument nums[2] = 7; // Make parameter variable reference new array object with different values // Parameter variable now refers to different array than argument variable // Have to define size first with new keyword, then set values, since nums originally already refers an array with defined values, which means it needs to first be assigned to a new object nums = new int[2]; nums[0] = 1; nums[1] = 3; System.out.print(&quot;Parameter array of integers after passing by value is: &quot;); for (int num : nums) { System.out.print(num + &quot; &quot;); } System.out.println(); } public void show(String[] words) { System.out.print(&quot;Parameter array of Strings before passing by value is: &quot;); for (String word : words) { System.out.print(word + &quot; &quot;); } System.out.println(); // Modify array referenced by both parameter and argument words[2] = &quot;Hey there&quot;; // The program will create new memory for the changed String, but the array itself will modify its own memory to store the new modified String words[2] += &quot;!&quot;; System.out.print(&quot;Parameter array of Strings after passing by value is: &quot;); for (String word : words) { System.out.print(word + &quot; &quot;); } System.out.println(); } public static void main(String[] args) { // Make object name similar to class name as it is a common naming convention Application app = new Application(); // This value variable only exists within the main() method int value = 7; // Passing by value for primitive types System.out.println(&quot;Original argument value before passing by value is: &quot; + value); app.show(value); System.out.println(&quot;Original argument value after passing by value is: &quot; + value); // Passing by value for non-primitive types (objects) // Print new empty line System.out.println(); Person person = new Person(&quot;Bob&quot;); System.out.println(&quot;Argument object before passing by value is: &quot; + person.toString()); // Java knows which version of the show() method to invoke by reading the types of arguments passed into it and matching them with the appropriate parameters app.show(person); // Changes to the parameter object reference will affect the argument object reference if they continue to refer to the same object // If the parameter object reference is set to address a new object, it will no longer affect the object referred by the argument object reference System.out.println(&quot;Argument object after passing by value is: &quot; + person.toString()); System.out.println(); // More non-primitive type passing by value examples // Passing by value for String String text = &quot;Hey there&quot;; System.out.println(&quot;Argument String before passing by value is: &quot; + text); app.show(text); System.out.println(&quot;Argument String after passing by value is: &quot; + text); System.out.println(); // Passing by value for array of primitive type // Can declare and define values for array on one line, since nums has not been assigned to an object yet, and since we are defining the variable type to be array of integers (int[]), we are showing the program that nums is a new variable being instantiated int[] nums = {1, 2, 3}; System.out.print(&quot;Argument array of integers before passing by value is: &quot;); for (int num : nums) { System.out.print(num + &quot; &quot;); } System.out.println(); app.show(nums); System.out.print(&quot;Argument array of integers after passing by value is: &quot;); for (int num : nums) { System.out.print(num + &quot; &quot;); } System.out.println(); System.out.println(); // Passing by value for array of non-primitive type String[] words = {&quot;Hi&quot;, &quot;Hello&quot;, &quot;Hey&quot;}; System.out.print(&quot;Argument array of Strings before passing by value is: &quot;); // Variables defined within parameters, including those of statements such as loops, are scoped to the code block following the declaration statement // This means that the parameters of loops are scoped to the code block of loops for (String word : words) { System.out.print(word + &quot; &quot;); } System.out.println(); app.show(words); System.out.print(&quot;Argument array of Strings after passing by value is: &quot;); for (String word : words) { System.out.print(word + &quot; &quot;); } System.out.println(); } } Application.main(null); . Original argument value before passing by value is: 7 Parameter value is initially: 7 Parameter value is now: 8 Original argument value after passing by value is: 7 Argument object before passing by value is: Person[name=Bob] Parameter object is initially: Person[name=Bob] Parameter object is now: Person[name=Tom] Argument object after passing by value is: Person[name=John] Argument String before passing by value is: Hey there Parameter String is initially: Hey there Parameter String is now: Hey there! Argument String after passing by value is: Hey there Argument array of integers before passing by value is: 1 2 3 Parameter array of integers before passing by value is: 1 2 3 Parameter array of integers after passing by value is: 1 3 Argument array of integers after passing by value is: 1 2 7 Argument array of Strings before passing by value is: Hi Hello Hey Parameter array of Strings before passing by value is: Hi Hello Hey Parameter array of Strings after passing by value is: Hi Hello Hey there! Argument array of Strings after passing by value is: Hi Hello Hey there! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/06/13/Java-Fundamentals-Part-2.html",
            "relUrl": "/jupyter/2023/06/13/Java-Fundamentals-Part-2.html",
            "date": " • Jun 13, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Java Fundamentals - Notes Part 1",
            "content": "1. A Hello World Program . Notes: . The System.out.println() method is a default Java method that prints whatever is specified in its parameter on a new line. | If you want to print a String, wrap it within double quotes inside the println parameter. Note single quotes are for characters, not Strings. | . Examples: . public class Application { public static void main(String[] args) { System.out.println(&quot;Hello, World!&quot;); } } Application.main(null); . Hello, World! . 2. Using Variables . Notes: . Variables are essentially containers that can store values. | Different variable types are like containers that store different types of values. | You can declare and initialize variables on the same line of code (e.g. int myNumber = 7;). | There are 8 primitive data types in Java: byte (8-bit integer), short (16-bit integer), int (32-bit integer), long (64-bit integer), float (32-bit single-precision floating point, can contain decimals), double (64-bit double-precision floating point, can contain decimals), boolean (can only contain two possible values: true or false), and char (16-bit Unicode character). | . Examples: . public class Application { public static void main(String[] args) { // Declare variable int myNumber; // Initialize variable value myNumber = 7; // Output variable value System.out.println(myNumber); // Different variable types int myNumber2 = 8; short myShort = 777; long myLong = 9797; double myDouble = 3.1415; // Include the f at the end of the value float myFloat = 324.3f; char myChar = &#39;A&#39;; boolean myBoolean = true; byte myByte = 127; /* You can&#39;t define a variable twice. Once a variable has been defined, you can access and change it by its variable name int a = 7; int a = 8; */ System.out.println(myNumber2); System.out.println(myShort); System.out.println(myLong); System.out.println(myDouble); System.out.println(myFloat); System.out.println(myChar); System.out.println(myBoolean); System.out.println(myByte); } } Application.main(null); . 7 8 777 9797 3.1415 324.3 A true 127 . 3. Strings: Working with Text . Notes: . String is a class, or a type of object. More specifically, it is a non-primitive data type in Java. | Concatenation is the action of combining multiple Strings together to form a new String, which is done by appending the next String to the end of the previous String. | The System.out.println() function can be used to print out other variable types (e.g. int). | . Examples: . public class Application { public static void main(String[] args) { int myInt = 7; // String is the class, and &quot;Hello&quot; is an instance of the String object. String text = &quot;Hello&quot;; String blank = &quot; &quot;; String name = &quot;Bob&quot;; //Concatenation of Strings String greeting = text + blank + name; double myDouble = 7.1; System.out.println(greeting); System.out.println(&quot;Hello&quot; + &quot; &quot; + &quot;Bob&quot;); // Printing out different variable types. Notice that the values of myInt and myDouble are printed as is. System.out.println(&quot;My integer is: &quot; + myInt); System.out.println(&quot;My number is: &quot; + myDouble); } } Application.main(null); . Hello Bob Hello Bob My integer is: 7 My number is: 7.1 . 4. While Loops . Notes: . Note that there is a difference between parameters and arguments. The key distinction is that parameters are the variables written inside the functions definition, while arguments are the actual variable values passed to functions to run them. | The argument written in a while loop is the condition it needs to satisfy in order to keep looping. | However, certain variables, primarily the ones contained within the condition, need to be changed during iterations for the sake of preventing an infinite loop (at some point, the condition needs to be false, so the loop stops). | . Examples: . public class Application { public static void main(String[] args) { int value = 0; // The boolean data type determine whether its value is true or false boolean loop = value &lt; 20; System.out.println(loop); // The while loop is followed with curly brackets instead of a semi-colon. This is for the sake of creating a block of code. while (value &lt; 10) { System.out.println(&quot;Number &quot; + value); // Increment by 1 value = value + 1; } } } Application.main(null); . true Number 0 Number 1 Number 2 Number 3 Number 4 Number 5 Number 6 Number 7 Number 8 Number 9 . 5. For Loops . Notes: . Like the while loop, the for loop is followed by curly brackets. Within the brackets defines the code block that will be executed in each iteration of the loop. | The for loop contains 3 sections (inside the parenthesis following the for keyword). The 1st section defines what code is executed/initialized at the very beginning of the for loop. The 2nd section defines the condition, as long as the condition is true, the loop will keep iterating. The condition is checked at the start of each iteration. The 3rd section defines the code that is executed once after every iteration. The sections are separated by semi-colons, and not all sections need to have code within them. | The System.out.printf is a format specifier that takes multiple arguments. In our example, the first argument is a String, and the second argument is a value to fill in as the format specifier. Unlike println, it does not print values on a new line. | . Examples: . public class Application { public static void main(String[] args) { // i++ means increment i by 1. It is the same as i = i + 1. // After 5 iterations, the for loop will stop. // Iteration visualization: i = 0, i = 1, i = 2, i = 3, i = 4 (loop stops here, since in the next iteration, i equals 5, which is not less than 5). for (int i = 0; i &lt; 5; i++) { // Print out the string, but replace %d (int format specifier) with the value of i. // n indicates new line of the specified value is printed. System.out.printf(&quot;The value of i is: %d n&quot;, i); } } } Application.main(null); . 0 1 2 3 4 . 6. If Statements . Notes: . When comparing primitive type values, use == and != to compare values. = is for assignment of values to variables. | To create an if statement, write the keyword if, then follow it up with circle brackets. Within the brackets lies the condition that must be true in order for the block of code following the if statement (typically within curly brackets) to run. | The else statement directly follows a complete if statement (after the code block of the if statement) or complete else if statement; it is the last conditional statement in a line of conditionals (when there is an if statement followed by one or more else if statements, all connected with each other in terms of the conditional process) and defines the code that will run if the condition in all the previous conditional statements are false. | An else if statement directly follows a complete if statement or another else if statement, and contains a new condition. If this new condition is met, the code within the else if code block will run. An else if statement will only run if the previous statements (if and else if) are false. | A general rule of thumb is that if you have a conditional line with if, else if, and else statements, only one of those conditional statements should run. But if you have multiple if statements following one another, there is a possibility that more than one of them will run, since there can be more than one condition that is met. | The break keyword &quot;breaks&quot; a loop, or stops a loop from continue executing. In other words, the program jumps out of the loop and continues from it. | . Examples: . public class Application { public static void main(String[] args) { // == indicates that the 2 values are equal to each other, while != indicates that the 2 values are not equal to each other. boolean cond = 5 != 2; System.out.println(cond); int myInt = 5; // The statement &quot;Yes, it&#39;s true!&quot;&quot; will print because the value of myInt, 5, is in fact less than 30. if (myInt &lt; 30) { System.out.println(&quot;Yes, it&#39;s true!&quot;); } int num = 15; if (num &lt; 10) { System.out.println(&quot;True&quot;); } else if (num &gt; 20) { System.out.println(&quot;False&quot;); } else { System.out.println(&quot;None of the above&quot;); } int loop = 0; // This while loop will become an infinite loop without the break statement, since the value true is always true. while (true) { System.out.println(&quot;Looping: &quot; + loop); if (loop == 5) { // Stop loop execution once loop has a value of 5 break; } // Increment loop by 1 in each iteration loop++; System.out.println(&quot;Running&quot;); } } } Application.main(null); . true Yes, it&#39;s true! None of the above Looping: 0 Running Looping: 1 Running Looping: 2 Running Looping: 3 Running Looping: 4 Running Looping: 5 . 7. Getting User Input . Notes: . To get user input in Java, the Scanner library in Java can be used. To import java libraries, use the import keyword followed by the reference to the library. | To import the Scanner class, type import java.util.Scanner, since the Scanner library is a part of the java.util package. | The Scanner library creates a prompt on which users can type on. The new keyword creates a new object of a referenced class. System.in is an argument passed to the Scanner constructor, and is an input stream object. | nextLine(), nextInt(), and nextDouble() are all example methods of the Scanner class that store user inputs into variables of specific data types. | . Examples: . import java.util.Scanner; public class Application { public static void main(String[] args) { // Create Scanner object variable called &quot;input&quot; of class type Scanner Scanner input = new Scanner(System.in); // Prompt user for input System.out.println(&quot;Enter a line of text: &quot;); // nextLine() is a method of the Scanner class, that stores whatever the user types into a variable of type String String line = input.nextLine(); System.out.println(&quot;Enter an integer: &quot;); // nextInt() is another method of the Scanner class that stores user input into variable of type integer. // The program will crash, however, in the case that the user does not input a valid integer. An exception will be thrown. // The program, therefore, currently isn&#39;t very robust. The Scanner does a method that solves this problem. int myInt = input.nextInt(); // Usage of nextDouble() to store double type values that users input System.out.println(&quot;Enter a double: &quot;); double value = input.nextDouble(); // Concatenation of user input values System.out.println(&quot;You wrote: &quot; + line + &quot;-&quot; + myInt + &quot;-&quot; + value); } } Application.main(null); . Enter a line of text: Enter an integer: Enter a double: You wrote: Hey-7-7.7 . 8. Do While . Notes: . In Java, for variables in the same scope of code, each variable has to have a unique name (case-sensitive). | To multi-line comment in Java, type / /, and anything between that container will pass as a comment. | In a do while loop, the statement within the do code block will always execute at least once, since the condition within the while keyword comes after the do keyword. After one execution, the condition in the while loop will be checked. If the condition is still true, then the code block will run again, and the condition will be checked again, and repeat. | A variable only exists within the inner-most brackets in which it is declared. It does however, exist within brackets that appear within the inner-most brackets that it itself is contained in (kinda like lower scopes or child brackets). For example, variables within global scope typically exist within the scopes created by functions inside the global scope. | . Examples: . public class Application { public static void main(String[] args) { Scanner input = new Scanner(System.in); /*System.out.println(&quot;Enter a number: &quot;); int value = input.nextInt(); while (value != 5) { System.out.println(&quot;Enter a number: &quot;); // No need to declare the variable value, since it has already been defined by type int. Here, its value is updated. value = input.nextInt(); }*/ // Variable scope accounted for, so that the variable value exists within the do while statement int value = 0; // do statement is always executed at least once. After one execution the while condition is checked. do { System.out.println(&quot;Enter a number: &quot;); value = input.nextInt(); System.out.println(value); } while(value != 5); System.out.println(&quot;Got 5!&quot;); } } Application.main(null); . Enter a number: 7 Enter a number: 8 Enter a number: 5 Got 5! . 9. Switch . Notes: . The switch statement allows you to define a variety of actions that can be taken depending on a particular value. | The argument passed to a switch statement is typically a variable name. Within the switch, case keywords are used to define different possible values of that variable, as well as the actions that will be taken if the variable happens to have their respective value. The break keyword should be used at the end of each case to prevent more than one case action being run (if you only want one case to be run). You can have multiple cases for each switch statement. | The default keyword is used within a switch statement, acting sort of like a case itself and defining the code that will be run if none of the cases are met. | The values defined by cases need to constant. In other words, they are usually constant values of the variable passed to the switch statement. | . Examples: . public class Application { public static void main(String[] args) { Scanner input = new Scanner(System.in); // The most common variable types that are checked by a switch statement are String and int. System.out.println(&quot;Please enter a command: &quot;); String text = input.nextLine(); System.out.println(text); switch (text) { // Indent code block under each case for proper syntax. case &quot;start&quot;: System.out.println(&quot;Machine started!&quot;); break; case &quot;stop&quot;: System.out.println(&quot;Machine stopped!&quot;); break; default: System.out.println(&quot;Command not recognized&quot;); } } } Application.main(null); . Please enter a command: start Machine started! . 10. Arrays . Notes: . The key distinction between value types (e.g. int) and reference types (e.g. arrays) is that memory is created to hold value types, while reference types refer to a list of value types. So, think of a value type as a bucket that stores something, and a reference type as sort of a label that refers to value types. | The values within an array allocate memory to value types. | In Java, arrays and many other data structures followed 0-based indexing, where the 1st element is located at the 0th index, 2nd is located at the 1st index, and so on. | . Examples: . public class Application { public static void main(String[] args) { // int value type int value = 7; // Declare array that stores values of type int. int[] values; // Initialize array values to have a size of 3 int values. The new keyword allocates a specified amount of memory. values = new int[3]; // Access the element at the 0th index of the array. Java sets the default value for arrays to 0. System.out.println(values[0]); // Change the element at index 0 to 10. values[0] = 10; values[1] = 20; values[2] = 30; System.out.println(values[0]); System.out.println(values[1]); System.out.println(values[2]); // Iterating through the array, making sure to access the elements at all indexes in the array. // The length method returns the size of the array. for (int i = 0; i &lt; values.length; i++) { System.out.println(values[i]); } // Initializing an array in one line. Allocating memory and setting data values at the same time. int[] numbers = {5, 6, 7}; for (int i = 0; i &lt; numbers.length; i++) { System.out.println(numbers[i]); } } } Application.main(null); . 0 10 20 30 10 20 30 5 6 7 . 11. Arrays of Strings . Notes: . Enhanced for loops are an alternative way (alternate to the conventional for loop) of iterating through an array. In an enhanced for loop, the counter is always incremented by one, which means the loop executes in sequence. Nonetheless, it still simplifies the process of array iteration. An enhanced for loop essentially retrieves an element of the list during each iteration. | The core difference between instantiation and initialization is that instantiation involves creating an object of a particular class using the new keywords, while initialization involves assigned a value to a particular variable. | For primitive data types, the variable stores enough memory to hold any valid (within integer size constraints) integer value. Integer is a primitive type, as indicated by the lowercase declaration of int. | String is a non-primitive data type, as indicated by the capitalization in the declaration of String. Non-primitive data types allocate enough memory for a reference (the program does not initially know how long the string will be based on the declaration), or address, to some values. | To recap, reference variable types store references to the actual data, while value type variable directly store the actual data. When working with reference types, it is possible for two variables to reference the same data (objects), which means that changes to one variable can impact the object referenced by the other variable. | The main difference between primitive types and non-primitive data types is that primitive types are predefined (enough memory for data is allocated during declaration), while non-primitive types are not predefined, as their values are specified by the programmer. | . Examples: . public class Application { public static void main(String[] args) { // Declare an array that stores String value types, and has a size of 3. String[] words = new String[3]; words[0] = &quot;Hello&quot;; words[1] = &quot;to&quot;; words[2] = &quot;you&quot;; System.out.println(words[2]); // Initialize and instantiate array with values in one line // Each String value type is wrapped within double quotation marks. String[] fruits = {&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;kiwi&quot;}; // Enhanced for loop - The : symbol indicates &quot;in&quot;. For every &quot;fruit&quot; or value in the array &quot;fruits&quot;, print it to the console. for(String fruit : fruits) { System.out.println(fruit); } // Non-primitive type int int value = 123; // Non-primitive type String. The null value means the variable points to &quot;nothing&quot; String text = null; System.out.println(text); // An array further references String data type references to actual values. The array is allocating enough memory for 2 references to String values. String[] texts = new String[2]; // Java sets the default values for Strings in an array to 0. System.out.println(texts[0]); // Change the value of the element at the 0th index to &quot;one&quot;, causing the array to allocate memory to a String reference to an actual String value (memory). texts[0] = &quot;one&quot;; } } Application.main(null); . you apple banana pear kiwi null null . 12. Multi-Dimensional Arrays . Notes: . Multi-dimensional arrays are essentially arrays of arrays. For example, in a 2D array, each element is an array by itself, which means that each element in the 2D array contains more elements within themselves. | Each element in an multi-dimensional array is a reference to an array, and not every array in the multi-dimensional array needs to be the same length. | When accessing a value type in a multi-dimensional array, you need to specify multiple indices. In a 2D array, you specify the row index first, then the column index. Remember that arrays use zero-based indexing. So, the row index indicates which array within the 2D array you are accessing, and the column index indicates which value within that 1D array you are accessing. | . Examples: . public class Application { public static void main(String[] args) { // 1D array, since to specify the position of an element, only one index or dimension is needed. int[] values = {1, 2, 3}; System.out.println(values[2]); // Syntax for 2D array int[][] grid = { {1, 2, 3}, {4, 5}, {6, 7, 8, 9} }; System.out.println(grid[1][1]); System.out.println(grid[0][2]); // Declare a 2D array of references to Strings, specifying its size (square or rectangular shaped) String[][] texts = new String[2][3]; // Change value of element at row index 0 and column index 1 texts[0][1] = &quot;Hello there&quot;; System.out.println(texts[0][1]); // Iterating through 2D array. Iterate through each row, and in each row, iterate through each column for (int row = 0; row &lt; grid.length; row++) { for (int col = 0; col &lt; grid[row].length; col++) { // t indicates tab character System.out.print(grid[row][col] + &quot; t&quot;); } // Create a new line for every new row System.out.println(); } // Do not specify column size of the 2D array, which allows you to create row arrays of different sizes (different number of columns) String[][] words = new String[2][]; System.out.println(words[0]); // Establish the size of the array in the first row of the 2D array words[0] = new String[3]; words[0][1] = &quot;hey there&quot;; System.out.println(words[0][1]); System.out.println(words[1]); } } Application.main(null); . 3 5 3 Hello there 1 2 3 4 5 6 7 8 9 null hey there null . 13. Classes and Objects . Notes: . If a class is declared public, the class name must be the same as the file name. You can usually only have one public class in a file, but you can have multiple non-public classes in a file. | A class is essentially a template or blueprint for creating objects. Almost everything in Java is basically an object. A class can be viewed as a type. Objects are instances of classes, or in other words copies of particular classes. This mean that an object has the attributes and methods defined in its class type. An object typically has 3 primary characteristics: identity, state (attributes), and behavior (methods). | Classes can contain data/attributes, or states. Classes can contain subroutines, or methods/functions, such as the main method, which automatically executes the code within it. | The dot syntax: objectName.propertyName can be used to directly access an attribute or method of an object of a class (if encapsulation is not used but more on that later). | . Examples: . // Class public class Application { // main method with proper syntax to run program public static void main(String[] args) { // Initialize an object of class type &quot;Person&quot;, with the variable name &quot;person1&quot; Person person1 = new Person(); // Instantiate values for the data stored within the person1 object. // The dot syntax specifies the property of a particular object. person1.name = &quot;Joe Mama&quot;; person1.age = 19; // Create new object of class type Person Person person2 = new Person(); person2.name = &quot;someone else&quot;; person2.age = 21; // Access the data stored within the person1 object. System.out.println(person1.name); System.out.println(person1.age); System.out.println(person2.name); System.out.println(person2.age); } } // Create new class &quot;Person&quot; class Person { // Data // Instance variables represent data or states. // Declare variables which do not have values yet. String name; int age; // Subroutines (methods) } Application.main(null); . Joe Mama 19 someone else 21 . 14. Methods . Notes: . A subroutine that is a part of a class is called a method. A method can be viewed as a behavior of a class, which performs a specific task(s). The code block (within the curly brackets of the method) following the method name is what the method runs when called upon. In order for a method to actually run, it needs to be called. | Method names should follow camel case naming convention, where the first letter of the first word is lowercase, but the first letters of the words after the first word are uppercase. | Methods have access to instance variables within the same class. Method names are followed by parenthesis (), while data/attribute names are not. | . Examples: . class Person { String name; int age; // Subroutines // Creating a method called &quot;speak()&quot; // The speak() method concatenates the data of the class into a String. void speak() { // Repeat 3 times. for (int i = 0; i &lt; 3; i++) { System.out.println(&quot;My name is: &quot; + name + &quot; and I am &quot; + age + &quot; years old&quot;); } } void sayHello() { System.out.println(&quot;Hey there!&quot;); } } public class Application { public static void main(String[] args) { Person person1 = new Person(); person1.name = &quot;Joe Mama&quot;; person1.age = 17; // Call the speak() method person1.speak(); person1.sayHello(); // person1 and person2 have different outputs for speak(), because they have different data. Person person2 = new Person(); person2.name = &quot;somebody&quot;; person2.age = 20; person2.speak(); person2.sayHello(); } } Application.main(null); . My name is: Joe Mama and I am 17 years old My name is: Joe Mama and I am 17 years old My name is: Joe Mama and I am 17 years old Hey there! My name is: somebody and I am 20 years old My name is: somebody and I am 20 years old My name is: somebody and I am 20 years old Hey there! . 15. Getters and Return Values . Notes: . Getter methods are typically used to retrieve/return data from a object of a particular class, or calculate and return a value based on the properties of the object. | The void keyword in a Java method indicates that the method does not return a value. void is a method return type, and there are various kinds of return types in Java. The return type indicates the type of data a method returns when called upon, and is written before the method name. | The return keyword within a method block, upon run upon, causes the method to stop running. It then causes the method to &quot;return&quot; or store the specified value next to the return keyword. The method, when called upon, returns or represents that specific value. | The return value should be able to have the same data type as that specified next to the method name. Every method should always end up returning a value that matches the specified return type. | Encapsulation involves &quot;hiding&quot; data from a certain class from other classes. Encapsulation of a certain class prevents other classes from directly accessing its data. It is important to note that instance variables encapsulated within a particular class can be directly accessed within that class, but can only be retrieved by separate classes using getter methods. | Getter methods, which are typically public, are usually used to &quot;get&quot; data from a separate class whose data has been encapsulated. In these cases, the data from the separate class can not be directly accessed using the object.property notation, so getter methods need to be used (e.g. object.getProperty()). | The naming convention of a getter method usually involves putting the lowercase keyword &quot;get&quot; in front of the data name, then capitalizing the first letter of all of the words of the data name. | . Examples: . class Person { // Instance data String name; int age; // The speak() method has void, so it does not return anything. In this case, this method is used to output a message. void speak() { System.out.println(&quot;My name is: &quot; + name); } // The calculateYearsToRetirement() method returns an int value int calculateYearsToRetirement() { int yearsLeft = 65 - age; return yearsLeft; } // The getter method &quot;getAge()&quot; returns the age (type int) attribute of the object of this particular class type on which it is called upon. int getAge() { return age; } // The getter method &quot;getName()&quot; returns the name (type String) attribute. String getName() { return name; } } public class Application { public static void main(String[] args) { Person person1 = new Person(); // Set the values of the attributes of the person1 object. // Here, encapsulation is not used, as this separate class is able to directly access the data within the Person class. person1.name = &quot;Dylan&quot;; person1.age = 21; person1.speak(); // Set the variable &quot;years&quot; to the return value of the method &quot;calculateYearsToRetirement&quot;. int years = person1.calculateYearsToRetirement(); System.out.println(&quot;Years until retirement: &quot; + years); int age = person1.getAge(); String name = person1.getName(); System.out.println(&quot;Name is: &quot; + name); System.out.println(&quot;Age is: &quot; + age); } } Application.main(null); . My name is: Dylan Years until retirement: 44 Name is: Dylan Age is: 21 . 16. Method Parameters . Notes: . Values can be passed into methods. The parenthesis after the method definition hold the parameters of the method, which specify the kind of values that the method can accept into its code block and use. Parameter variables are only available to the scope of code within the method, though their values can be used to change the values of variables in a wider scope. | Method arguments are that actual values passed to the method when it is called, and are used while the method is running. Once an argument value is passed, the parameter variable defined will then store that argument, and can be used within the method. | Multiple method parameters (and arguments) should be separated by commas, and when the arguments are passed to the method, the arguments should correctly correspond (same variable type to respective parameter) to their respective parameters, in terms of position (order in which parameters and arguments are defined). | When you pass a variable as a method argument, its value will be assigned to the parameter variable defined in the method, not its original argument variable name. | Non-primitive variable and primitive variables pass slightly differently. For non-primitive variables like Strings (reference to memory), the method changes the reference label of the argument value passed by giving that same value a different reference label (i.e. variable name). For primitive variables like integers (memory that contains data), the method allocates memory for the parameter variable to hold the value transferred from the argument variable. | . Examples: . class Robot { // Create a public method called &quot;speak()&quot; // &quot;text&quot; variable is a parameter of the speak() method public void speak(String text) { System.out.println(text); } // Create public method that takes of parameter of type int public void jump(int height) { System.out.println(&quot;Jumping: &quot; + height); } // Create a public method that takes multiple parameters of different data types public void move(String direction, double distance) { System.out.println(&quot;Moving &quot; + distance + &quot; meters in direction &quot; + direction); } } public class Application { public static void main(String[] args) { Robot sam = new Robot(); // Pass an argument to the method speak() sam.speak(&quot;Hey, I&#39;m sam&quot;); // Pass an argument to the method jump() sam.jump(7); // Pass 2 arguments of different variable types to the method move() sam.move(&quot;West&quot;, 12.2); // Pass the value of the String (reference) variable &quot;greeting&quot; to the speak() method String greeting = &quot;Hello there&quot;; sam.speak(greeting); // Pass the value of the int (actual memory) variable &quot;value&quot; to the jump() method int value = 15; sam.jump(value); } } Application.main(null); . Hey, I&#39;m sam Jumping: 7 Moving 12.2 meters in direction West Hello there Jumping: 15 . 17. Setters and &quot;this&quot; Keyword . Notes: . Setters, also known as mutators, are methods used to update the value of a specific variable typically found within a class. Getter and setter methods are usually used when instance variables are encapsulated (set to private), which means that the variables of the class cannot be directly accessed. | Setter and getter methods allow you to, from a separate class, retrieve and modify the attributes of another class with out directly accessing the instance variables of that class. Setters and getters are used in conjunction with encapsulation. | In the case of the instance variable having the same name as the parameter variable, since the parameter variable was declared first, it takes precedence and masks the instance variable&#39;s name. | The &quot;this&quot; keyword refers (think of a substitute name sort of) to the current object within which it is declared. It is typically used to access attributes and methods within the same object. | . Examples: . class Frog { private String name; private int age; private String alternateName; // Setter method sets the instance variable name to the value of the variable newName public void setName(String newName) { name = newName; } // Naming convention of a setter method. The setter method should not return anything (void return type), since it performs the action of modifying a variable. public void setAge(int age) { this.age = age; } // In this case, use the &quot;this&quot; keyword, since the instance variable has the same name as the parameter variable. // The &quot;this&quot; keyword refers to the instance variable of the class, while alternateName refers to the parameter variable. public void setAlternateName(String alternateName) { // In the example we have, &quot;this&quot; refers to the Frog object frog1 when run. this.alternateName = alternateName; } // You do not need the &quot;this&quot; keyword here, since there is no variable ambiguity. // We are calling the methods within the same class. public void setInfo(String name, int age) { setName(name); setAge(age); } // Use the public keyword to minimize error from get methods. More on that later. public String getName() { return name; } // You do not need the &quot;this&quot; keyword for getter methods, since there is no variable ambiguity. // There is not parameter variable. public int getAge() { return age; } public String getAlternateName() { return alternateName; } } public class Application { public static void main(String[] args) { Frog frog1 = new Frog(); // Setting the name variable of the Frog object using dot notation. //frog1.name = &quot;Bertie&quot;; //frog1.age = 1; // Setting the name variable of the Frog object using a setter method. frog1.setName(&quot;Dylan&quot;); frog1.setAge(2); frog1.setAlternateName(&quot;Obito&quot;); System.out.println(frog1.getName()); System.out.println(frog1.getAge()); System.out.println(frog1.getAlternateName()); frog1.setInfo(&quot;Chris&quot;, 3); System.out.println(frog1.getName()); System.out.println(frog1.getAge()); } } Application.main(null); . Dylan 2 Obito Chris 3 . 18. Constructors . Notes: . A constructor is a special type of method that is by default run every time an instance (object) of a particular class is created. A constructor does not have a return type, and always has to have the same name as the class. | A constructor is typically used to initialize the instance variables of an object, or perform initial tasks (by passing arguments into constructor parameters) | Like methods, there can be multiple constructors with the same name, as long as the parameters are different each time. Java automatically selects the correct constructor on the creation of an object based on the parameter list. | The default constructor is when no constructor is defined at all, which means that the instantiation of the object takes no parameters and performs no other initial actions. | Multiple constructors are typically ran all at once when you want a particular instance variable/task(s) to always be initialized. | Use the &quot;this&quot; keyword to run a constructor within another constructor. Note that the inner constructor ran should always be at the top of the code block of the outer constructor. | Constructors can only have access modifiers (e.g. public, protected, private, or default). A public constructor means objects of the class can be defined anywhere else. A private constructor means objects of the class can only be defined inside that class. A protected constructor means objects of the class can be defined within the same package or any subclass (can be outside of package). A constructor with default access modifier means objects of the class can be defined within the same package or any subclass (within package). | . Examples: . class Machine { private String name; private int code; // Naming convention of constructor. There should always be a public keyword in front of the constructor name. public Machine() { System.out.println(&quot;First constructor running!&quot;); // Initialize the value of the private instance variable name. name = &quot;Arnie&quot;; } // Different constructor that sits the value of name based on a parameter value public Machine(String name) { // Use &quot;this&quot; to call another constructor within the constructor. // Initialize the values of the private instance variables name and code, by default. // The third constructor will be ran first in the second constructor this(name, 0); System.out.println(&quot;Second constructor running!&quot;); this.name = name; } public Machine(String name, int code) { System.out.println(&quot;Third constructor running!&quot;); this.name = name; this.code = code; } public String getName() { return name; } public int getCode() { return code; } } public class Application { public static void main(String[] args) { // Create an instance/object of the class Machine. The instance is created primarily with the &quot;new&quot; keyword. // Once the object is created, the constructor is ran automatically. Machine machine1 = new Machine(); System.out.println(machine1.getName()); // Run the constructor without storing the new instance within a variable. //new Machine(); // Run second constructor by passing different arguments Machine machine2 = new Machine(&quot;Bertie&quot;); System.out.println(machine2.getName()); System.out.println(machine2.getCode()); // Run third constructor by passing different arguments Machine machine3 = new Machine(&quot;Charlie&quot;, 7); System.out.println(machine3.getName()); System.out.println(machine3.getCode()); } } Application.main(null); . First constructor running! Arnie Third constructor running! Second constructor running! Bertie 0 Third constructor running! Charlie 7 . 19. Static and Final . Notes: . A static variable, sort of like a global variable, belongs to the class instead of an instance/object of the class, meaning that there is only one copy of it. An instance variable (non-static variable), sort of like a local variable, is created for a specific object each time an object is initialized. | There is only one space of memory allocated for a static variable, regardless of the number of objects created. This means that a static variable is shared amongst multiple objects of the same class. So, once the value of a static variable is set, it will stay that way for all subsequent objects of the class, unless changed later on. In regard to accessing static variables, they can be directly accessed within a class, can be accessed using dot notation and the class name as the reference outside of the class, and can be accessed using getter and setter methods (if they are private). | An instance (non-static) method is created each time an instance of a class is created, while a static method belongs to the class itself rather than objects on that class. Static methods can be ran without creating an object of the class it is in, and static methods can directly access static attributes and methods but not instance variables. This means that for a static method to access instance attributes and methods, an object of the class (that the attributes and methods are contained within) needs to be initialized first, then the instance variables can be accessed with the object as a reference. | Instance methods can access both instance and static attributes and methods, since objects of a class are created after static data and methods are initialized. | The Math.class library of Java contains mathematical constants and operations. Constant variables cannot be assigned a new value, hence they are &quot;constant&quot;. Constant variables are conventionally named in all uppercase, with underscores sometimes. | To create a constant variable in Java, use the &quot;final&quot; keyword, since it indicates that the variable can only be assigned a value once (it cannot be reassigned a value). | Static variables and methods can be used to keep track of the objects created of a specific class. This is because static variables and methods maintain the values/actions they have been assigned through accessing the class itself; creating new instances of the class do not reset static variables and methods. | Static variables can be used to assign an instance variable unique ID to each object created of a class, since they can be modified from their current value each time a constructor of the class is called, and can be assigned to instance variables. Instance variables can also be assigned to static variables, since although they are created after static variables, static variables can still be modified within the class. | . Examples: . class Thing { // Create 2 public instance variables that can be directly accessed by another class. // name is an instance variable. public String name; // description is a static variable. public static String description; // Create a public, final, and static integer variable called &quot;LUCKY_NUMBER&quot;. // Final variables need to be assigned a value once they are declared. public final static int LUCKY_NUMBER = 777; // Initialize the static variable to be 0. public static int count = 0; // The variable id should be unique for each object. public int id; // Constructor that runs whenever a instance of Thing is created public Thing() { // Assign the value of the static variable count to the instance variable id. id = count; // Increment count by 1 each time an object of Thing is created. The static variable count belongs to the class itself. count++; } // Non-static method public void showName() { // Access instance and static variables, printing out the object&#39;s id (instance), description (static), and name (instance). System.out.println(&quot;Object ID: &quot; + id + &quot;, &quot; + description + &quot;: &quot; + name); } // Static method public static void showInfo() { // Access static variable within a static method. System.out.println(description); // Won&#39;t work, since static data/methods are created before any objects as well as the instance variables. // System.out.println(name); } } public class Application { public static void main(String[] args) { // Instantiate the static variable &quot;description&quot; of the class Thing // Since description is static, an object of Thing does not have to be created to access it, rather we use the class as a reference to access description // Here, we access description using the dot notation, with the class name used instead of object name Thing.description = &quot;I am a thing&quot;; System.out.println(Thing.description); // Call a static method of the class Thing, referring the class name instead of the object name, since static properties refer to the class itself Thing.showInfo(); System.out.println(&quot;Before creating objects, count is: &quot; + Thing.count); Thing thing1 = new Thing(); Thing thing2 = new Thing(); thing1.name = &quot;Bob&quot;; thing2.name = &quot;Sue&quot;; // Call non-static methods of objects of the class Thing. thing1.showName(); thing2.showName(); // Static variable count changes each time an object is created. System.out.println(&quot;After creating objects, count is: &quot; + Thing.count); // Access the constant PI variable of the Math class/library. System.out.println(Math.PI); // Access the constant/final LUCKY_NUMBER variable of the Thing class. System.out.println(Thing.LUCKY_NUMBER); } } Application.main(null); . I am a thing I am a thing Before creating objects, count is: 0 Object ID: 0, I am a thing: Bob Object ID: 1, I am a thing: Sue After creating objects, count is: 2 3.141592653589793 777 . 20. String Builder and String Formatting . Notes: . In Java, Strings are technically immutable, meaning that once they are created, they cannot be changed. When you initialize the value for a String variable, that value will remain in the program for the rest of its life. Each time you perform actions/modifications to a String variable, it is actually being reassigned to a new specified value (after the modifications), and the previous values stay in the program&#39;s memory. | In Java, the StringBuilder class allows you to essentially create a String variable/object that is mutable, which means that whenever modifications are made to it, its value is actually changed within the program; it is not creating a new value every time, but is instead modifying the current content. | In short, the StringBuilder is a more memory-efficient alternative to the classic String in terms of appending/concatenating text. | Method chaining involves calling multiple methods at once on a variable. Each method in the chain returns the current state of the object. For example, the append() method of the StringBuilder class returns a reference to the StringBuilder object each time it is called. | StringBuffer is a thread-safe alternative to StringBuilder. A StringBuffer is safe to access through multiple different threads. StringBuilder is more &quot;lightweight&quot; because it is not as thread-safe as StringBuffer. | In Java you can implement different types of String formatting using the backslash syntax. For example, t creates a new String tab, and n creates a new String line. | The println() syntax: the &quot;print&quot; part means the program will print the specified text within the println method. The &quot;ln&quot; part means the program will print a new line after the text. | The printf() method allows you to print formatting Strings. printf does not print a new line at the end. For each formatting String, the printf will look at the arguments and replace each formatting String (with specified type) with the appropriate corresponding (desired arguments should be placed in same order as formatting Strings) argument value. | . Examples: . public class Application { public static void main(String[] args) { // Concatenate Strings to the String variable info. // Each concatenation involves assigning info to the new combined String value. String info = &quot;&quot;; info += &quot;My name is Bob.&quot;; info += &quot; &quot;; info += &quot;I am a builder.&quot;; System.out.println(info); // Initialize StringBuilder Object sb with an initial value of an empty String. StringBuilder sb = new StringBuilder(&quot;&quot;); // Concatenate Strings to the sb object using the append() method. sb&#39;s current value is modified each time. sb.append(&quot;My name is Sue.&quot;); sb.append(&quot; &quot;); sb.append(&quot;I am a lion tamer.&quot;); // Print out the String value of the sb StringBuilder object using the toString() method. System.out.println(sb.toString()); // Initialize StringBuilder object s with no initial value. StringBuilder s = new StringBuilder(); // Using method chaining to append multiple different Strings at a time to the StringBuilder object s. // Put semi-colon after last method (or last part of code) is called. s.append(&quot;My name is Roger.&quot;).append(&quot; &quot;).append(&quot;I am a skydiver.&quot;); System.out.println(s.toString()); // Multi-slash comment lol ///////// Formatting /////// // String formatting using the backslash format. System.out.print(&quot;Here is some text. tThat was a tab. nThat was a new line.&quot;); // This text will be printed on the same line as the previous text. System.out.println(&quot;More text.&quot;); /// Formatting integers // %d represents integer value. // The number of format Strings should be the same as the number of arguments. // %10d indicates that the format String will be outputted in a field that is 10 characters wide (right-aligned). %-10d indicates that it will be left-aligned in the 10-character wide field. System.out.printf(&quot;Total cost %-10d: quantity is %10d n&quot;, 5, 120); for (int i = 0; i &lt; 20; i++) { // All of the printed text will line up since the format character is always right-aligned. // The String format syntax involves 2 main components: the % which indicates a format String, and the character at the end which indicates the type of String formatting. // The flags in between the % and end character specify various properties of the format String, such as the width of output space (specified by number). // %s indicates a format String of type String. System.out.printf(&quot;%2d: %s n&quot;, i, &quot;Here is some text&quot;); } /// Formatting floating point values // The .2 within the floating point String formatting specifies that the floating point String should only contain up to 2 decimal places. // The floating point value will round. System.out.printf(&quot;Total value: %.2f n&quot;, 5.678); // Specify both the width (right-aligned and left-parted with spaces for positive width. Opposite for negative width) of character output and the number of decimal places. // Note that the width includes all of the characters being outputted. System.out.printf(&quot;Total value: %6.1f n&quot;, 343.23523); } } Application.main(null); . My name is Bob. I am a builder. My name is Sue. I am a lion tamer. My name is Roger. I am a skydiver. Here is some text. That was a tab. That was a new line.More text. Total cost 5 : quantity is 120 0: Here is some text 1: Here is some text 2: Here is some text 3: Here is some text 4: Here is some text 5: Here is some text 6: Here is some text 7: Here is some text 8: Here is some text 9: Here is some text 10: Here is some text 11: Here is some text 12: Here is some text 13: Here is some text 14: Here is some text 15: Here is some text 16: Here is some text 17: Here is some text 18: Here is some text 19: Here is some text Total value: 5.68 Total value: 343.2 . 21. The toString() Method . Notes: . Every Java object has the Object class that is their ultimate parent class. This means that all objects inherit all of the properties/methods of the Objet class. | The toString() method is a built-in method of Java that returns a certain value, usually of an object, in a String format. It typically is the String representation of an object (by default if no toString() method is defined), but can be modified to return certain properties of an object. | The toString() method can redefined in a class to help you better identify a particular object and its properties. | . Examples: . class Frog { private int id; private String name; public Frog(int id, String name) { this.id = id; this.name = name; } // Syntax for creating a custom toString() method for the Frog class. // Modifying the toString() method from the Object class. public String toString() { /* One possibility of returning data */ /* // Use StringBuilder to be more memory efficient. StringBuilder sb = new StringBuilder(); sb.append(id).append(&quot;:&quot;).append(name); // StringBuilder has its own toString() method to effectively return its object value in a String format. return sb.toString(); */ /* Another possibility of returning data */ // Use String.method() to return a formatted String with the same data values as before. Works similarly to printf(). return String.format(&quot;%-4d: %s&quot;, id, name); } } public class Application { public static void main(String[] args) { // Initialize an object of the ultimate parent Object class. Object obj = new Object(); // Initialize objects of the Frog class, which has the Object class as its ultimate parent class. Frog frog1 = new Frog(7, &quot;Freddy&quot;); Frog frog2 = new Frog(5, &quot;Roger&quot;); // Output value of the toString() method for the different objects of the Frog class. System.out.println(frog1.toString()); System.out.println(frog2.toString()); } } Application.main(null); . 7 : Freddy 5 : Roger . 22. Inheritance . Notes: . Inheritance is essentially a mechanism that allows for hierarchy amongst different classes. Using the extends keyword, a child class is able to inherit all of the properties/attributes and methods of the parent class. In addition, more attributes and methods can be defined in the child class, which belong to the child class but not the parent class. | A child class can override the attributes and methods inherited from the parent class (To override an attribute or method, the same modifiers and variable name should be used, but with a different value/body defined for the attribute or method. Changing the modifier with the same name would produce an error, but changing the name or changing the parameters would create a new method that would be called a different way). Inheritance is transitive, which means that a child class 1 that inherits from another child class 2 ultimately inherits from the parent class of child class 2. In this case, parent class is the superclass of both child class 2 and child class 1. | A child class can inherit static attributes and methods from a parent class, but it cannot override the original values and bodies of those attributes and methods (if they have any). If the child class changes the values and bodies of static attributes and methods, those values and bodies will be hidden/overturned by the original values and bodies of the parent class&#39;s static attributes and methods. | Privately declared properties can only be directly accessed within the class. This means that a child class does not inherit the private variables of its parent class. However, a child class can inherit private variables from its parent class if those private variables have getter and setter methods, which allow the child class to actually access and change the inherited encapsulated variables (because the child class inherits the public getters and setters). | Access modifiers (e.g. public, protected, default, and private) are basically keywords that define the visibility of the properties, methods, and constructors of a class. Variables without access modifiers are typically accessible throughout the package. | The protected keyword indicates that a variable is accessible anywhere in the package and can be inherited by child classes. Try to avoid overriding the variables of a parent class from a child class. | The super keyword refers to the parent class of the child class it is defined within. It can be used as a superclass constructor, where the child class&#39;s constructor first calls the constructor of the parent class to possibly instantiate needed variables (mostly inherited variables) or call needed methods in the parent class from the child class, using super(parameters if necessary); (Subclass does not inherit constructor, but can manually call the constructor of the super class). It can also be used to call superclass and attributes methods, where the child class implements the parent class&#39;s version of a particular variable or method, using the super keyword plus the dot notation (e.g. super.attributeName, super.methodName()). | . Examples: . // Syntax of creating the parent class Machine. class Machine { // private variable name that is specific to the parent class, and cannot be directly accessed by the child class. private String name = &quot;Machine Type 1&quot;; // Variable without access modifier that can be accessed by the child class, since the child class is in the same package as the parent class. String description = &quot;I am something&quot;; // Variable with protected access modifier that is inherited by the child class. protected int year = 2023; public void start() { System.out.println(&quot;Machine started.&quot;); } public void stop() { System.out.println(&quot;Machine stopped.&quot;); } } // Syntax of creating a child class Car of the parent class Machine. class Car extends Machine { // Override (same name and parameters) the start() method from the parent class inside the child class // The annotation (@) of an override. @Override public void start() { // Call the parent class&#39;s version of the start() method using the super keyword. super.start(); System.out.println(&quot;Car started.&quot;); } // The wipeWindShield() method belongs to the child class but not the parent class. // However, all of the methods of the parent class belong to the child class. public void wipeWindShield() { System.out.println(&quot;Wiping windshield.&quot;); } public void showInfo() { // The child class inherits non-private variables from the parent class. System.out.println(&quot;Car description: &quot; + description + &quot;, Year Made: &quot; + year); } } public class Application { public static void main(String[] args) { // Initialize object of the Machine parent class // mach1 can only run the defined methods of Machine (and only defined in Machine), since it is defined as a variable of type Machine that points an object of the Machine class. Machine mach1 = new Machine(); mach1.start(); mach1.stop(); System.out.println(); // Initialize object of the Car child class, which inherits the attributes and methods of the Machine parent class // car1 can run the defined methods of both Machine and Car, since it is defined as a variable of type Car which points to an object of the Car class, which inherited from the Machine class. Car car1 = new Car(); car1.start(); car1.wipeWindShield(); car1.showInfo(); car1.stop(); System.out.println(); // The Car child class is of type Machine but the Machine parent class is not of type Car. // car2 can only run the defined methods of Machine (though it will also run the redefined methods of Machine inside the Car class), since it is defined as a variable of type Machine that points to an object of the Car class. Machine car2 = new Car(); car2.start(); car2.stop(); // This will not work, as all cars may be machines, but not all machines are cars // The object type of Machine will conflict with the variable type of Car, since Machine is the parent, not the child, of Car // Car car3 = new Machine(); // Creating objects for both the Parent and Child classes Parent parent1 = new Parent(&quot;Bob&quot;); System.out.println(parent1.getName1()); Child child1 = new Child(&quot;John&quot;); System.out.println(child1.getName1()); System.out.println(child1.getName2()); } } class Parent { String name1; // Parent constructor public Parent(String name1) { this.name1 = name1; } public String getName1() { return name1; } } // The Child class inherits the name1 instance variable from the Parent class class Child extends Parent { String name2; // Child constructor public Child(String name2) { // Invoke the parent&#39;s constructor and pass the appropriate arguments. // Calling the parent&#39;s constructor allows the Child class to instantiate the value of the name1 instance variable found in the Parent class // The value of the name1 variable here belongs to the object of the Child class, but not the Parent class super(&quot;Jonathan&quot;); // Initialize the name2 instance variable of the Child class. this.name2 = name2; } public String getName2() { return name2; } } Application.main(null); . Machine started. Machine stopped. Machine started. Car started. Wiping windshield. Car description: I am something, Year Made: 2023 Machine stopped. Machine started. Car started. Machine stopped. Bob Jonathan John .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/20/Java-Fundamentals-Part-1.html",
            "relUrl": "/jupyter/2023/05/20/Java-Fundamentals-Part-1.html",
            "date": " • May 20, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Intuition AI Post",
            "content": "public class Main { ArrayList&lt;String&gt; parentheses = new ArrayList&lt;String&gt;(); public Main() { parentheses.add(&quot;(&quot;); parentheses.add(&quot;(&quot;); parentheses.add(&quot;)&quot;); parentheses.add(&quot;)&quot;); } public boolean isParenthesesValid() { System.out.println(parentheses.toString()); // If there is an odd number of parentheses, the expression is not valid if (parentheses.size() % 2 != 0) { return false; } // Create stack to store open parentheses and remove when needed Stack&lt;String&gt; openParStack = new Stack&lt;String&gt;(); // Iterate through parenthesis in the parentheses ArrayList for (int i = 0; i &lt; parentheses.size(); i++) { if (parentheses.get(i).equals(&quot;(&quot;)) { // If open parenthesis appears, push it to the stack openParStack.push(parentheses.get(i)); } else if (openParStack.size() == 0) { // If close parenthesis appears instead, but no open parentheses are in the stack, return false // Basically, return false if there are more close parentheses than open parentheses, or if a close parenthesis appears before its open parenthesis counterpart return false; } else if (parentheses.get(i).equals(&quot;)&quot;)) { // If close parenthesis appears and open parentheses are in the stack, pop an open parenthesis out of the stack openParStack.pop(); } } // Return false if there are more open parentheses than close parentheses if (openParStack.size() &gt; 0) { return false; } // By default, return true return true; } public static void main(String[] args) { Main tester = new Main(); System.out.println(tester.isParenthesesValid()); } } Main.main(null); . [(, (, ), )] true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/05/Intuition.html",
            "relUrl": "/jupyter/2023/05/05/Intuition.html",
            "date": " • May 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "FRQ 2011 Post",
            "content": "// Part a public static int arraySum(int[] arr) { int sum = 0; for (int element : arr) { sum += element; } return sum; } // Part b public static int[] rowSums(int[][] arr2D) { int[] sums = new int[arr2D.length]; for (int i = 0; i &lt; arr2D.length; i++) { sums[i] = arraySum(arr2D[i]); } return sums; } // Part c public static boolean isDiverse(int[][] arr2D) { for (int i = 0; i &lt; rowSums[arr2D]; i++) { for (int j = i + 1; j &lt; rowSums[arr2D]; j++) { if (rowSums[arr2D][j] == rowSums[arr2D][i]) { return false; } } } return true; } . public class HiddenWord { private String hiddenWord; public HiddenWord(String word) { hiddenWord = word; } public static String getHint(String guess) { String hint = &quot;&quot;; for (int i = 0; i &lt; guess.length(); i++) { if (guess.charAt(i) == hiddenWord.charAt(i)) { hint += guess.charAt(i); } else if (word.contains(guess.charAt(i))) { hint += &quot;+&quot;; } else { hint += &quot;*&quot;; } } return hint; } } . // Part a public int getValueAt(int row, int col) { int value = 0; for (SparseArrayEntry item : entries) { if (item.getRow() == row &amp;&amp; item.getCol() == col) { value = item.getValue(); break; } } return value; } // Part b public void removeColumn(int col) { for (SpaceArrayEntry item : entries) { if (item.getCol() == col) { entries.remove(item); } else if (item.getCol() &gt; col) { item.getCol()--; } } } . // Part a public interface NumberGroup { public boolean contains(int num); } // Part b public class Range implements NumberGroup { private int[] nums; public Range(int min, int max) { nums = new int[max - min]; int i = min; int index = 0; while (i &lt;= max) { nums[index] = i; index++; i++; } } public int[] getNums() { return nums; } } // Part c public boolean contains(int num) { for (Range range : groupList) { if (nums &gt;= range.getNums()[0] &amp;&amp; nums &lt;= range.getNums()[range.getNums().length - 1]) { return true; } } return false; } . | | | // Part b | public class Range implements NumberGroup {} Range is not abstract and does not override abstract method contains(int) in NumberGroup . // Part a public boolean simulate() { int travel = 0; for (int i = 0; i &lt; maxHops; i++) { travel += hopDistance(); if (travel &gt;= goalDistance) { return true; } else if (travel &lt; 0) { return false; } } return false; } // Part b public double runSimulations(int num) { double proportion = 0; for (int i = 0; i &lt; num; i++) { if (simulate() == true) { proportion++; } } proportion /= num; return proportion; } . // Part a public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for (int i = 0; i &lt; words.length - 1; i++) { for (int j = i + 1; j &lt; words.length; j++) { WordPair pair = new WordPair(words[i], words[j]); allPairs.add(pair); } } } // Part b public int numMatches() { int matches = 0; for (WordPair pair : allPairs) { if (pair.getFirst().equals(pair.getSecond())) { matches++; } } return matches; } . // Part a public static int[] getColumn(int[][] arr2D, int c) { int[] column = new int[arr2D.length]; int index = 0; for (int[] row : arr2D) { column[index] = row[c]; index++; } return column; } // Part b public static boolean isLatin(int[][] square) { if (containsDuplicates(square[0]) == true) { return false; } for (int i = 1; i &lt; square.length; i++) { if (hasAllValues(square[0], square[i]) == false) { return false; } } for (int j = 0; j &lt; square[0].length; j++) { if (hasAllValues(square[0], getColumn(square, j)) == false) { return false; } } return true; } . public static int firstAvailableBlock(int period, int duration) { int minutes = 0; for (int i = 0; i &lt;= 59; i++) { if (freeMinute(period, i) == true) { minutes++; } else { minutes = 0; } if (minutes == duration) { return i - duration + 1; } } return -1; } . 12 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/02/FRQ-Practice.html",
            "relUrl": "/jupyter/2023/05/02/FRQ-Practice.html",
            "date": " • May 2, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "FRQ 2011 Post",
            "content": "2011 FRQ Question 1: . public class Level { public boolean goalReached() { } public int getPoints() { } } public class Game { private Level levelOne; private Level levelTwo; private Level levelThree; public Game() { } public boolean isBonus() { } public void play() { } public int getScore() { int score = 0; if (levelOne.goalReached() == true) { score += levelOne.getPoints(); if (levelTwo.goalReached() == true) { score += levelTwo.getPoints(); if (levelThree.goalReached() == true) { score += levelThree.getPoints(); } } } if (isBonus() == true) { score *= 3; } return score; } public int playManyTimes(int num) { int[] scores = new int[num]; int index = 0; for (int i = 0; i &lt; num; i++) { play(); scores[index] = getScore(); index++; } int high = scores[0]; for (int j = 0; j &lt; scores.length; j++) { if (scores[j] &gt; high) { high = scores[j]; } } return high; } } . public class Book { private String title; private double price; public Book() { } } public class Textbook extends Book { private int edition; public Textbook(String bookTitle, double bookPrice, int editionNumber) { super(bookTitle, bookPrice); edition = editionNumber; } public String getBookInfo() { return title + &quot;-&quot; + price + &quot;-&quot; + edition; } public int getEdition() { return edition; } public boolean canSubstituteFor(Textbook previousTextbook) { if (title.equals(previousTextbook.getTitle()) &amp;&amp; edition &gt;= previousTextbook.getEdition()) { return true; } return false; } } . public class ReviewAnalysis { private Review[] allReviews; public ReviewAnalysis() { } public double getAverageRating() { double average = 0; for (Review review : allReviews) { average += review.getRating(); } average /= (double) review.length; return average; } public ArrayList&lt;String&gt; collectComments() { ArrayList&lt;String&gt; comments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String finalString = &quot;&quot;; String comment = allReviews[i].getComment(); if (comment.contains(&quot;!&quot;) == true) { finalString += i + &quot;-&quot; + comment; if (comment.substring(comment.length() - 1).equals(&quot;!&quot;) || comment.substring(comment.length() - 1).equals(&quot;.&quot;)) { } } } } } . | } illegal start of statement | comments.add() &#39;;&#39; expected .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/05/01/FRQ-2011.html",
            "relUrl": "/jupyter/2023/05/01/FRQ-2011.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "FRQ 2012 Post",
            "content": "2012 FRQ Question 1: . public class ClimbInfo { // Initialization of parameters peakName and climbTime not shown public ClimbInfo(String peakName, int climbTime) { /* implementation not shown */ } public String getName() { /* implementation not shown */ } public int getTime() { /* implementation not shown */ } } public class ClimbingClub { private List&lt;ClimbInfo&gt; climbList; public ClimbingClub() { climbList = new ArrayList&lt;ClimbInfo&gt;(); } public void addClimb(String peakName, int climbTime) { /* part a ClimbInfo climb = new ClimbInfo(peakName, climbTime); climbList.add(climb); */ // part b // Instantiate new ClimbInfo object to store in the ArrayList ClimbInfo climb = new ClimbInfo(peakName, climbTime); // Loop through current items of ArrayList for (int i = 0; i &lt; climbList.size(); i++) { // Check where the new object should be inserted in order to maintain alphabetical order if (peakName.compareTo(climbList.get(i).getName()) &lt;= 0) { // Once the right position is found, insert the new object into that position, and adjust the other elements as needed // Instantiate temp which will hold the next element that will be moved ClimbInfo temp = climbList.get(i); // current marks the element to be currently moved ClimbInfo current = climb; for (int j = i; j &lt; climbList.size(); j++) { // Set current index with the currently moved element climbList.set(j, current); // Set current to temp to get ready for the next iteration current = temp; // If at last index, add current as a new element to ArrayList if (j == climbList.size() - 1) { climbList.add(current); } else { // Else, set next element to be moved to temp temp = climbList.get(j + 1); } } break; } } } public int distinctPeakNames() { // Given implementation if (climbList.size() == 0) { return 0; } ClimbInfo currInfo = climbList.get(0); String prevName = currInfo.getName(); String currName = null; int numNames = 1; for (int k = 1; k &lt; climbList.size(); k++) { currInfo = climbList.get(k); currName = currInfo.getName(); // Check if object next to current object has the same peakName if (prevName.compareTo(currName) != 0) { numNames++; prevName = currName; } } return numNames; // i. This would not work as intended all the time if addClimb stores objects the way they were added, // because some objects added may have the same name, but are not next to each other and so are not detected // to be the same by distinctPeakNames. // ii. This would work as intended if addClimb stores objects in alphabetical order (using peakName), since objects with the same name // will be placed next to each other, and so will be detected to be the same by distinctPeakNames. } } .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/30/FRQ-2012.html",
            "relUrl": "/jupyter/2023/04/30/FRQ-2012.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Merge Sort and Binary Search Homework Post",
            "content": "Merge Sort Hacks: . public class State { public String name; public String governor; public State(String nameInput, String governorInput) { name = nameInput; governor = governorInput; } public String getName() { return name; } public String getGovernor() { return governor; } } public class MergeSort { public void toString(State[] states) { String output = &quot;&quot;; for (int i = 0; i &lt; states.length; i++) { if (i == states.length - 1) { output += states[i].getName() + &quot;-&quot; + states[i].getGovernor(); } else { output += states[i].getName() + &quot;-&quot; + states[i].getGovernor() + &quot;, &quot;; } } System.out.println(output); } public void sort(String arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } public void merge(String[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array String[] L = new String[n1]; // Right array String[] R = new String[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i].compareTo(R[j]) &lt;= 0) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public void sort2(State arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort2(arr, l, m); sort2(arr, m + 1, r); merge2(arr, l, m, r); } } public void merge2(State[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array State[] L = new State[n1]; // Right array State[] R = new State[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i].getName().compareTo(R[j].getName()) &lt;= 0) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static void main(String[] args) { String[] words = {&quot;apple&quot;, &quot;cucumber&quot;, &quot;egg&quot;, &quot;banana&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;, &quot;kiwi&quot;}; System.out.println(&quot;Unsorted array:&quot;); for (String item : words) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); MergeSort myObj = new MergeSort(); myObj.sort(words, 0, words.length - 1); System.out.println(&quot;Sorted array:&quot;); for (String item : words) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); State ohio = new State(&quot;Ohio&quot;, &quot;DeWine&quot;); State california = new State(&quot;California&quot;, &quot;Newsom&quot;); State newYork = new State(&quot;New York&quot;, &quot;Hochul&quot;); State massachusetts = new State(&quot;Massachusetts&quot;, &quot;Healey&quot;); State indiana = new State(&quot;Indiana&quot;, &quot;Holcomb&quot;); State[] states = {ohio, california, newYork, massachusetts, indiana}; System.out.println(&quot;Unsorted states:&quot;); myObj.toString(states); System.out.println(&quot;&quot;); myObj.sort2(states, 0, states.length - 1); System.out.println(&quot;Sorted states:&quot;); myObj.toString(states); System.out.println(&quot;&quot;); } } MergeSort.main(null); . Unsorted array: apple cucumber egg banana strawberry blueberry kiwi Sorted array: apple banana blueberry cucumber egg kiwi strawberry Unsorted states: Ohio-DeWine, California-Newsom, New York-Hochul, Massachusetts-Healey, Indiana-Holcomb Sorted states: California-Newsom, Indiana-Holcomb, Massachusetts-Healey, New York-Hochul, Ohio-DeWine . Binary Search Hacks: . public class BinarySearch { public static int search(int[] arr, int key, int min, int max) { // Check if current min and max have a range between them if (min &lt;= max) { // Get middle index of current searchable range int mid = (min + max)/2; // Conditionals to check if element is found or if the range should be changed if (arr[mid] == key) { return mid; } else if (arr[mid] &lt; key) { // No need to check elements below previous mid min = mid; } else if (arr[mid] &gt; key) { // No need to check elements above previous mid max = mid; } // Recursive calls until index of searched element is found return search(arr, key, min, max); } return -1; } public void sort(int arr[], int l, int r) { // As long as the component is large enough to be divide, keeping running the functions if (l &lt; r) { // Find midpoint of current component, and run functions on it int m = l + (r - l) / 2; sort(arr, l, m); sort(arr, m + 1, r); merge(arr, l, m, r); } } public void merge(int[] arr, int l, int m, int r) { // Size of first half int n1 = m - l + 1; // Size of second half int n2 = r - m; // Left array int[] L = new int[n1]; // Right array int[] R = new int[n2]; for (int i = 0; i &lt; n1; ++i) { L[i] = arr[l + i]; } for (int j = 0; j &lt; n2; ++j) { R[j] = arr[m + 1 + j]; } int i = 0, j = 0; // Initial index of main array int k = l; while (i &lt; n1 &amp;&amp; j &lt; n2) { // Use compareTo function to compare alphabetical standings of words. Merge sort takes place, as words with characters earlier // in the alphabet are added to arr first if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // Add any remaining elements in the left array while (i &lt; n1) { arr[k] = L[i]; i++; k++; } //Add any remaining in the right array while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } public static void main(String[] args) { // Combining merge sort and binary search to sort and search an array int[] array = {1, 67, 45, 5, 9, 23, 7, 3}; for (int item : array) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); BinarySearch myObj = new BinarySearch(); myObj.sort(array, 0, array.length - 1); for (int item : array) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Index of 45: &quot; + myObj.search(array, 45, 0, array.length - 1)); } } BinarySearch.main(null); . 1 67 45 5 9 23 7 3 1 3 5 7 9 23 45 67 Index of 45: 6 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/26/merge-sort-binary-search.html",
            "relUrl": "/jupyter/2023/04/26/merge-sort-binary-search.html",
            "date": " • Apr 26, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Arrays and More Homework Post",
            "content": "Hack: Create method that sets all elements in array to n . // Function to set all elements in array to specified integer void setArray(int[] arr, int n) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = n; } } int[] array = new int[10]; // Set all elements to 10 setArray(array, 10); for (int i = 0; i &lt; array.length; i++) { System.out.println(array[i]); } // Should print all 10s when working properly . 10 10 10 10 10 10 10 10 10 10 . Hack: Write an array to find the average of an array . //Example finding the average an array. //Finds the average of an array public static double average(int[] array) { // Initialize sum to be 0 int sum = 0; // Add all elements to sum for (int item : array) { sum += item; } // Divide sum by total number of elements to get the average. Note the double cast double average = (double) sum/array.length; return average; } //tester array int[] test = {3, 5, 7, 2, 10}; //returns 5.4 System.out.println(average(test)); . 5.4 . Hack: Find the average number of a diagonal in a 2d array . For example, here find the average of the bolded #s 1 2 3 4 5 6 7 8 9 1 2 3 . public static double averageDiagonal (int[][] array2D) { // Initialize important variables to control the function int sum = 0; int index = 0; int count = 0; // Loop through the 2d array by checking each row for (int[] array : array2D) { // Using the index variable, check the elements in a diagonal (going bottom right), // adding them to the sum until there is no more elements in the current diagonal position try { sum += array[index]; index++; count++; } catch (Exception e) { break; } } // Divide sum by total number of elements and double cast in order to find the average value double average = (double) sum/count; return average; } int[][] arr = { {1,2,3,4,5,6}, {7,8,9,10,11,12}, {0,1,2,3,4,5}, {10,11,12,13,14,15}, {15,16,17,18,19,20} }; System.out.println(averageDiagonal(arr)); . 8.6 . FRQ 2018 Q4 . public class ArrayTester { public static int[] getColumn(int[][] arr2D, int c) { // Create 1D array that will contain the column values int[] column = new int[arr2D.length]; // Add all values in the specified column to the column array. Iterate through each row for (int i = 0; i &lt; arr2D.length; i++) { column[i] = arr2D[i][c]; } return column; } public static boolean hasAllValues(int[] arr1, int[] arr2) { // Implementation not shown } public static boolean containsDuplicates(int[] arr) { // Implementation not shown } public static boolean isLatin(int[][] square) { // Get the first row array of the 2D array int[] firstRow = square[0]; // Check if the first row contains any duplicate values if (containsDuplicates(firstRow) != true) { return false; } // For each row under the first, check if it contains all of the values of the first row for (int i = 1; i &lt; square.length; i++) { if (hasAllValues(firstRow, square[i]) != true) { return false; } } // For each column in the square, check if it contains all of the values of the first row for (int j = 0; j &lt; square[0].length; j++) { int[] column = getColumn(square, j); if (hasAllValues(firstRow, column) != true) { return false; } } return true; } } . FRQ 2017 Q4 . // Position class that will be processed by the Successors class public class Position { public Position(int r, int c) { // Implementation not shown } } public class Successors { // Static function to return the position (row and column) of the searched value public static Position findPosition(int num, int[][] intArr) { boolean found = false; // Iterate through rows and columns to search through every element of the 2D array for (int i = 0; i &lt; intArr.length; i++) { for (int j = 0; j &lt; intArr[i].length; j++) { // Stop the search once the element is found if (intArr[i][j] == num) { found = true; Position positionObject = new Position(i, j); break; } } } // Return null if the element is not found if (found == false) { return null; } else { return positionObject; } } // Static function public static Position[][] getSuccessorArray(int[][] intArr) { // Instantiate new array with the same dimensions as intArr Position[][] successorArray = new Position[intArr.length][intArr[0].length]; // Set a Position object (position of respective intArr element + 1) for each element of successorArray for (int i = 0; i &lt; successorArray.length; i++) { for (int j = 0; j &lt; successorArray[i].length; j++) { successorArray[i][j] = findPosition(intArr[i][j] + 1, intArr); } } return successorArray; } } . FRQ 2016 Q4 . public class StringFormatter { public static int totalLetters(List&lt;String&gt; wordList) { int total = 0; // Add the length of every word in wordList to get the total letters for (int i = 0; i &lt; wordList.size(); i++) { total += wordList.get(i).length(); } return total; } public static int basicGapWidth(List&lt;String&gt; wordList, int formattedLen) { // Get the number of gaps for the wordList int numGaps = wordList.size() - 1; // Get the number of spaces by subtracting the total letters from the formatted sentence length int numSpaces = formattedLen - totalLetters(wordList); // Divide using int type to get rid of remainders, effectively getting the basic gap width int gapWidth = numSpaces/numGaps; return gapWidth; } public static int leftoverSpaces(List&lt;String&gt; wordList, int formattedLen) { // Implementation not shown } public static String format(List&lt;String&gt; wordList, int formattedLen) { // Instantiate empty string that will ultimately contain the formatted string String formattedString = &quot;&quot;; // Get leftover spaces int leftover = leftoverSpaces(wordList, formattedLen); // Get basic gap width int gapWidth = basicGapWidth(wordList, formattedLen); for (int i = 0; i &lt; wordList.size(); i++) { // Add each word to formattedString formattedString += wordList.get(i); // If not the last word, add the basic gap width, as well as a leftover space if applicable if (i &lt; wordList.size() - 1) { for (int j = 0; j &lt; gapWidth; j++) { formattedString += &quot; &quot;; } if (leftover &gt; 0) { formattedString += &quot; &quot;; leftover--; } } } return formattedString; } } .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/25/arraysandmore-homework.html",
            "relUrl": "/jupyter/2023/04/25/arraysandmore-homework.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Surprise Test Post",
            "content": "import java.util.*; import java.lang.Thread; public class Book { public int id; public static int newID = 0; public String title; public int pages; public long time; public long expirationTime; public int stampRenews; public Book(String titleInput, int pageInput) { title = titleInput; pages = pageInput; id = newID; time = System.currentTimeMillis(); expirationTime = 5000; newID++; } public String getTitle() { return title; } public int getPage() { return pages; } public int getID() { return id; } public long getTime() { return time; } public long getExpirationTime() { return expirationTime; } public void setExpirationTime(int stampRenewsInput) { this.expirationTime += 5000 * (stampRenewsInput/3); } public void setStampRenews(int stampRenewsInput) { this.stampRenews = stampRenewsInput; } public int getStampRenews() { return stampRenews; } public String getAuthor() { return &quot;&quot;; } public void setAuthor(String authorInput) {} public String getPublishingCompany() {return &quot;&quot;;} public void setPublishingCompany(String publishingCompanyInput) {} } public class Novel extends Book { public String author; public Novel(String title, int page, String authorInput) { super(title, page); author = authorInput; } public String getAuthor() { return author; } public void setAuthor(String authorInput) { this.author = authorInput; } } public class Textbook extends Book { public String publishingCompany; public Textbook(String title, int page, String publishingCompanyInput) { super(title, page); publishingCompany = publishingCompanyInput; } public String getPublishingCompany() { return publishingCompany; } public void setPublishingCompany(String publishingCompanyInput) { this.publishingCompany = publishingCompanyInput; } } public class Main { public void toString(ArrayList&lt;Book&gt; bookList) { String output = &quot;[&quot;; for (int i = 0; i &lt; bookList.size(); i++) { if (i == bookList.size() - 1) { output += &quot;{&quot; + bookList.get(i).getTitle() + &quot;-&quot; + bookList.get(i).getPage() + &quot;-&quot; + bookList.get(i).getID() + &quot;-&quot; + bookList.get(i).getTime() + &quot;-&quot; + bookList.get(i).getExpirationTime() + &quot;}&quot;; } else { output += &quot;{&quot; + bookList.get(i).getTitle() + &quot;-&quot; + bookList.get(i).getPage() + &quot;-&quot; + bookList.get(i).getID() + &quot;-&quot; + bookList.get(i).getTime() + &quot;-&quot; + bookList.get(i).getExpirationTime() + &quot;},&quot;; } } output += &quot;]&quot;; System.out.println(output); } public int getBookCount(ArrayList&lt;Book&gt; bookList) { return bookList.size(); } public long getShelfLife(Book bookInQuestion) { long shelfLife = System.currentTimeMillis() - bookInQuestion.getTime(); return shelfLife; } public void checkIfExpired(Book bookInQuestion, long shelfLife) { boolean expired = false; if (shelfLife &gt; bookInQuestion.getExpirationTime()) { expired = true; } System.out.println(&quot;Expired: &quot; + expired); } public static void main(String[] args) throws InterruptedException { System.out.println(&quot;Part 1:&quot;); System.out.println(&quot;-&quot;); ArrayList&lt;Book&gt; bookList = new ArrayList&lt;Book&gt;(); Book book1 = new Book(&quot;Maze Runner&quot;, 500); Book book2 = new Book(&quot;Hunger Games&quot;, 700); Book book3 = new Book(&quot;Fahrenheit 451&quot;, 800); bookList.add(book1); bookList.add(book2); bookList.add(book3); Main myObj = new Main(); System.out.println(&quot;All books in library:&quot;); System.out.println(book1.getTitle()); System.out.println(book2.getTitle()); System.out.println(book3.getTitle()); System.out.println(&quot;&quot;); System.out.println(&quot;Number of books in library:&quot;); System.out.println(myObj.getBookCount(bookList)); System.out.println(&quot;&quot;); System.out.println(&quot;toString():&quot;); myObj.toString(bookList); System.out.println(); System.out.println(&quot;Part 2:&quot;); System.out.println(&quot;-&quot;); bookList.clear(); Book novel1 = new Novel(&quot;Computer Science Fundamentals&quot;, 800, &quot;Mark Wahlberg&quot;); Book textbook1 = new Textbook(&quot;How to be good&quot;, 700, &quot;Generic Publishing Company&quot;); bookList.add(novel1); bookList.add(textbook1); System.out.println(&quot;Author of novel: &quot; + novel1.getAuthor()); textbook1.setPublishingCompany(&quot;Specific Publishing Company&quot;); System.out.println(&quot;Publishing company of textbook: &quot; + textbook1.getPublishingCompany()); System.out.println(&quot;Date and time novel was added to library: &quot; + novel1.getTime()); myObj.toString(bookList); System.out.println(); System.out.println(&quot;Part 3:&quot;); System.out.println(&quot;-&quot;); Book newBook = new Book(&quot;Baron&#39;s Computer Science Adventures&quot;, 500); bookList.add(newBook); myObj.toString(bookList); Thread.sleep(3500); System.out.println(myObj.getShelfLife(newBook)); myObj.checkIfExpired(newBook, myObj.getShelfLife(newBook)); Thread.sleep(1500); System.out.println(myObj.getShelfLife(newBook)); myObj.checkIfExpired(newBook, myObj.getShelfLife(newBook)); Book newBookAgain = new Book(&quot;Generic Book&quot;, 700); bookList.add(newBookAgain); newBookAgain.setExpirationTime(3); Thread.sleep(6000); System.out.println(myObj.getShelfLife(newBookAgain)); myObj.checkIfExpired(newBookAgain, myObj.getShelfLife(newBookAgain)); } } Main.main(null); . Part 1: - All books in library: Maze Runner Hunger Games Fahrenheit 451 Number of books in library: 3 toString(): [{Maze Runner-500-0-1682699976779-5000},{Hunger Games-700-1-1682699976779-5000},{Fahrenheit 451-800-2-1682699976779-5000}] Part 2: - Author of novel: Mark Wahlberg Publishing company of textbook: Specific Publishing Company Date and time novel was added to library: 1682699976851 [{Computer Science Fundamentals-800-3-1682699976851-5000},{How to be good-700-4-1682699976851-5000}] Part 3: - [{Computer Science Fundamentals-800-3-1682699976851-5000},{How to be good-700-4-1682699976851-5000},{Baron&#39;s Computer Science Adventures-500-5-1682699976868-5000}] 3504 Expired: false 5009 Expired: true 6001 Expired: false .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/20/Surpise-Test.html",
            "relUrl": "/jupyter/2023/04/20/Surpise-Test.html",
            "date": " • Apr 20, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Checkpoint 3 Post",
            "content": "import java.util.LinkedList; public class Sorting { // Initialize different Linked Lists to be sorted public LinkedList&lt;Integer&gt; linkedListName = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameBubble = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameSelection = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameInsertion = new LinkedList&lt;Integer&gt;(); public LinkedList&lt;Integer&gt; linkedListNameMerge = new LinkedList&lt;Integer&gt;(); public Sorting(int[] numbers) { for (int i = 0; i &lt; numbers.length; i++) { linkedListName.add(numbers[i]); linkedListNameBubble.add(numbers[i]); linkedListNameSelection.add(numbers[i]); linkedListNameInsertion.add(numbers[i]); linkedListNameMerge.add(numbers[i]); } } // Iterate through each element of the linked list, and in each iteration, swap 2 elements if they are not in the correct order. // After one full loop of the linked list, decrease the loop condition by one, since the last element has to be the highest in the linked list. public void bubbleSort() { int capacity = linkedListNameBubble.size() - 1; for (int i = 0; i &lt; capacity; i++) { if (linkedListNameBubble.get(i) &gt; linkedListNameBubble.get(i + 1)) { int temp = linkedListNameBubble.get(i + 1); linkedListNameBubble.set(i + 1, linkedListNameBubble.get(i)); linkedListNameBubble.set(i, temp); } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } } // In one loop of the selection sort, the algorithm finds the minimum value of the linked list. // After one full loop, the minimum value is set at the minimum index, and the starting index of the loop moves up by one. public void selectionSort() { int tempIndex = 0; for (int i = tempIndex; i &lt; linkedListNameSelection.size(); i++) { int min = linkedListNameSelection.get(tempIndex); int minIndex = tempIndex; if (i == tempIndex) { min = linkedListNameSelection.get(i); } else if (linkedListNameSelection.get(i) &lt; min) { minIndex = i; min = linkedListNameSelection.get(i); } int temp = linkedListNameSelection.get(tempIndex); linkedListNameSelection.set(tempIndex, min); linkedListNameSelection.set(minIndex, temp); if (i == linkedListNameSelection.size() - 1 &amp;&amp; tempIndex &lt; linkedListNameSelection.size() - 2) { tempIndex++; i = tempIndex - 1; } } } // In each iteration, take the current element and compare it to all of the other elements in the linked list, then insert it to the position before the first element it is lower than in value. public void insertionSort() { for (int i = 0; i &lt; linkedListNameInsertion.size(); i++) { for (int j = 0; j &lt; i; j++) { if (linkedListNameInsertion.get(j) &gt; linkedListNameInsertion.get(i)) { int temp = linkedListNameInsertion.get(j); linkedListNameInsertion.set(j, linkedListNameInsertion.get(i)); linkedListNameInsertion.remove(i); linkedListNameInsertion.add(j + 1, temp); break; } } } } public static void main(String[] args) { int[] numbers = {1, 7, 2, 5, 3, 6, 4, 8}; Sorting myObj = new Sorting(numbers); System.out.println(&quot;LinkedList before bubble sort: &quot; + myObj.linkedListName.toString()); myObj.bubbleSort(); System.out.println(&quot;LinkedList after bubble sort: &quot; + myObj.linkedListNameBubble.toString()); System.out.println(&quot;LinkedList before selection sort: &quot; + myObj.linkedListName.toString()); myObj.selectionSort(); System.out.println(&quot;LinkedList after selection sort: &quot; + myObj.linkedListNameSelection.toString()); System.out.println(&quot;LinkedList before insertion sort: &quot; + myObj.linkedListName.toString()); myObj.insertionSort(); System.out.println(&quot;LinkedList after insertion sort: &quot; + myObj.linkedListNameInsertion.toString()); } } Sorting.main(null); . LinkedList before bubble sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after bubble sort: [1, 2, 3, 4, 5, 6, 7, 8] LinkedList before selection sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after selection sort: [1, 2, 3, 4, 5, 6, 7, 8] LinkedList before insertion sort: [1, 7, 2, 5, 3, 6, 4, 8] LinkedList after insertion sort: [1, 2, 3, 4, 5, 6, 7, 8] . Collectable . public abstract class Collectable implements Comparable &lt;Collectable&gt; { public final String masterType = &quot;Collectable&quot;; private String type; // extender should define their data type // enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // this method is used to compare toString of objects public int compareTo(Collectable obj) { return this.toString().compareTo(obj.toString()); } // static print method used by extended classes public static void print(Collectable[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Collectable&#39; properties if (objs.length &gt; 0) { Collectable obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Collectable: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } public class Sport extends Collectable { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Sport.key = key;} public enum KeyType implements KeyTypes {title, name, numPlayers} // Instance data private final String name; private final int numPlayers; // Constructor Sport(String name, int numPlayers) { this.setType(&quot;Sport&quot;); this.name = name; this.numPlayers = numPlayers; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Sport.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.numPlayers.equals(this.getKey())) { output += &quot;00&quot; + this.numPlayers; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.numPlayers; } return output; } // Test data initializer public static Sport[] sports() { return new Sport[]{ new Sport(&quot;Soccer&quot;, 22), new Sport(&quot;Basketball&quot;, 10), new Sport(&quot;Volleyball&quot;, 12), new Sport(&quot;Tennis&quot;, 2), new Sport(&quot;Football&quot;, 22) }; } public static void main(String[] args) { // Inheritance Hierarchy Sport[] objs = sports(); // print with title Sport.setOrder(KeyType.title); Sport.print(objs); // print flavor only Sport.setOrder(KeyType.name); Sport.print(objs); // print numPlayers only Sport.setOrder(KeyType.numPlayers); Sport.print(objs); } } Sport.main(null); . class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by title Sport: Soccer, 22 Sport: Basketball, 10 Sport: Volleyball, 12 Sport: Tennis, 2 Sport: Football, 22 class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by name Soccer Basketball Volleyball Tennis Football class [LREPL.$JShell$13B$Sport; 5 Collectable: Sport listed by numPlayers 22 10 12 02 22 . Big O Complexity Notes . Space complexity is basically the total amount of memory space used by a certain program, and it includes space allocated to input values. | Time complexity is basically the total amount of time it takes to run a certain program. | An ideal program involves low space complexity and low time complexity, as it minimizes the amount of resources that need to be used. | . import java.util.*; public class BigOAnalyze { public int[] numbers = new int[5000]; public BigOAnalyze() { for (int i = 0; i &lt; numbers.length; i++) { numbers[i] = (int) (Math.random() * 1000); } } public void bubbleSort() { int capacity = numbers.length - 1; for (int i = 0; i &lt; capacity; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } } public void selectionSort() { int tempIndex = 0; for (int i = tempIndex; i &lt; numbers.length; i++) { int min = numbers[tempIndex]; int minIndex = tempIndex; if (i == tempIndex) { min = numbers[i]; } else if (numbers[i] &lt; min) { minIndex = i; min = numbers[i]; } int temp = numbers[tempIndex]; numbers[tempIndex] = min; numbers[minIndex] = temp; if (i == numbers.length - 1 &amp;&amp; tempIndex &lt; numbers.length - 2) { tempIndex++; i = tempIndex - 1; } } } public void insertionSort() { for (int i = 0; i &lt; numbers.length; i++) { for (int j = 0; j &lt; i; j++) { if (numbers[j] &gt; numbers[i]) { for (int x = i; x &gt; j; x--) { int temp = numbers[x]; numbers[x] = numbers[x-1]; numbers[x-1] = temp; } break; } } } } public static void main(String[] args) { int averageBubbleTime = 0; int averageSelectionTime = 0; int averageInsertionTime = 0; for (int i = 0; i &lt; 12; i++) { BigOAnalyze myObj = new BigOAnalyze(); long startTime = System.currentTimeMillis(); myObj.bubbleSort(); long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; averageBubbleTime += time; System.out.println(&quot;Bubble sort time: &quot; + time); BigOAnalyze myObj2 = new BigOAnalyze(); startTime = System.currentTimeMillis(); myObj2.selectionSort(); stopTime = System.currentTimeMillis(); time = stopTime - startTime; averageSelectionTime += time; System.out.println(&quot;Selection sort time: &quot; + time); BigOAnalyze myObj3 = new BigOAnalyze(); startTime = System.currentTimeMillis(); myObj3.insertionSort(); stopTime = System.currentTimeMillis(); time = stopTime - startTime; averageInsertionTime += time; System.out.println(&quot;Insertion sort time: &quot; + time); } averageBubbleTime /= 12; averageSelectionTime /= 12; averageInsertionTime /= 12; System.out.println(&quot;Average bubble sort time: &quot; + averageBubbleTime); System.out.println(&quot;Average selection sort time: &quot; + averageSelectionTime); System.out.println(&quot;Average insertion sort time: &quot; + averageInsertionTime); } } BigOAnalyze.main(null); . Bubble sort time: 56 Selection sort time: 121 Insertion sort time: 21 Bubble sort time: 36 Selection sort time: 84 Insertion sort time: 8 Bubble sort time: 23 Selection sort time: 63 Insertion sort time: 22 Bubble sort time: 24 Selection sort time: 67 Insertion sort time: 10 Bubble sort time: 17 Selection sort time: 51 Insertion sort time: 9 Bubble sort time: 21 Selection sort time: 49 Insertion sort time: 5 Bubble sort time: 24 Selection sort time: 54 Insertion sort time: 6 Bubble sort time: 19 Selection sort time: 51 Insertion sort time: 6 Bubble sort time: 24 Selection sort time: 52 Insertion sort time: 5 Bubble sort time: 18 Selection sort time: 51 Insertion sort time: 4 Bubble sort time: 18 Selection sort time: 49 Insertion sort time: 6 Bubble sort time: 19 Selection sort time: 49 Insertion sort time: 4 Average bubble sort time: 24 Average selection sort time: 61 Average insertion sort time: 8 . Big O Analysis: . Bubble Sort: Space complexity: O(1) | Time complexity: O(n^2) | . | Selection sort: Space complexity: o(1) | Time complexity: o(n^2) | . | Insertion sort: Space complexity: o(1) | Time complexity: o(n) | . | In our program, the insertion sort took the least time to perform its task. Since the space complexities are about the same for all three sorts, I believe the insertion sort is the most optimal. | . HashMap . import java.util.HashMap; import java.util.Scanner; public class MapAnalyze { public long hashMapAnalyze(HashMap&lt;Integer, Integer&gt; numbersMap, int inputNumber) { long startTime = System.currentTimeMillis(); numbersMap.containsValue(inputNumber); long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; return time; } public int[] bubbleSort(int[] numbers) { int capacity = numbers.length - 1; for (int i = 0; i &lt; capacity; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; } if (i == capacity - 1 &amp;&amp; capacity &gt; 0) { capacity--; i = -1; } } return numbers; } public long binarySearchAnalyze(int[] numbers, int inputNumber) { int[] newNumbers = bubbleSort(numbers); long startTime = System.currentTimeMillis(); int midIndex = newNumbers.length/2; int length = newNumbers.length/2; while(length &gt; 1) { if (newNumbers[midIndex] == inputNumber) { break; } else if (newNumbers[midIndex] &gt; inputNumber) { length /= 2; midIndex -= length; } else if (newNumbers[midIndex] &lt; inputNumber) { length /= 2; midIndex += length; } } long stopTime = System.currentTimeMillis(); long time = stopTime - startTime; return time; } public static void main(String[] args) { int[] numbers = new int[5000]; HashMap&lt;Integer, Integer&gt; numbersMap = new HashMap&lt;Integer, Integer&gt;(); for (int i = 0; i &lt; numbers.length; i++) { numbers[i] = (int) (Math.random() * 1000); numbersMap.put(i, (int) (Math.random() * 1000)); } MapAnalyze myObj = new MapAnalyze(); Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter a number between 1 and 1000:&quot;); int inputNumber = userInput.nextInt(); System.out.println(&quot;Time for binary search: &quot; + myObj.hashMapAnalyze(numbersMap, inputNumber)); System.out.println(&quot;Time for HashMap lookup: &quot; + myObj.binarySearchAnalyze(numbers, inputNumber)); } } MapAnalyze.main(null); . Enter a number between 1 and 1000: Time for binary search: 0 Time for HashMap lookup: 308 . Collection HashMap . Pros | Pros | . + Simple | + Fast access and retrieval | . + Stores a lot of data, | + Efficient for large data sets | . can iterate over small | + Provides key-value pairs | . data sets | + No duplicates allowed | . + Allows duplicates to emerge in multiple indexes | | . | | . Cons | Cons | . - Slower | - Complexity | . - No efficient key-based | - memory-intensive | . access | - Not thread-safe | . - No order like, only based on a key | - Requires more code to | . | iterate, not as | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/04/05/Checkpoint-3.html",
            "relUrl": "/jupyter/2023/04/05/Checkpoint-3.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Stack Hack Post",
            "content": "public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } public class Stack&lt;T&gt; { private LinkedList&lt;T&gt; upper; private int size; // constructor initiates null LinkedList&lt;T&gt; object + set size to 0 public Stack() { this.upper = null; this.size = 0; } // push method for a new element to the upper value public void push(T data) { LinkedList&lt;T&gt; newNode = new LinkedList&lt;T&gt;(data, this.upper); this.upper = newNode; this.size++; } // peek method, return upper public T peek() { // try/catch to either return upper or print message if upper doesn&#39;t exist try { return this.upper.getData(); } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // pop method, return upper and remove public T pop() { // try/catch to either return + pop upper or print message if upper doesn&#39;t exist try { T data = this.upper.getData(); this.upper = this.upper.getPrevious(); this.size--; return data; } catch (NullPointerException e) { System.out.println(&quot;No upper element, empty stack!&quot;); return null; } } // get size method public int size() { return this.size; } // isEmpty method, compare size to 0 public boolean isEmpty() { return this.size == 0; } // toString method, from top to bottom public String toString() { String s = &quot;[ &quot;; LinkedList&lt;T&gt; currentNode = upper; // gets upper node, then keeps going down to previous until previous is null while (currentNode != null) { s += currentNode.getData(); currentNode = currentNode.getPrevious(); if (currentNode != null) { s += &quot;, &quot;; } } s += &quot; ]&quot;; return s; } } public class Main { public static void main(String[] args) { Stack&lt;Integer&gt; stackName = new Stack&lt;Integer&gt;(); stackName.push(1); stackName.push(3); stackName.push(5); stackName.push(7); stackName.push(9); stackName.push(11); System.out.println(&quot;Whole stack: &quot; + stackName.toString()); System.out.println(&quot;Item on top: &quot; + stackName.peek()); stackName.pop(); System.out.println(&quot;Item on top after one remove: &quot; + stackName.peek()); System.out.println(&quot;Stack size: &quot; + stackName.size()); System.out.println(&quot;Check if stack is empty: &quot; + stackName.isEmpty()); } } Main.main(null); . | public class LinkedList&lt;T&gt; { a type with the same simple name is already defined by the single-type-import of java.util.Stack .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/26/Stack-Hack.html",
            "relUrl": "/jupyter/2023/03/26/Stack-Hack.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Stack Hack 2 Post",
            "content": "import java.util.Stack; public class StackSorter { public void sort() { Stack&lt;Integer&gt; stack = new Stack&lt;Integer&gt;(); ArrayList&lt;Integer&gt; usedNumbers = new ArrayList&lt;Integer&gt;(); stack.push(3); stack.push(7); stack.push(5); stack.push(1); stack.push(2); stack.push(10); stack.push(7); System.out.println(&quot;Stack before sort: &quot; + stack.toString()); int[] tempValues = new int[stack.size()]; int index = 0; while (!stack.isEmpty()) { tempValues[index] = stack.pop(); index++; } int swapCount = 0; for (int i = 0; i &lt; tempValues.length - 1; i++) { if (tempValues[i] &gt; tempValues[i + 1]) { int temp = tempValues[i + 1]; tempValues[i + 1] = tempValues[i]; tempValues[i] = temp; swapCount++; } if (i == tempValues.length - 2 &amp;&amp; swapCount != 0) { swapCount = 0; i = -1; } } for (int item : tempValues) { stack.push(item); } System.out.println(&quot;Stack after sort: &quot; + stack.toString()); } public static void main(String[] args) { StackSorter myObj = new StackSorter(); myObj.sort(); } } StackSorter.main(null); . Stack before sort: [3, 7, 5, 1, 2, 10, 7] Stack after sort: [1, 2, 3, 5, 7, 7, 10] .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/26/Stack-Hack-2.html",
            "relUrl": "/jupyter/2023/03/26/Stack-Hack-2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Checkpoint 1 Post",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } public class Car extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Car.key = key; } public enum KeyType implements KeyTypes {title, name, year, model} // Instance data private final String name; private final int year; private final String model; /* constructor * */ public Car(String name, int year, String model) { super.setType(&quot;Car&quot;); this.name = name; this.year = year; this.model = model; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Car.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.year.equals(this.getKey())) { output += &quot;00&quot; + this.year; output = output.substring(output.length() - 2); } else if (KeyType.model.equals(this.getKey())) { output += this.model; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.model + &quot;, &quot; + this.year; } return output; } // Test data initializer public static Car[] cars() { return new Car[]{ new Car(&quot;Honda&quot;, 2016, &quot;Odyssey&quot;), new Car(&quot;Toyota&quot;, 2012, &quot;Corolla&quot;), new Car(&quot;Lexus&quot;, 2019, &quot;UX&quot;), new Car(&quot;Acura&quot;, 2016, &quot;Integra&quot;), new Car(&quot;Kia&quot;, 2023, &quot;Forte&quot;), new Car(&quot;Lamborghini&quot;, 2022, &quot;Huracan EVO&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Car[] objs = cars(); // print with title Car.setOrder(KeyType.title); Car.print(objs); // print name only Car.setOrder(KeyType.name); Car.print(objs); } } Car.main(null); public class Sport extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Sport.key = key;} public enum KeyType implements KeyTypes {title, name, numPlayers} // Instance data private final String name; private final int numPlayers; // Constructor Sport(String name, int numPlayers) { this.setType(&quot;Sport&quot;); this.name = name; this.numPlayers = numPlayers; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Sport.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.numPlayers.equals(this.getKey())) { output += &quot;00&quot; + this.numPlayers; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.numPlayers; } return output; } // Test data initializer public static Sport[] sports() { return new Sport[]{ new Sport(&quot;Soccer&quot;, 22), new Sport(&quot;Basketball&quot;, 10), new Sport(&quot;Volleyball&quot;, 12), new Sport(&quot;Tennis&quot;, 2), new Sport(&quot;Football&quot;, 22) }; } public static void main(String[] args) { // Inheritance Hierarchy Sport[] objs = sports(); // print with title Sport.setOrder(KeyType.title); Sport.print(objs); // print flavor only Sport.setOrder(KeyType.name); Sport.print(objs); // print numPlayers only Sport.setOrder(KeyType.numPlayers); Sport.print(objs); } } Sport.main(null); /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Car.setOrder(Car.KeyType.name); Sport.setOrder(Sport.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Car.cars(), Sport.sports() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( Car.cars(), Sport.sports() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . class [LREPL.$JShell$13$Car; 6 Generic: Car listed by title Car: Honda, Odyssey, 2016 Car: Toyota, Corolla, 2012 Car: Lexus, UX, 2019 Car: Acura, Integra, 2016 Car: Kia, Forte, 2023 Car: Lamborghini, Huracan EVO, 2022 class [LREPL.$JShell$13$Car; 6 Generic: Car listed by name Honda Toyota Lexus Acura Kia Lamborghini class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by title Sport: Soccer, 22 Sport: Basketball, 10 Sport: Volleyball, 12 Sport: Tennis, 2 Sport: Football, 22 class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by name Soccer Basketball Volleyball Tennis Football class [LREPL.$JShell$15$Sport; 5 Generic: Sport listed by numPlayers 22 10 12 02 22 My Generics count: 11 My Generics data: Honda Toyota Lexus Acura Kia Lamborghini Soccer Basketball Volleyball Tennis Football Mixed count: 11 Mixed data: Start Honda Toyota Lexus Acura Kia Lamborghini Soccer Basketball Volleyball Tennis Football End .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/19/Checkpoint-1.html",
            "relUrl": "/jupyter/2023/03/19/Checkpoint-1.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Generic Types and Collections Post",
            "content": "Classes and Objects: . A class is like a &quot;blueprint&quot; for creating objects. | Class attributes are variables within a class, and class methods are methods within a class. | Constructors: A constructor is essentially a special method that is ran whenever an object of a class is initialized, and is typically used to set initial object attribute values. | The constructor name has to match the class name. | All classes have constructors by default. The default constructor does not set any values in the class. | . | Access Modifiers: Access modifiers control the access level of classes, their attributes, and their methods. | Class Access Modifiers: public - class is accessible by any other class. | default - class is only accessible by any classes in the same package. | . | Attribute, Method, and Constructor Access Modifiers: public - Code is accessible for all classes. | private - Code is only accessible within the class. | default - Code is only accessible in the same package. | protected - Code is accessible in the same package and any subclasses. | . | . | Modifiers: Non-access modifiers provide different kinds of functionality regarding the behavior of classes, attributes, and methods. | Class Non-Access Modifiers: final - Class cannot be inherited by other classes. | abstract - Objects cannot be created from the class, as it can only be accessed from a subclass that inherits it. | . | Attribute, Method, and Constructor Non-Access Modifier: final - Code cannot be modified. | static - Code belongs to the class instead of an object. | abstract (methods) - Code can only be located in an abstract class. Body of code is provided in the subclass. | transient - Code is skipped over when the object containing it is serialized. | synchronized (methods) - Code is accessed one thread at a time. | volatile (attributes) - The value of code is not cached thread-locally, but is stored in the main memory. | . | Getters and Setters: Getters and Setters are typically used to provide access to private variables. | Encapsulation is basically the process of keeping sensitive data hidden or &quot;private&quot; from users. | get and set methods are typically public, allowing us to access private variables from outside the class. | Getters return the variable value, while Setters set the variable value. | get method: private String name; | public String getName() { return name; } | . | set method: private String name; | public void setName(String newName) { this.name = newName; } | . | . | . | . Linked List: . In Java, a LinkedList is very similar to an ArrayList. | A LinkedList is essentially a collection that can contain multiple variables or objects of the same type. | Since LinkedList implements the same interface (List) as ArrayList, it has similar methods. | The main difference between an ArrayList and a LinkedList: An ArrayList contains an array that stores items. If new variables are added and the array is not big enough, a new one is created to replace it. | A LinkedList basically saves items in containers, in which it has a link to the first container, and each container has a link to the next container in order. Whenever a new item is added to the list, it is placed into a new container, which is linked a container already in the list. | . | To initialize LinkedList: LinkedList&lt;Type&gt; linkedListName = new LinkedList&lt;&gt;(); | or: LinkedList&lt;Type&gt; linkedListName = new LinkedList&lt;Type&gt;(); | Notice how the object instantiation of LinkedList does not have a type parameter. | . | LinkedList methods: addFirst() - self-explanatory. | addLast() - self-explanatory. | removeFirst() - self-explanatory. | removeLast() - self-explanatory. | getFirst() - self-explanatory. | getLast() - self-explanatory. | . | A LinkedList is a linear data structure, meaning within in it, each node is connected to the previous and next node. Each node has 3 fundamental fields: prev (address of previous element), next (address of next element), and data (actual data of current element). | Elements in a LinkedList are not stored sequentially, but rather scattered and connected with links. This means a LinkedList stores 3 values in an element position. Whenever a new element is added to LinkedList, prev and next addresses are changed for some elements. | . Queue: . A queue is a type of collection that implements the First In First Out (FIFO) element ordering system. It is essentially an order list of variables or objects where elements are inserted at the end of the list and elements are deleted at the start of the list. | Generics in Java allow variable types (e.g. Strings and integers) to be parameters in methods, interfaces, and classes. Generic classes can take variable types as parameters, separated by commas. | Since Queue is an interface, we need other classes in order to directly implement it (e.g. ArrayDeque, LinkedList, and PriorityQueue). | To initialize Queue (3 different ways): Queue&lt;Type&gt; queueName = new LinkedList&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new LinkedList&lt;Type&gt;(); | Queue&lt;Type&gt; queueName = new ArrayDeque&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new ArrayDeque&lt;Type&gt;(); | Queue&lt;Type&gt; queueName = new PriorityQueue&lt;&gt;(); | or: Queue&lt;Type&gt; queueName = new PriorityQueue&lt;Type&gt;(); | Notice how the instantiations of LinkedList, ArrayDeque, and PriorityQueue do not have type parameters. | . | Important Queue Methods: add(element) - Inserts element into queue. | offer(element) - Inserts element into queue. Returns false if not successful. | element() - Returns head of queue. | peek() - Returns head of queue. Returns null if queue is empty. | remove() - Returns and removes head of queue. | poll() - Returns and removes head of queue. Returns null if queue is empty. #### Stack: #### | . | A stack is a type of collection that implements the Last In First Out (LIFO) element ordering system, where elements are added to the top of the stack and elements are removed from the top of the stack. | To initialize a stack: Stack&lt;Type&gt; stackName = new Stack&lt;&gt;(); | or: Stack&lt;Type&gt; stackName = new Stack&lt;Type&gt;(); | Notice how the object instantiation of Stack does not have a type parameter. | . | Since Stack inherits the Vector class, it has methods and properties similar to that of Vector. | Important Stack Methods: push() - Add element to top of stack. | pop() - Remove element from top of stack. | peek() - Return element at the top of the stack. | search(element) - Return the index/position of the element from the top of the stack. | empty() - Check whether or not the stack is empty. | . | . import java.util.*; public class Examples { private LinkedList&lt;Integer&gt; linkedListName; private Queue&lt;Integer&gt; queueName; private Stack&lt;Integer&gt; stackName; public Examples(int[] array) { linkedListName = new LinkedList&lt;&gt;(); queueName = new LinkedList&lt;&gt;(); stackName = new Stack&lt;&gt;(); for (int i = 0; i &lt; array.length; i++) { linkedListName.add(array[i]); queueName.add(array[i]); stackName.push(array[i]); } } public void displayExamples() { System.out.println(&quot;LinkedList:&quot;); System.out.println(&quot;--&quot;); System.out.println(&quot;Implementing get method&quot;); for (int i = 0; i &lt; linkedListName.size(); i++) { if (i == 9) { System.out.println(&quot;index &quot; + i + &quot;: &quot; + linkedListName.get(i)); } else { System.out.print(&quot;index &quot; + i + &quot;: &quot; + linkedListName.get(i) + &quot;, &quot;); } } System.out.println(&quot;Implementing set method&quot;); for (int j = 0; j &lt; linkedListName.size()/2; j++) { int lastIndex = linkedListName.size() - (j + 1); int temp = linkedListName.get(j); linkedListName.set(j, lastIndex); linkedListName.set(lastIndex, temp); } for (int element : linkedListName) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;Implementing remove method&quot;); for (int i = 0; i &lt; linkedListName.size(); i++) { if (linkedListName.get(i) % 2 != 0) { linkedListName.remove(i); } } for (int element : linkedListName) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Queue:&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Removing every element of the queue then adding it again&quot;); for (int i = 0; i &lt; queueName.size(); i++) { int temp = queueName.remove(); System.out.print(temp + &quot; &quot;); queueName.add(temp); } System.out.println(&quot;&quot;); System.out.println(&quot;Queue Size: &quot; + queueName.size()); System.out.println(&quot;&quot;); System.out.println(&quot;Stack:&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Reversing the order of a stack&quot;); String before = &quot;Before: &quot;; int[] reverseArray = new int[10]; for (int i = 0; i &lt; reverseArray.length; i++) { int temp = stackName.pop(); before += temp + &quot; &quot;; reverseArray[i] = temp; } System.out.println(before); String after = &quot;After: &quot;; for (int j = 0; j &lt; reverseArray.length; j++) { after += reverseArray[reverseArray.length - (j + 1)] + &quot; &quot;; stackName.push(reverseArray[j]); } System.out.println(after); } public static void main(String[] args) { int[] exampleArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; Examples myObj = new Examples(exampleArray); myObj.displayExamples(); } } Examples.main(null); . LinkedList: -- Implementing get method index 0: 1, index 1: 2, index 2: 3, index 3: 4, index 4: 5, index 5: 6, index 6: 7, index 7: 8, index 8: 9, index 9: 10 Implementing set method 9 8 7 6 5 5 4 3 2 1 Implementing remove method 8 6 5 4 2 Queue: Removing every element of the queue then adding it again 1 2 3 4 5 6 7 8 9 10 Queue Size: 10 Stack: Reversing the order of a stack Before: 10 9 8 7 6 5 4 3 2 1 After: 1 2 3 4 5 6 7 8 9 10 . import java.util.Queue; import java.lang.Math; import java.util.ArrayList; import java.util.Stack; public class LinkedListPractice { public void hack1() { Queue&lt;String&gt; queue1 = new LinkedList&lt;String&gt;(); String[] words = {&quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; for (String word : words) { queue1.add(word); System.out.println(displayData(queue1, true)); } for (String word: words) { String head = &quot;&quot;; for (String item : queue1) { head += item; break; } System.out.println(&quot;Dequeued data: &quot; + head); queue1.remove(); System.out.println(displayData(queue1, false)); } } public String displayData(Queue&lt;String&gt; queueName, boolean enqueue) { if (enqueue) { String data = &quot;Enqueued data: &quot;; String head = &quot;&quot;; String items = &quot;&quot;; if (queueName.size() == 0) { items = null; } else { int index = 0; for (String item : queueName) { if (index == queueName.size() - 1) { head += item; } else { index++; } items += item + &quot; &quot;; } } data += head + &quot; n&quot; + &quot;Words count: &quot; + queueName.size() + &quot;, data: &quot; + items; return data; } else { String data = &quot;&quot;; String items = &quot;&quot;; if (queueName.size() == 0) { items = null; } else { for (String item : queueName) { items += item + &quot; &quot;; } } data += &quot;Words count: &quot; + queueName.size() + &quot;, data: &quot; + items; return data; } } public void hack2() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); Queue&lt;Integer&gt; queue2 = new LinkedList&lt;Integer&gt;(); Queue&lt;Integer&gt; mergedQueue = new LinkedList&lt;Integer&gt;(); queue1.add(1); queue1.add(4); queue1.add(5); queue1.add(8); queue2.add(2); queue2.add(3); queue2.add(6); queue2.add(7); System.out.println(&quot;1st Sorted Queue:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;2nd Sorted Queue:&quot;); for (int item : queue2) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); while (queue1.size() != 0 || queue2.size() != 0) { if (queue1.peek() == null) { mergedQueue.add(queue2.remove()); } else if (queue2.peek() == null) { mergedQueue.add(queue1.remove()); } else { if (queue1.peek() &lt;= queue2.peek()) { mergedQueue.add(queue1.remove()); } else { mergedQueue.add(queue2.remove()); } } } System.out.println(&quot;Sorted Merged Queue:&quot;); for (int item : mergedQueue) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public void hack3() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); queue1.add(1); queue1.add(2); queue1.add(3); queue1.add(4); queue1.add(5); queue1.add(6); queue1.add(7); queue1.add(8); System.out.println(&quot;Queue before shuffle:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } int[] tempValues = new int[queue1.size()]; int index = 0; for (int item : queue1) { tempValues[index] = item; index++; } int queueIndex = 0; for (int item : queue1) { int randIndex = (int) (Math.random() * 7); int temp = tempValues[randIndex]; tempValues[randIndex] = tempValues[queueIndex]; tempValues[queueIndex] = temp; queueIndex++; } while (queue1.size() != 0) { queue1.remove(); } for (int value : tempValues) { queue1.add(value); } System.out.println(&quot;&quot;); System.out.println(&quot;Queue after shuffle:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public void hack4() { Queue&lt;Integer&gt; queue1 = new LinkedList&lt;Integer&gt;(); Stack&lt;Integer&gt; stack1 = new Stack&lt;Integer&gt;(); queue1.add(1); queue1.add(2); queue1.add(3); System.out.println(&quot;Queue before reverse:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); while (queue1.size() != 0) { stack1.push(queue1.remove()); } while (stack1.size() != 0) { queue1.add(stack1.pop()); } System.out.println(&quot;Queue after reverse:&quot;); for (int item : queue1) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } public static void main(String[] args) { LinkedListPractice myObj = new LinkedListPractice(); System.out.println(&quot;Hack 1:&quot;); System.out.println(&quot;-&quot;); myObj.hack1(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 2:&quot;); System.out.println(&quot;-&quot;); myObj.hack2(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 3:&quot;); System.out.println(&quot;-&quot;); myObj.hack3(); System.out.println(&quot;&quot;); System.out.println(&quot;Hack 4:&quot;); System.out.println(&quot;-&quot;); myObj.hack4(); } } LinkedListPractice.main(null); . Hack 1: - Enqueued data: seven Words count: 1, data: seven Enqueued data: slimy Words count: 2, data: seven slimy Enqueued data: snakes Words count: 3, data: seven slimy snakes Enqueued data: sallying Words count: 4, data: seven slimy snakes sallying Enqueued data: slowly Words count: 5, data: seven slimy snakes sallying slowly Enqueued data: slithered Words count: 6, data: seven slimy snakes sallying slowly slithered Enqueued data: southward Words count: 7, data: seven slimy snakes sallying slowly slithered southward Dequeued data: seven Words count: 6, data: slimy snakes sallying slowly slithered southward Dequeued data: slimy Words count: 5, data: snakes sallying slowly slithered southward Dequeued data: snakes Words count: 4, data: sallying slowly slithered southward Dequeued data: sallying Words count: 3, data: slowly slithered southward Dequeued data: slowly Words count: 2, data: slithered southward Dequeued data: slithered Words count: 1, data: southward Dequeued data: southward Words count: 0, data: null Hack 2: - 1st Sorted Queue: 1 4 5 8 2nd Sorted Queue: 2 3 6 7 Sorted Merged Queue: 1 2 3 4 5 6 7 8 Hack 3: - Queue before shuffle: 1 2 3 4 5 6 7 8 Queue after shuffle: 6 5 1 7 8 2 4 3 Hack 4: - Queue before reverse: 1 2 3 Queue after reverse: 3 2 1 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/16/Generic-Types-Collections.html",
            "relUrl": "/jupyter/2023/03/16/Generic-Types-Collections.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Data Types Post",
            "content": "2015 Practice Exam MCQ: 34/39 . Test Corrections: . Generate random value of number cubes | Original Answer: C. Correct Answer: E. Math.random() generates a number between 0 and 1, 1 exclusive. By multiplying Math.random() by 6 and adding 1 to it, we are able to generate a number between 1 and 6, both inclusive. | . showMe method with int parameter | Original Answer: B. Correct Answer: A. The showMe method calls itself recursively until arg is equal to 10 (It calls itself with a value that is one more than arg each iteration). The recursion ends when the method prints out &quot;10.&quot; | . Loop that prints nothing | Original Answer: C. Correct Answer: E. In condition 1, nothing will print out since the base case is already not satisfied. In condition 2, the initialized value of x is not even so nothing will be printed. In condition 3, since x starts off as 1 and always increments by 2, nothing will be printed since x is never even. | . Methods start and changeIt aliases | Original Answer: B. Correct Answer: E. In this case, the changeIt method creates copies of the parameters, instead actually changing the values of them. Since we are referencing the original variable names, the original variable values will be printed instead of the values of the new variables. | . Consider the following code segment type question | Original Answer: A. Correct Answer: C. When the set method is called, it returns the original value that was at the index, instead of the new one. Thus, the first for loop will print out &quot;Alex Bob Carl&quot;, as those are the original values before they are changed. The second for loop will print out &quot;Alex Alex Alex&quot;, since it just prints out the current elements in the ArrayList students. | . public class dataTypes { public static void main(String[] args) { System.out.println(&quot;Integers:&quot;); System.out.println(&quot;&quot;); int[] intArray = {1, 2, 3, 4, 5, 6, 7, 8}; for (int i = 0; i &lt; intArray.length; i++) { System.out.print(intArray[i] + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Doubles:&quot;); System.out.println(&quot;--&quot;); int a = 10; int b = 7; System.out.println(&quot;No Casting: 10/6 = &quot; + a/b); System.out.println(&quot;With Casting: 10/6 = &quot; + (double) a/b); System.out.println(&quot;&quot;); System.out.println(&quot;Booleans:&quot;); System.out.println(&quot;&quot;); boolean c = true; boolean d = false; System.out.println(c); System.out.println(d); System.out.println(c || d); System.out.println(c &amp;&amp; d); System.out.println(!(c &amp;&amp; d) || (c &amp;&amp; !d)); System.out.println(&quot;&quot;); System.out.println(&quot;Characters:&quot;); System.out.println(&quot;--&quot;); char[] partialAlphabet = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;}; for (char alpha : partialAlphabet) { Character newAlpha = alpha; System.out.print(newAlpha + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;&quot;); System.out.println(&quot;Strings:&quot;); System.out.println(&quot;--&quot;); String phrase = &quot;Hello, World!&quot;; System.out.println(phrase); phrase = phrase.substring(7, phrase.length()); System.out.println(phrase); for (int j = 0; j &lt; phrase.length(); j++) { System.out.print(phrase.charAt(j) + &quot; &quot;); } } } dataTypes.main(null); . Integers: 1 2 3 4 5 6 7 8 Doubles: -- No Casting: 10/6 = 1 With Casting: 10/6 = 1.4285714285714286 Booleans: true false true false true Characters: -- a b c d e f g Strings: -- Hello, World! World! W o r l d ! . Questions . . What are methods and control structures? | Methods in Java serve as functions, which when called, perform the certain actions written within its code block. Control structures are programming blocks that are used to alter the linear path that a program follows. . Control Structures AP FRQ | . Look at Diverse Arrays and Matrix in Teacher code and see if you think this is Methods and Control structures. | Matrix.java contains a variety of methods that change the contents of a given matrix, and a variety of for loops that serve as iteration control structures, used to iterate through the contents of a matrix. DiverseArray.java contains a method that checks if an array has all distinct values, and it does so by iterating through a given array with both a conventional and enhanced for loop. . Look at Diverse Arrays and Matrix in Teacher code and see if you think this fits Data Types. | In Matrix.java, we can see a variety of data types, as there are 2-dimensional matrices that contain primitive integer type data values. The same goes for DiverseArray.java, which contains both 1-dimensional and 2-dimensional arrays that contain primitive integer data type values. . Describing Math.random | By default, Math.random returns a value between 0 and 1, 1 exclusive. Generate a random number between a minimum value and maximum value, both inclusive, write Math.random() * (max - min) + min; . Review DoNothingByValue, what is key knowledge here? | When you want to change the values of variables passed to a method, you need to make changes to them directly, instead of creating reference variables with the new values. . Review IntByReference, what is key knowledge here? | Wrapper classes can be used to turn primitive types into objects that can be called. Using wrapper classes, methods can be performed on primitive types. . Define &quot;Method and Control Structures&quot;. To the Teacher, the Menu Code has the most work of methodDataTypes files that is related to the &quot;Methods and Control Structures&quot; topic. Such exploration would begin by asking &quot;describe Java Methods and Control structures&quot;. Are instances of MenuRow and Runnable data types, control structures? Does Driver have control structures, enumerate them. | Try, catch, and runnable are all used to prevent errors from negatively affecting the program. When an error happens, the program presents a custom error message that does not take up too much space or time. Menu and Driver both contain control structures and data types, since they both integrate wrapper classes and object types, as well as use for loops and try-catch to display outputs and control the flow of the program. . . Users of a website are asked to provide a review of the website at the end of each visit. Each review, represented by an object of the Review class, consists of an integer indication the user&#39;s rating of the website and an optional String comment field. The comment field in a Review object ends with a period (&quot;.&quot;), exclamation point (&quot;!&quot;), or letter, or is a String of length 0 if the user did not enter a comment. . a. Write the ReviewAnalysis method getAverageRating, which returns the average rating (arithmetic mean) of all elements of allReviews. . b. Write the ReviewAnalysis method collectComments, which collects and formats only comments that contain an exclamation point. The method returns an ArrayList of String objects containing copies of user comments from allReviews that contain an exclamation point, formatted as follows. An empty ArrayList is returned if no comment in allReviews contains an exclamation point. . The String inserted into the ArrayList to be returned begins with the index of Review in allReviews. | The index is immediately followed by a hyphen (&quot;-&quot;). | The hyphen is followed by a copy of the original comment. | The String must end with either a period or an exclamation point. If the original comment from allReviews does not end in either a period or an exclamation point, a period is added. | . | // Review class for initializing individual Review objects from users public class Review { private int rating; private String comment; // Review constructor for setting rating and comment values public Review(int r, String c) { rating = r; comment = c; } // Method for getting rating data from another class public int getRating() { return rating; } // Method for getting comment data from another class public String getComment() { return comment; } } // ReviewAnalysis class for taking all of the user reviews and making analyses about them public class ReviewAnalysis { private Review[] allReviews; private ArrayList&lt;String&gt; sortedComments; // Constructor for initializing the allReviews array, which contains all user Review objects public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } // Method for finding the average rating given by all of the users, which it does by adding all of the ratings up, // then dividing the sum by the number of reviews public double getAverageRating() { double averageRating = 0; for (Review review : allReviews) { averageRating += review.getRating(); } averageRating /= allReviews.length; return averageRating; } // Method for sorting all of the comments that contain an exclamation point, which it does by iterating through the allReviews array, // then looping through the characters of the selected Review object&#39;s comment property, and adds the comment if it contains an exclamation point, // adding a period to the end of it if it does not already end with an exclamation point or period public ArrayList&lt;String&gt; collectComments() { sortedComments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String comment = allReviews[i].getComment(); String finalComment = &quot;&quot;; for (int j = 0; j &lt; comment.length(); j++) { if (comment.charAt(j) == &#39;!&#39;) { finalComment += i + &quot;-&quot; + comment; if (comment.charAt(comment.length() - 1) != &#39;!&#39; &amp;&amp; comment.charAt(comment.length() - 1) != &#39;.&#39;) { finalComment += &#39;.&#39;; } break; } } sortedComments.add(finalComment); } return sortedComments; } } // Main class for presenting test cases public class Main { public static void main(String[] args) { Review firstReview = new Review(4, &quot;Good! Thx&quot;); Review secondReview = new Review(3, &quot;OK site&quot;); Review thirdReview = new Review(5, &quot;Great!&quot;); Review fourthReview = new Review(2, &quot;Poor! Bad.&quot;); Review fifthReview = new Review(3, &quot;&quot;); Review[] reviews = {firstReview, secondReview, thirdReview, fourthReview, fifthReview}; ReviewAnalysis myObj = new ReviewAnalysis(reviews); System.out.println(myObj.getAverageRating()); for (String sortedComment : myObj.collectComments()) { System.out.print(sortedComment + &quot; &quot;); } } } Main.main(null); . 3.4 0-Good! Thx. 2-Great! 3-Poor! Bad. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/07/Data-Types.html",
            "relUrl": "/jupyter/2023/03/07/Data-Types.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Extra Seed Post",
            "content": "import java.util.Scanner; import java.util.ArrayList; public class seedExtra { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); int a = userInput.nextInt(); int b = userInput.nextInt(); int c = a + b; ArrayList&lt;Integer&gt; binary = new ArrayList&lt;Integer&gt;(); int sum = 0; for (int i = 7; i &gt;= 0; i--) { sum += Math.pow(2, i); if (sum == c) { binary.add(1); for (int j = i - 1; j &gt;= 0; j--) { binary.add(0); } break; } else if (sum &gt; c) { sum -= Math.pow(2, i); binary.add(0); } else if (sum &lt; c) { binary.add(1); } } String finalAnswer = &quot;&quot;; int zeroCount = 0; for (int x = 0; x &lt; binary.size(); x++) { finalAnswer += binary.get(x); } for (int y = 0; y &lt; finalAnswer.length(); y++) { if (finalAnswer.charAt(y) == &#39;1&#39;) { finalAnswer = finalAnswer.substring(y, finalAnswer.length()); break; } else if (y == finalAnswer.length() - 1) { finalAnswer = &quot;0&quot;; break; } } System.out.println(finalAnswer); } } seedExtra.main(null); . 1100100 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2023/03/06/Seed-Extra.html",
            "relUrl": "/jupyter/2023/03/06/Seed-Extra.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Tri 2 Test Corrections 2",
            "content": "Tri 2 Test Corrections 2: . Question 15 Original Answer: A. Correct Answer: E. | A is incorrect because in a string that has one or more occurrences of the letter “A,” the statement would discard the portion of str from the first occurence of “A” to the end. E is correct because the statement selects characters of str starting one character after pos. | . | Question 25 Original Answer: D. Correct Answer: B. | D is incorrect because this would be the result if the loop condition was k &gt; 1 instead of k &gt; 0. B is correct the provided method contains a for loop with a loop control variable k, which starts at the last index of animals, decrements by 1 each iteration, until k is equal to 0. | . | Question 35 Original Answer: D. Correct Answer: C. | D is incorrect because this would be the result if the print statement given printed the value at index k instead of the index itself. C is correct because it is the result when the print statement prints the correct index. | . | Question 38 Original Answer: C. Correct Answer: D. | C is incorrect because this would be the result if the loop control variable in the for loop was str.length() instead of str.length() - 1. D is correct because when i is 4, temp is assigned l, when i is 3, p is appended to temp, when i is 2, p is appended to temp, and finally when i is 1, a is appended to temp, leading to a final result String of “lppa.” | . |",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2023/01/30/Tri-2-Test-Corrections-2.html",
            "relUrl": "/2023/01/30/Tri-2-Test-Corrections-2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Title",
            "content": "class Solution { public String removeDuplicates(String s) { String finalString = s; int stringLength = finalString.length(); while (stringLength &gt; 1) { for (int i = 0; i &lt; finalString.length() - 1; i++) { if (finalString.charAt(i) == finalString.charAt(i + 1)) { finalString = finalString.substring(0 , i) + finalString.substring(i + 2, finalString.length()); stringLength -= 2; } } } return finalString; } public static void main(String[] args) { Solution myObj = new Solution(); System.out.println(myObj.removeDuplicates(&quot;abbaca&quot;)); } } Solution.main(null); . aaca ca ca ca . public class Main { public static void main(String[] args) { int[] numbers = {5, 12, 8, 2, 91, 23, 16, 56, 38, 72}; int swapCount = 0; for (int i = 0; i &lt; numbers.length - 1; i++) { if (numbers[i] &gt; numbers[i + 1]) { int temp = numbers[i + 1]; numbers[i + 1] = numbers[i]; numbers[i] = temp; swapCount++; } if (i == numbers.length - 2 &amp;&amp; swapCount != 0) { swapCount = 0; i = -1; } } for (int number : numbers) { System.out.println(number); } } } Main.main(null); . 2 5 8 12 16 23 38 56 72 91 . public class Country { // properties } public class Main { // properties, methods, and ArrayList public static void main(String[] args) { } } public void Pyramid(int n) { for (int i = 1; i &lt;= n; i++) { System.out.println(&quot;*&quot;); System.out.println(); Pyramid(n - 1); } } Pyramid(10); public void drawLine(int n) { for (int i = 1; i &lt;= n; i++) { System.out.print(&quot;*&quot;); System.out.println(); drawLine(n - 1); } } drawLine(10); Main.main(null); . 0 1 2 3 4 5 6 7 8 9 10 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/12/19/Test-Code.html",
            "relUrl": "/2022/12/19/Test-Code.html",
            "date": " • Dec 19, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Recursion HW Post",
            "content": "Notes . A recursive method is basically a method that calls itself. It usually contains a case that halts recursion and another that continues recursion. | Each recursive call has its own local variables, and parameter values check the progress of a recursion process. | A recursion is essentially another form of iteration. | Recursion is typically used to traverse through Strings, arrays, and ArrayLists. | A merge sort utilizes a divide and conquer algorithm to sort ArrayLists. It first divides the ArrayList into halves, then calls itself in both halves to sort them, and finally combines them when they are sorted. | Recursion trees are used to visualize each recursive case for recursion code. | There are 2 main cases in recursion. The base case serves as the lowest level condition for which recursion will halt. The recursive case continuously calls the method itself at lower levels until the base case is reached. | . public class Recursion { public int fac(int num) { if (num == 1) { return 1; } else { return num * fac(num - 1); } } public static void main(String[] args) { Recursion myObj = new Recursion(); System.out.println(&quot;1! = &quot; + myObj.fac(1)); System.out.println(&quot;2! = &quot; + myObj.fac(2)); System.out.println(&quot;3! = &quot; + myObj.fac(3)); System.out.println(&quot;4! = &quot; + myObj.fac(4)); } } Recursion.main(null); . 1! = 1 2! = 2 3! = 6 4! = 24 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/15/Recursion-HW.html",
            "relUrl": "/jupyter/2022/12/15/Recursion-HW.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "2019 FRQ 4 Post",
            "content": "The LightBoard class models a two-dimensional display of lights, where each light is either on or off, as represented by a Boolean value. You will implement a constructor to initialize the display and a method to evaluate a light. . public class LightBoard { // 2D array storing all of the boolean light values (true indicates a light is on, while false indicates a light is off) private boolean[][] lights; // Constructor that initializes all of the random boolean values in the 2D array. Each light has a 40% chance of being on public LightBoard(int numRows, int numCols) { lights = new boolean[numRows][numCols]; for (int i = 0; i &lt; numRows; i++) { for (int j = 0; j &lt; numCols; j++) { int randNumber = (int) Math.floor(Math.random() * 10) + 1; // Use of ternary operator to concise code boolean boolValue = (randNumber &lt;= 4) ? true : false; lights[i][j] = boolValue; } } } // boolean method that returns false if the selected light is on and if the number of lights that are on in its column is even // returns true if the selected light is off and if the number of lights that are on in its column is divisible by 3 (Note that 0 is divisible by any number except itself) // returns lightStatus if the previous 2 conditions are not met public boolean evaluateLight(int row, int col) { boolean lightStatus = lights[row][col]; int lightOnCount = 0; for (int i = 0; i &lt; lights[col].length; i++) { if (lights[i][col] == true) { lightOnCount++; } } if (lightStatus == true &amp;&amp; lightOnCount % 2 == 0) { return false; } else if (lightStatus == false &amp;&amp; lightOnCount % 3 == 0) { return true; } return lightStatus; } // main tester method for running the code in the LightBoard class public static void main(String[] args) { LightBoard myObj = new LightBoard(4, 4); for (int x = 0; x &lt; myObj.lights.length; x++) { for (int y = 0; y &lt; myObj.lights[x].length; y++) { System.out.print(myObj.lights[x][y] + &quot; &quot;); } System.out.println(&quot;&quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;evaluateLight method output: &quot; + myObj.evaluateLight(1, 1)); } } LightBoard.main(null); . false false false false true true false false false false true true false false true false evaluateLight method output: true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/08/LightBoard.html",
            "relUrl": "/jupyter/2022/12/08/LightBoard.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Two Dimensional Arrays HW Post",
            "content": "Notes: . A 2D array is essentially an array of arrays. To elaborate, it is a type of multidimensional array. | To initialize a 2D array, specify the type, follow it with &quot;[][]&quot;, then follow that with the name of the 2D array (e.g. int[][] numbers) | Method 1 of initializing 2D arrays: int[][] numbers1 = | When you initialize a 2D array using method 1, each row can have a different number of columns, or in other words, each array within the array can have a different number of values. | Method 2 of initializing 2D arrays: int[][] numbers2 = new int[4][4]; | Normally, to iterate through a 2D array, you use a for loop, which iterates through the rows, as well as a nested for loop, which iterates through the columns. | To access and change elements of 2D arrays, you would use indices to specify which row and which column. | . Homework: . Create a class for 2D array learning. | Create a method too initialize a 2D array with arbitrary values | Create a method to reverse the 2D array and print out the values | Create a method that asks for the input of a position and it returns the corresponding value | Create a method that multiplies each value in a row and then adds all the products together | Create a new object to test out each method in the main function | . // import Scanner library to take in user input import java.util.Scanner; // Class containing all of the 2D array methods public class TwoDimensionalArrays { public int[][] numberList; public int[][] numberListReverse; Scanner userInput = new Scanner(System.in); // Constructor for initializing all of the randomly generated values in the 4 by 4 2D array public TwoDimensionalArrays() { numberList = new int[4][4]; numberListReverse = new int[4][4]; for (int a = 0; a &lt; numberList.length; a++) { for (int b = 0; b &lt; numberList[a].length; b++) { int randNum = (int) Math.floor(Math.random() * 101); numberList[a][b] = randNum; numberListReverse[a][b] = randNum; } } } // Method for printing a 2D array public void printArray(int[][] numberListPrint) { for (int x = 0; x &lt; numberListPrint.length; x++) { for (int y = 0; y &lt; numberListPrint[x].length; y++) { System.out.print(numberListPrint[x][y] + &quot; &quot;); } System.out.println(&quot;&quot;); } } // Method for reversing the rows and columns of the original 2D array public void reverseArray() { for (int i = 0; i &lt; numberListReverse.length; i++) { for (int j = 0; j &lt; (numberListReverse[i].length)/2; j++) { int numOfColumns = numberListReverse[i].length; int temp = numberListReverse[i][j]; numberListReverse[i][j] = numberListReverse[i][numOfColumns - (j + 1)]; numberListReverse[i][numOfColumns - (j + 1)] = temp; } } for (int i = 0; i &lt; (numberListReverse.length)/2; i++) { int numOfRows = numberListReverse.length; int[] temp = numberListReverse[i]; numberListReverse[i] = numberListReverse[numOfRows - (i + 1)]; numberListReverse[numOfRows - (i + 1)] = temp; } printArray(numberListReverse); } // Method for getting the value of the original 2D array at the inputted coordinates public void getCorrespondingValue() { System.out.println(&quot;Choose the desired row (Starting with 0):&quot;); int rowNumber = userInput.nextInt(); System.out.println(&quot;Choose the desired column (Starting with 0):&quot;); int columnNumber = userInput.nextInt(); int correspondingValue = numberList[rowNumber][columnNumber]; System.out.println(&quot;The corresponding value to the position you entered in the 2D array numberList is: &quot; + correspondingValue); } // Method for multiplying each value of a row together, then adding all of the products together public void addProducts() { int sum = 0; for (int i = 0; i &lt; numberList.length; i++) { int product = 1; for (int j = 0; j &lt; numberList[i].length; j++) { product *= numberList[i][j]; } sum += product; } System.out.println(&quot;The sum of all products in the original 2D array is: &quot; + sum); } } // Main class that contains the main tester function class Main { // Tester function to run all of the code outputs public static void main(String[] args) { // TwoDimensionalArrays object used for accessing and running the 2D array methods TwoDimensionalArrays myObj = new TwoDimensionalArrays(); System.out.println(&quot;Original randomly generated 2D array:&quot;); System.out.println(&quot;-&quot;); myObj.printArray(myObj.numberList); System.out.println(&quot;&quot;); System.out.println(&quot;Reversed 2D array:&quot;); System.out.println(&quot;&quot;); myObj.reverseArray(); System.out.println(&quot;&quot;); System.out.println(&quot;Enter a position to get a corresponding value:&quot;); System.out.println(&quot;-&quot;); myObj.getCorrespondingValue(); System.out.println(&quot;&quot;); System.out.println(&quot;Sum of all row products of the original 2D array:&quot;); System.out.println(&quot;-&quot;); myObj.addProducts(); System.out.println(&quot;&quot;); } } Main.main(null); . Original randomly generated 2D array: - 19 79 24 17 96 84 91 18 89 97 94 77 13 59 85 81 Reversed 2D array: 81 85 59 13 77 94 97 89 18 91 84 96 17 24 79 19 Enter a position to get a corresponding value: - Choose the desired row (Starting with 0): Choose the desired column (Starting with 0): The corresponding value to the position you entered in the 2D array numberList is: 19 Sum of all row products of the original 2D array: - The sum of all products in the original 2D array is: 81587689 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/06/Two-Dimensional-Arrays-HW.html",
            "relUrl": "/jupyter/2022/12/06/Two-Dimensional-Arrays-HW.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "ArrayLists HW Post",
            "content": "Notes: . An ArrayList is a reference type that is mutable (changeable) and contains object references. | To initialize an ArrayList, write: ArrayList courses = new ArrayList();&lt;/li&gt; To add an element to a particular index in an ArrayList, use the add(int index, element); method. To add all elements in a specified collection to an ArrayList, use the addAll(int index, Collection collection); method. | To get the size of an ArrayList, use the size(); method. | To remove an element of an ArrayList at a particular index, use the remove(element or int index); method. | To retrieve the element at a particular index of an ArrayList, use the get(int index); method. | Searching involves locating data within linear structures (e.g. arrays, lists, stacks, etc.). Searching a linear structure can be done with control structures, which include sequential, selection, and iteration. | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Homework: . Create an ArrayList that includes 2 of the 4 factors listed below. . Sort an ArrayList in descending order and swap the first and last elements | Find and display the hashCode of an ArrayList before and after being sorted | Return &quot;ascending&quot; if the list is sorted in ascending order, return &quot;descending&quot; if it is descending, and return &quot;neither&quot; if neither | Replace 3 elements in an ArrayList with another ArrayList and reverse the order of the new list | . // Import Java Collections library import java.util.Collections; // Class containing ArrayList methods public class ArrayLists { public ArrayList&lt;Integer&gt; numberList; public ArrayList&lt;Integer&gt; numberList2; Scanner userInput = new Scanner(System.in); // Constructor for initializing ArrayList elements public ArrayLists() { numberList = new ArrayList&lt;Integer&gt;(); numberList.add(1); numberList.add(10); numberList.add(7); numberList.add(8); numberList2 = new ArrayList&lt;Integer&gt;(); numberList2.add(3); numberList2.add(9); numberList2.add(21); } // Method for sorting the ArrayList in descending order and swapping the first and last elements. public void descend() { ArrayList&lt;Integer&gt; numberListDescend = new ArrayList&lt;Integer&gt;(); numberListDescend.addAll(numberList); Collections.sort(numberListDescend, Collections.reverseOrder()); int temp = numberListDescend.get(0); numberListDescend.set(0, numberListDescend.get(numberListDescend.size() - 1)); numberListDescend.set(numberListDescend.size() - 1, temp); System.out.println(&quot;Descending ArrayList with the first and last elements swapped:&quot;); for (int item : numberListDescend) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); getHashCode(numberListDescend); } // Method that gets the hash code of the ArrayList before and after it is sorted in descending order public void getHashCode(ArrayList&lt;Integer&gt; numberListDescend) { System.out.println(&quot;Hash code of ArrayList before sorting: &quot; + numberList.hashCode()); System.out.println(&quot;Hash code of ArrayList after sorting: &quot; + numberListDescend.hashCode()); } // Check if given ArrayList is in ascending order public boolean isAscending() { for (int i = 0; i &lt; numberList.size() - 1; i++) { if (numberList.get(i) &gt; numberList.get(i + 1)) { return false; } } return true; } // Check if given ArrayList is in descending order public boolean isDescending() { for (int i = 0; i &lt; numberList.size() - 1; i++) { if (numberList.get(i) &lt; numberList.get(i + 1)) { return false; } } return true; } // Method for identifying ArrayList as either ascending, descending, or neither public void sortCheck() { if (isAscending() == true) { System.out.println(&quot;ArrayList numberList is ascending&quot;); } else if (isDescending() == true) { System.out.println(&quot;ArrayList numberList is descending&quot;); } else { System.out.println(&quot;ArrayList numberList is neither ascending nor descending&quot;); } } // Method that replaces 3 elements of an ArrayList with elements of another ArrayList, then reverses the former ArrayList public void replacement() { ArrayList&lt;Integer&gt; numberListReplacement = new ArrayList&lt;Integer&gt;(); numberListReplacement.addAll(numberList); numberListReplacement.set(0, numberList2.get(0)); numberListReplacement.set(1, numberList2.get(1)); numberListReplacement.set(2, numberList2.get(2)); Collections.reverse(numberListReplacement); System.out.println(&quot;ArrayList with 3 values replaced and is reversed:&quot;); for (int item : numberListReplacement) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); } } // Main class for running code class Main { // Tester function for visualizing outputs public static void main(String[] args) { ArrayLists myObj = new ArrayLists(); System.out.println(&quot;Original ArrayList:&quot;); for (int item : myObj.numberList) { System.out.print(item + &quot; &quot;); } System.out.println(&quot;&quot;); myObj.descend(); myObj.sortCheck(); myObj.replacement(); } } Main.main(null); . Original ArrayList: 1 10 7 8 Descending ArrayList with the first and last elements swapped: 1 8 7 10 Hash code of ArrayList before sorting: 963147 Hash code of ArrayList after sorting: 961227 ArrayList numberList is neither ascending nor descending ArrayList with 3 values replaced and is reversed: 8 21 9 3 . &lt;/div&gt; | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/12/05/ArrayLists-HW.html",
            "relUrl": "/jupyter/2022/12/05/ArrayLists-HW.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Vocabulary Part 4 Post",
            "content": "Subclass Constructor and super Keywords: Since constructors are not members, they are not inherited by the subclasses. However, the constructor of the superclass can be invoked from the subclass. The super keyword makes this possible, as it refers to superclass objects. It can be used to call superclass methods, as well as access the superclass constructor. | Method Overloading: A feature that allows a class to have multiple method with the same name, but they each have to have different parameters. | Method Overriding: A feature that occurs when a subclass has a method with the same name as a method in the superclass. Essentially, the subclass implements a method declared by the superclass. | Abstract Class and Abstract Method: An abstract class is a type of restricted class that cannot be be used to create objects. To access it, it has to be inherited from another class. An abstract method can only be used in an abstract class, and it does not comprise of a body. The body of an abstract method is provided by the subclass that inherits it. | toString(), equals(), and hashCode() standard methods: toString() converts an object variable into a string. equals() is typically used to check for equality between two string variables. hashCode() returns the integer hash code value of an object. | Object Late Binding: Also known as dynamic linkage, late binding occurs when the name of the method being called upon an object is looked up at runtime. | Polymorphism: Referring to &quot;many forms&quot;, polymorphism occurs when there are many classes that relate to each other by inheritance. Polymorphism generally involves using inherited attributes and methods to perform different kinds of tasks among different subclasses. | Big O Notation: A mathematical notation that deals with the limiting behavior of a function when the argument goes toward a particular value or infinity. | . public class VocabFour { int a; public VocabFour() { a = 7; } public void methodOne() { System.out.println(&quot;Method one works!&quot;); } public void methodOne(int i) { System.out.println(&quot;Method one with integer &quot; + i + &quot; works!&quot; ); } public void methodTwo() { System.out.println(&quot;Superclass method two works!&quot;); } } class SubVocabFour extends VocabFour { // Method overriding public void methodTwo() { // super keyword super.methodTwo(); System.out.println(&quot;Subclass method two works!&quot;); } public static void main(String[] args) { SubVocabFour myObj = new SubVocabFour(); // Method overloading myObj.methodOne(); myObj.methodOne(7); myObj.methodTwo(); Integer num = 7; num.toString(); System.out.println(&quot;toString() method: &quot; + num.getClass()); String one = &quot;Sup&quot;; String two = &quot;Sup&quot;; System.out.println(&quot;equals() method: &quot; + one.equals(two)); System.out.println(&quot;hashCode() method for String variable two: &quot; + two.hashCode()); } } SubVocabFour.main(null); . Method one works! Method one with integer 7 works! Superclass method two works! Subclass method two works! toString() method: class java.lang.Integer equals() method: true hashCode() method for String variable two: 83502 . // Abstract class and method public abstract class AbsVocabFour { public abstract void printMessage(); } // Child class inherits the abstract class defines body for the abstract method class SubAbsVocabFour extends AbsVocabFour { public void printMessage() { System.out.println(&quot;Abstract message successful!&quot;); } public static void main(String[] args) { SubAbsVocabFour myObj = new SubAbsVocabFour(); myObj.printMessage(); } } SubAbsVocabFour.main(null); . Abstract message successful! . // Polymorphism class Sport { public void typeOfBall() { System.out.println(&quot;The sport uses this kind of ball&quot;); } } class Basketball extends Sport { public void typeOfBall() { System.out.println(&quot;The sport uses a basketball&quot;); } } class Soccer extends Sport { public void typeOfBall() { System.out.println(&quot;The sport uses a soccer ball&quot;); } } class Main { public static void main(String[] args) { Sport mySport = new Sport(); // Late object binding Sport myBasketball = new Basketball(); Sport mySoccer = new Soccer(); mySport.typeOfBall(); myBasketball.typeOfBall(); mySoccer.typeOfBall(); } } Main.main(null); . The sport uses this kind of ball The sport uses a basketball The sport uses a soccer ball .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-4.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-4.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Vocabulary Part 3 Post",
            "content": "Accessor Methods: A method that fetches private data that is stored in an object. This method is related to &quot;getting&quot; data. | Mutator Methods: A method that controls changes to a variable. This method is related to &quot;setting&quot; data. Usually, a setter method is accompanied by a getter method. | Static Variables and Class Variables: A static variable is a variable that has been statically allocated, which means that its lifetime is the entire run of the program. A class variable is a variable that is defined in a class in which only a single copy exists, regardless of how many instances of objects of that class exist. | Public, Private, and Protected Access Modifiers: The public access modifier makes it so that the code is accessible for all classes. The private access modifier makes it so that the code is only accessible within the declared class. The protected access modifier makes it so that the code is only accessible in the same package and subclasses. | Static Methods and Class Methods: A static method is a method that can be called directly, without the need of creating an object of the class the static method is in. A class method is a method that is bound to a class instead of its object. It can be called by both a class and an object. | this Keyword: The this keyword is a reference variable that refers to the current object in a method or constructor. | main method and tester methods: The main method serves as an entry point for executing a Java program. It can contain code and call methods to execute. Tester methods are basically instances of main methods being used. | Inheritance: An OOP concept that allows subclasses to acquire the properties of a superclass. With inheritance, children classes can inherit the features of a parent class. | . public class VocabThree { // Initialized private int variable private int num; // Accessor method public int getNum() { return num; } // Mutator method public void setNum(int numInput) { // this keyword this.num = numInput; } // Static variable static int staticVar = 7; // Class variable public int classVar = 7; // Protected variable protected int protectedVar = 7; //Static method static void runStatic() { System.out.println(&quot;Static method is working!&quot;); } //Class method public void runClass() { System.out.println(&quot;Class method is working!&quot;); } // main/tester method public static void main(String[] args) { // Create an object to access class variables VocabThree myObj = new VocabThree(); System.out.println(&quot;Printing Static Variable: &quot; + staticVar); System.out.println(&quot;Printing Class Variable: &quot; + myObj.classVar); runStatic(); myObj.runClass(); } } VocabThree.main(null); . Printing Static Variable: 7 Printing Class Variable: 7 Static method is working! Class method is working! . // Inheritance class SubVocabThree extends VocabThree { // main/tester method public static void main(String[] args) { // Running inherited class method SubVocabThree myObj = new SubVocabThree(); myObj.runClass(); } } SubVocabThree.main(null); . Class method is working! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-3.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-3.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Vocabulary Part 2 Post",
            "content": "Comparing Numbers: To compare 2 numbers in Java, we mainly use the &gt;, &lt;, and == operators. == Checks if 2 numbers are equal to each others. &gt; checks if the first number is greater than the second number. &lt; checks if the second number is greater than the first number. | Comparing Strings: To compare 2 strings in Java, we mainly use the equals() and compareTo() method. The equals() method checks if 2 strings are equal to each other, and the compareTo() method compares string values lexicographically. | Comparing Objects: To compare 2 objects in Java, we mainly use the equals() method to check for equality between 2 objects. | For Loop and Enhanced For Loop: A for loop basically iterates through a given group of statements multiple times, and keeps running as long as the set condition evaluates to true. A for loop generally has some kind of incrementing in one of its parameter. An enhanced for loop as also known as a for-each loop, which is a type of control flow statement that iterates through each element of a data collection (e.g. arrays). | While Loop vs. Do-While Loop: A while loop executes a given group of statements multiple times as long as the boolean condition is met, and a do-while loop is also used to do the same thing, although it executes at least once, even if the boolean condition is not met. | Nested Loop: A nested loop is a loop statement inside another loop statement, or in other words, an inner loop statement within the body of an outer loop statement. It is typically used to print dimensions as in rows and loops. | Class Creation: In Java, a class is user-defined blueprint that is used to create objects. To create a class, write &quot;class ClassName {}.&quot; The naming convention for creating classes in Java is generally to capitalize the first letter of each word. | Constructor: A constructor is a special method in Java that is used to initialize values in objects, as it is called whenever an object of a class is created. To create a constructor, write &quot;public ClassName(){}.&quot; | . public class VocabTwo { public static void main(String[] args) { System.out.println(&quot;Comparing Numbers:&quot;); int a = 5; int b = 10; int c = 3; System.out.println(a == a); System.out.println(a &lt; b); System.out.println(a &gt; c); System.out.println(&quot;&quot;); System.out.println(&quot;Comparing Strings:&quot;); String string1 = &quot;Hello World&quot;; String string2 = &quot;Hello!&quot;; System.out.println(string1.equals(string2)); System.out.println(string1.compareTo(string2)); System.out.println(&quot;&quot;); System.out.println(&quot;Comparing Objects&quot;); Integer int1 = new Integer(7); Integer int2 = new Integer(7); Integer int3 = new Integer(8); System.out.println(int1.equals(int2)); System.out.println(int1.equals(int3)); System.out.println(&quot;&quot;); System.out.println(&quot;For Loop and Enhanced For Loop:&quot;); for (int i = 0; i &lt; 10; i++) { System.out.print(i + &quot; &quot;); } System.out.println(&quot;&quot;); int[] forLoopArray = {0, 1, 2, 3, 4, 5, 6, 7}; for (int element : forLoopArray) { System.out.print(element + &quot; &quot;); } System.out.println(&quot;&quot;); System.out.println(&quot;While Loop vs. Do-While Loop:&quot;); int w = 0; while(w &lt; forLoopArray.length) { System.out.print(forLoopArray[w] + &quot; &quot;); w++; } System.out.println(&quot;&quot;); int z = 0; do { System.out.println(z); } while (z &lt; 0); System.out.println(&quot;&quot;); System.out.println(&quot;Nested Loop:&quot;); int[][] multiDimensionalArray = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { System.out.print(multiDimensionalArray[i][j] + &quot; &quot;); } System.out.println(&quot;&quot;); } System.out.println(&quot;&quot;); } } VocabTwo.main(null); . Comparing Numbers: true true true Comparing Strings: false -1 Comparing Objects true false For Loop and Enhanced For Loop: 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 While Loop vs. Do-While Loop: 0 1 2 3 4 5 6 7 0 Nested Loop: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . // Class Creation public class Main { // Variable x is declared int x; // Constructor public Main() { // Variable x is assigned a value 7 x = 7; } public void printMessage() { System.out.println(&quot;Hello, World!&quot;); } } class Tester { public static void main(String[] args) { // Create an object with an attribute &quot;x&quot; immediately initialized due to the constructor. Main myObj = new Main(); System.out.println(myObj.x); myObj.printMessage(); } } Tester.main(null); . 7 Hello, World! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-2.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Vocabulary Part 1 Post",
            "content": "Casting (Division): In coding, float/float = float, float/int = float, int/float = float, and int/int. As shown, you only need to cast one of each number in division operations. | Casting (Truncating and Rounding): Truncation removes the decimal portion of the number, while rounding alters a number to the nearest one less precise decimal place. Casting from double to int will result in truncation. | Wrapper Classes: Wrapper classes allow primitive data types such as int and boolean to be used as objects. The wrapper class of int is Integer. When using ArrayLists, which only store objects, we use the wrapper class Integer instead of int. | Concatenation: The &quot;+&quot; operator is used to achieve concatenation, which is typically used to combine strings. When combining a string and 2 ints, the 2 ints will not be mathematically computed and will be transformed into strings from the beginning. | Math Class: The Math class can be utilized to perform various math operations such as power and square root on number variables. The Math.random() method can be used to generate a random number. Math.random() * (max - min) + min; will generate a random number between min and max, including min but excluding max. | Compound Boolean Expression: Created by the &amp;&amp; symbol and multiple boolean expressions, a compound boolean expression makes it so that if the first expression is false, then the whole expression will also be false. All expressions need to be true in order for a compound boolean expression to return true. | Truth Tables: Truth tables display all of the possible values of a logic function. Truth tables generally comprise of several rows and columns, with the top row containing all of the logical variables and combinations, and the bottom rows containing all of the possible outputs. | De Morgan&#39;s Law: De Morgan&#39;s Law basically states that the complement of the union of 2 sets is the intersection of their complements and that the complement of the intersection of 2 sets is the union of their complements. | . import java.util.ArrayList; public class VocabOne { public static void main(String[] args) { System.out.println(&quot;Casting (Division):&quot;); int x = 2; int y = 3; System.out.println(y/x); System.out.println((float) y/ x); System.out.println(y/ (float) x); System.out.println((float) y/ (float) x); System.out.println(&quot;&quot;); System.out.println(&quot;Casting (Truncating and Rounding):&quot;); double w = 3.7; System.out.println((int) w); System.out.println(&quot;&quot;); System.out.println(&quot;Wrapper Classes:&quot;); ArrayList&lt;Integer&gt; testArrayList = new ArrayList&lt;Integer&gt;(); System.out.println(&quot;ArrayList&lt;Integer&gt; works, but ArrayList&lt;int&gt; does not; &quot; + testArrayList); System.out.println(&quot;&quot;); System.out.println(&quot;Concatenation:&quot;); String one = &quot;Hey&quot;; int two = 2; int three = 3; System.out.println(&quot;one + two + three = &quot; + one + two + three); System.out.println(&quot;two + three + one = &quot; + two + three + one); System.out.println(&quot;two + one + three = &quot; + two + one + three); System.out.println(&quot;&quot;); System.out.println(&quot;Math Class:&quot;); int min = 1; int max = 11; int randInt = (int) Math.floor(Math.random() * (max - min) + min); System.out.println(&quot;Randomly generated number between 1 and 10, inclusive: &quot; + randInt); System.out.println(&quot;&quot;); System.out.println(&quot;Compound Boolean Expression:&quot;); int i = 5; int j = 10; System.out.println(i == 5 &amp;&amp; j == 10); System.out.println(i == 5 &amp;&amp; j == 5); System.out.println(&quot;&quot;); System.out.println(&quot;De Morgan&#39;s Law:&quot;); System.out.println(!(i == 5 &amp;&amp; j == 5)); System.out.println(!(i == 5) || !(j == 5)); System.out.println(&quot;&quot;); } } VocabOne.main(null); . Casting (Division): 1 1.5 1.5 1.5 Casting (Truncating and Rounding): 3 Wrapper Classes: ArrayList&lt;Integer&gt; works, but ArrayList&lt;int&gt; does not; [] Concatenation: one + two + three = Hey23 two + three + one = 23Hey two + one + three = 2Hey3 Math Class Randomly generated number between 1 and 10, inclusive: 9 Compound Boolean Expression true false De Morgan&#39;s Law true true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/11/28/Vocabulary-Part-1.html",
            "relUrl": "/jupyter/2022/11/28/Vocabulary-Part-1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Test Corrections Trimester 2",
            "content": "2014 Practice Exam MCQ Test Corrections . Question 3: Original Answer: E. A method that is made private means that other classes will not be able to call it. | Correct Answer: B. An accessor method lets other objects access the value of instance variables without actually changing them. The accessor method should be public. | . | Question 8: Original Answer: B. Choice II is not the only program that will compile without error. | Correct Answer C. Choice I successfully create a new object Student and assigns it to variable a of type Student using a no parameter constructor. Choice II uses a two-parameter constuctor with parameters String and int in order to successfully a create a new object Student and assign it to variable b of type Student. | . | Question 17: Original Answer: B. Since the size of the given array is immutable, when the program is run, no values are actually removed from the array. | Correct Answer: C. In the first iteration of the program, arr[3] is assigned the value[4]. In each iteration, the current value corresponding to the current index is copied to the element to the left. | . | Question 18: Original Answer: C. The statement given will result in an error, since the indices for myList range from 0 to myList.size() - 1, not 1 to myList.size(). | Correct Answer: B. The indices for myList range from 0 to myList.size() - 1, and since Math.random() randomly generates a random float point number between 0 and 1, excluding 1, this range will be satisfied. With the int type cast, an integer index value between 0 and myList.size() - 1, inclusive, will be generated. | . | Question 19: Original Answer: E. The opposite of !(a != b) is (a != b), due to the precense of a logic operator. With De Morgan’s Law, the logic operator &amp;&amp; becomes |   | and vice versa. The opposite of (b &gt; 7) is (b &lt;= 7). | . | Correct Answer: B. De Morgan’s Law states that !(a &amp;&amp; b) is equal to !a |   | !b. After negating the first expression, we get (!(a != b)) |   | !(b &gt; 7). After negative the second expression, we get (a != b) |   | (b &lt;= 7). | . | . | Question 22: Original Answer: C. Objects of a subclass inherit the methods of the super class. This means that the AudioBook object can call the toString method from the Book class. | Correct Answer: B. Because the books array has been declared of type Book, all objects saved in books are consided the Book object regardless of their actual type. As such, any methods that are called on elements of books must be declared Book. This means that in order to call the pagesPerMinute() method on Book[0], we need to use typecasting to allow the compiler to know that the object saved in the books array at this index is actually an AudioBook object. | . | Question 23: Original Answer: D. This would’ve been the result if the loop condition was k &gt; 1 instead of k &gt; 0. In other words, this would’ve been the output if the loop incremented one less. | Correct Answer: B. The loop basically looks at the element of the array at a specific index, checking if it starts with “b”. If it does, then it is inserted near beginning of the array. | . | Question 28: Original Answer: B. If the value of n is 2 or less in the original call of the method mystery, then the loop will be skipped and x will be 1 at //Point C. | Correct Answer: E. The while loop implemented only interates while n is greater than 2, and //Point B is in the body of the while loop prior to any change in the value n. During this time, n will always be greater than 2. | . | Question 30: Original Answer: B. This would’ve been the result if the first substring call was word.substring(howFar, word.length()). | Correct Answer: C. The substring method basically returns a substring beginning at the first parameter and ending at the second parameter - 1. The result of word.substring(howFar + 1, word.length()) is “iler”. The result of word.substring(0, howFar) is “com”. All in all, the method will return “ilercom”. | . | Question 33: Original Answer: C. This would be the correct answer if the boolean condition was changed from |   | to &amp;&amp;. However, since k is never incremented, |   | will always be true since k will always be less than 4. | . | Correct Answer: E. Since k is never changed in the body of the while loop, it will always have a value 1 and thus less than 4. This means the boolean expression |   | for the while loop will always evaluate to true, and therefore lead to an infinite loop. | . | . | Question 34: Original Answer: D. Choice III uses the default constructor Point to assign center to a new Point with x and y both equal to 0. However, it attempts to update x and y, which are both private instance variables in Point, leading to a compile time error since x and y are not able to be accessed directly in the class Circle. | Correct Answer: B. Choice II successfully creates a new Point with x assigned to value b and y assigned to value b using the two-parameter Point constructor. | . | Question 39: Original Answer: E. Although the return value of recur(9) is 18, this call is made within another recursive call, which means that it is not the true final return value. | Correct Answer: D. The inital call recur(27) has a return value of recur(recur(9)). The inner call recur(9) returns 18, which means the outer call becomes recur(18). The call recur(18) returns recur(recur(6)). The inner call recur(6) returns 12, which means the outer call becomes recur(12). The call recur(12) returns recur(recur(4)). The inner call recur(4) returns 8, which means the outer call becomes recur(8). The call recur(8) returns 16, which is the final return value of the initial call recur(27). | . | Question 40: Original Answer: A. This would’ve been the result if System.out.println(temp); was before the recursive call to whatsItDo(temp); When the recursive call is executed, the current sequence of statements are paused. | Correct Answer: C. The call whatsItDo(“WATCH”) first assigns a substring of “WATCH” starting at 0 and ending at 3, which is “WATC”, to the local variable temp. The next call sets local temp to “WAT”, the call after that sets local temp to “WA”, and so on. The call whatsItDo(“W”) reaches the base case. The call becomes whatsItDo(“WA”), which prints out the value of its local variable temp, which is “W”. The next call becomes whatsItDo(“WAT”), which prints out “WA”, the call after that beomces whatsItDo(“WATC”), which prints out “WAT”, and the final call whatsItDo(“WATCH”) prints out “WATC”. After this call, all of the recursive calls in the program are complete. | . | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/11/08/Test-Corrections-Trimester-2.html",
            "relUrl": "/2022/11/08/Test-Corrections-Trimester-2.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Arrays HW Post",
            "content": "Notes: . An array is a type of data structure that contains collections of data. | The data in an array can be primitive or referenced. | The parts of an array comprise of elements and indices. An element is a singular value in an array, while an index is the position of a value in the array. Java uses 0-based indexing, meaning the first value of an array is at index 0. | Method 1 of initializing arrays: int[] array = new int[10]; This declares an array with 10 elements with int type. | Method 2 of initializing arrays: int[] array = {1, 2, 3, 4}; This specifies the initial values of an array. | To traverse through an array, any sort of iteration, specifically basic for loops and enhanced for loops, should be used. | The array.length method returns the length of an array, or in other words the number of values in an array. The array[i] method returns the element of an array at index i. | . Homework: . Swap the first and last element in the array | Replace all even elements with 0 | . // Import Java Arrays library import java.util.Arrays; public class ArrayMethods { // Initialized array with private modifiers private int[] values = {1, 4, 3, 5, 6, 8, 7}; // Swap method for reversing the entire array public int[] swap() { int[] valuesSwap = values.clone(); for (int i = 0; i &lt; valuesSwap.length/2; i++) { // Store the ith value of the array in a temp variable int temp = valuesSwap[i]; int lastIndex = valuesSwap.length - (i + 1); valuesSwap[i] = valuesSwap[lastIndex]; valuesSwap[lastIndex] = temp; } return valuesSwap; } // Replace method for replacing all even numbers in the array with 0 public int[] replace() { int[] valuesReplace = values.clone(); for (int a = 0; a &lt; valuesReplace.length; a++) { // If % produces a remainder of 0, the element is even if (valuesReplace[a] % 2 == 0) { valuesReplace[a] = 0; } } return valuesReplace; } // Running method for visualizing outputs public static void main(String[] args) { ArrayMethods myObj = new ArrayMethods(); for (int num : myObj.swap()) { System.out.print(num + &quot; &quot;); } System.out.println(&quot;&quot;); for (int num : myObj.replace()) { System.out.print(num + &quot; &quot;); } } } ArrayMethods.main(null); . 7 8 6 5 3 4 1 1 0 3 5 0 0 7 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/28/Arrays-HW.html",
            "relUrl": "/jupyter/2022/10/28/Arrays-HW.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Writing Classes HW Post",
            "content": "2021 FRQ 1a . public class WordMatch { private String secret; // Constructor for WordMatch that initializes the secret variable public WordMatch(String word) { secret = word; } // Method for comparing guess with secret public int scoreGuess(String guess) { int score = 0; int occurrences = 0; int guessLength = guess.length(); // The for loop&#39;s condition changes with respect to the length of guess, and counts the number of occurrences of guess in secret for (int i = 0; i &lt;= secret.length() - guessLength; i++) { String secretComponent = secret.substring(i, i + guessLength); if (guess.equals(secretComponent)) { occurrences++; } } score = occurrences * (int) Math.pow(guessLength, 2); return score; } // Running method for visualizing outputs public static void main(String[] args) { WordMatch myObj = new WordMatch(&quot;mississippi&quot;); System.out.println(myObj.scoreGuess(&quot;i&quot;)); } } WordMatch.main(null); . 4 . 2021 FRQ 3a . public class MemberInfo { public String memberName; public int memberGradYear; public boolean memberGoodStanding; // Constructor that initializes detail variables for a member public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { memberName = name; memberGradYear = gradYear; memberGoodStanding = hasGoodStanding; } // Returns graduation year of a member public int getGradYear() { return memberGradYear; } // Returns the good standing status of a member public boolean inGoodStanding() { return memberGoodStanding; } } public class ClubMembers { // memberList ArrayList private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { // memberList is initialized memberList = new ArrayList&lt;MemberInfo&gt;(); // for loop adds all specified new member objects to MemberList for (int i = 0; i &lt; names.length; i++) { // Alternate method: Create a memberInfo object first then append it to memberList // MemberInfo memberObject = new MemberInfo(names[i], gradYear, true); memberList.add(new MemberInfo(names[i], gradYear, true)); } } // Running method for visualizing outputs public static void main(String[] args) { ClubMembers myObj = new ClubMembers(); String[] names = {&quot;Dylan&quot;, &quot;Ritvik&quot;, &quot;Aryan&quot;}; myObj.addMembers(names, 2023); // for loop retrieves all member objects from MemberList, then retrieves memberName, memberGradYear, and memberGoodStanding from each member object and prints them for (int i = 0; i &lt; myObj.memberList.size(); i++) { String memberNameRetrieve = myObj.memberList.get(i).memberName; int memberGradYearRetrieve = myObj.memberList.get(i).memberGradYear; boolean memberGoodStanding = myObj.memberList.get(i).memberGoodStanding; System.out.println(memberNameRetrieve + &quot;; &quot; + memberGradYearRetrieve + &quot;; &quot; + memberGoodStanding); } } } ClubMembers.main(null); . Dylan; 2023; true Ritvik; 2023; true Aryan; 2023; true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/27/Classes-HW.html",
            "relUrl": "/jupyter/2022/10/27/Classes-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Boolean Expressions and If Else Statements Post",
            "content": "2009 FRQ 3b . public class BatteryCharger { // Initialized array containing the costs at each hour (0 - 23) private int[] rateTable = {50, 60, 160, 60, 80, 100, 100, 120, 150, 150, 150, 200, 40, 240, 220, 220, 200, 200, 180, 180, 140, 100, 80, 60}; // Method for determining the total charge cost based on the given startHour and chargeTime private int getChargingCost(int startHour, int chargeTime) { int totalCost = 0; for (int i = startHour; i &lt; startHour + chargeTime; i++) { if (i &gt;= 24) { int temp = i % 24; totalCost += rateTable[temp]; } else { totalCost += rateTable[i]; } } return totalCost; } // Method for determining the most cost efficient startHour based on the given chargeTime public int getChargeStartTime(int chargeTime) { int optimalStartHour = 23; for (int i = 22; i &gt;= 0; i--) { if (getChargingCost(i, chargeTime) &lt; getChargingCost(optimalStartHour, chargeTime)) { optimalStartHour = i; } } return optimalStartHour; } // Running method for visualizing outputs public static void main(String[] args) { BatteryCharger myObj = new BatteryCharger(); System.out.println(myObj.getChargingCost(22, 30)); System.out.println(myObj.getChargeStartTime(30)); } } BatteryCharger.main(null); . 3710 23 . 2017 FRQ 1b . public class Digits { private ArrayList&lt;Integer&gt; digitList; // Constructor that adds all digits of an integer to an ArrayList public Digits(int num) { Integer number = num; digitList = new ArrayList&lt;Integer&gt;(); String numberNew = number.toString(); for (int i = 0; i &lt; numberNew.length(); i++) { int numberNewDigit = Character.getNumericValue(numberNew.charAt(i)); digitList.add(numberNewDigit); } } // Method for checking if all the numbers in the digit list are strictly increasing public boolean isStrictlyIncreasing() { // Returns true if there is only 1 digit if (digitList.size() &lt; 2) { return true; } for (int a = 0; a &lt; digitList.size() - 1; a++) { // Returns false if at least one of the digits does not follow the strictly increasing rule if (digitList.get(a) &gt;= digitList.get(a + 1)) { return false; } } return true; } // Running method for visualizing outputs public static void main(String[] args) { Digits myObj = new Digits(1234578); System.out.println(myObj.isStrictlyIncreasing()); } } Digits.main(null); . true 1 2 3 4 5 7 8 . 2019 FRQ 3b . public class Delimiters { private String openDel; private String closeDel; ArrayList&lt;String&gt; delimitersList; // Constructor that initializes openDel, closeDel, and delimitersList public Delimiters(String open, String close) { openDel = open; closeDel = close; delimitersList = new ArrayList&lt;String&gt;(); } // Method for collecting all delimiters from a text public ArrayList&lt;String&gt; getDelimitersList (String[] tokens) { for (String token : tokens) { if (token == openDel || token == closeDel) { delimitersList.add(token); } } return delimitersList; } // Method to check whether or not the open delimiters and close delimiters are balanced. public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { // Counters for the number of open delimiters and close delimiters int openCount = 0; int closeCount = 0; for (String delimiter : delimiters) { if (delimiter == openDel) { openCount++; } else if (delimiter == closeDel) { closeCount++; } // First condition is broken if (openCount &lt; closeCount) { return false; } } // First and second condition are both met if (openCount == closeCount) { return true; } // Second condition is broken else { return false; } } // Running method for visualizing outputs public static void main(String[] args) { Delimiters myObj = new Delimiters(&quot;(&quot;, &quot;)&quot;); String[] tokens = {&quot;(&quot;, &quot;yy&quot;, &quot;)&quot;, &quot;zz&quot;, &quot;(&quot;, &quot;)&quot;}; ArrayList&lt;String&gt; delimiters = myObj.getDelimitersList(tokens); System.out.println(delimiters); System.out.println(myObj.isBalanced(delimiters)); } } Delimiters.main(null); . [(, ), (, )] true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/26/Conditional-HW.html",
            "relUrl": "/jupyter/2022/10/26/Conditional-HW.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Using Objects HW Post",
            "content": "// Class for initializing values for each Goblin trait public class Goblin { // Initialize all trait variables private String name; private int HP; private int DMG; private double hitChance; // Get methods for each trait value public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } // Set methods for each trait value public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . // Math import for randomization import java.lang.Math; // Class that simulates the outcome of fights between 2 goblins public class Duel { // Method that simulates each goblin&#39;s attack. Every attack either leads to a miss or some amount damage to a goblin. public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } // Start up method that runs as long as both goblins are alive public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Satoru Gojo&quot;); goblin1.setHP(10); goblin1.setDMG(3); goblin1.setHitChance(0.85); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Toji Fushiguro&quot;); goblin2.setHP(12); goblin2.setDMG(2); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 9 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 8 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 6 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 3 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro misses... Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 0 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 4 Toji Fushiguro has perished .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Objects-HW.html",
            "relUrl": "/jupyter/2022/10/25/Objects-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Iteration HW Post",
            "content": "Part #1: Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . // Java utility imports necessary for the program import java.util.Scanner; import java.util.Random; public class Iteration { // Initialize Random library object Random randNumber = new Random(); int randomNumber = randNumber.nextInt(100 - 1) + 1; // Initialize Scanner object Scanner userInput = new Scanner(System.in); // Startup method public void play() { System.out.println(&quot;Guess an integer from 1 to 100&quot;); int guess = userInput.nextInt(); System.out.println(guess); // Calls checkGuess method that checks if the guess matches the randomly generated number from 1-100 checkGuess(guess); } // Simulates binary search random number guessing game. This essentially a recursive method that keeps running until the randomly generated number is guessed correctly public void checkGuess(int guess) { // Win condition if (guess == randomNumber) { System.out.println(&quot;Congratulations, you guessed correctly!&quot;); } // Condition when guess is less than randomNumber else if (guess &lt; randomNumber) { System.out.println(&quot;Too low&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } // Condition when guess is greater than randomNumber else if (guess &gt; randomNumber) { System.out.println(&quot;Too high&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } } } // Running method for visualizing outputs public class runProgram { public static void main(String[] args) { Iteration myObj = new Iteration(); myObj.play(); } } runProgram.main(null); . Guess an integer from 1 to 100 50 Too high Guess again 25 Too low Guess again 37 Congratulations, you guessed correctly! . Part #2: .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Iteration-HW.html",
            "relUrl": "/jupyter/2022/10/25/Iteration-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Primitives Types HW Post",
            "content": "2006 FRQ 2a . public interface Item { double purchasePrice(); } // Class TaxableItem implements the interface Item, which contains the method purchasePrice() public abstract class TaxableItem implements Item { private double taxRate; public abstract double getListPrice(); // Constructor for initializing the tax rate, if there is any public TaxableItem(double rate){ taxRate = rate; } // Calculates the purchase price of an item by multiplying the tax rate by the list price, then adding that to the original list price // If there is no tax rate, then the purchase price is simply equal to the list price public double purchasePrice() { double purchasePriceValue = getListPrice() + (taxRate * getListPrice()); return purchasePriceValue; // Alternate way: // return getListPrice() * (1.0 + taxRate); } } // Since we are working with an abstract class, we would have to extend to it with another class in order to run our program // As of right now, the class hierarchy seems to be very complicated, so I will further research ways to output the program results . 2006 FRQ 3a . public class Customer { private String cName; private int cID; // Constructor to initialize customer name and id public Customer(String name, int idNum) { cName = name; cID = idNum; } // Gets the name of the specified customer public String getName() { return cName; } // Gets the unique ID of the specified customer public int getID() { return cID; } // Compares given customer with another customer. Returns a positive integer if the customer is greater than the other customer, // 0 if they are equal, and a negative integer if the customer is less than the other customer. public int compareCustomer(Customer other) { int nameComparison = getName().compareTo(other.getName()); if (nameComparison != 0) { return nameComparison; } else { if (getID() != other.getID()) { return getID() - other.getID(); } } return 0; } // Running method for visualizing outputs public static void main(String[] args) { Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); Customer c4 = new Customer(&quot;Will&quot;, 1004); System.out.println(c1.compareCustomer(c4)); } } Customer.main(null); . -4 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/24/Primitive-Types-HW.html",
            "relUrl": "/jupyter/2022/10/24/Primitive-Types-HW.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "POJO Post",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/03/POJO.html",
            "relUrl": "/jupyter/2022/10/03/POJO.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Arrays and Images Post",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;gojo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; private final String outDir = &quot;images/tmp/&quot;; private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; private long bytes; private int width; private int height; public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } public static BufferedImage convertToBufferedImage(Image img) { BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=6) { for (int j = 0; j &lt; img.getWidth(); j+=3) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public void GrayScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red+green+blue)/3; Color colorGray = new Color(avg, avg, avg); img.setRGB(j, i, colorGray.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graygojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (green)/3; Color colorGreen = new Color(avg, green, avg); img.setRGB(j, i, colorGreen.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greengojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red)/3; Color colorRed = new Color(red, avg, avg); img.setRGB(j, i, colorRed.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void PurpleScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;purplegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void CyanScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;cyangojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void YellowScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, avg); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;yellowgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void WhiteScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;whitegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) throws IOException { Pics gojo = new Pics(&quot;gojo&quot;, &quot;png&quot;); gojo.GrayScale(); gojo.GreenScale(); gojo.RedScale(); gojo.BlueScale(); gojo.PurpleScale(); gojo.CyanScale(); gojo.YellowScale(); gojo.WhiteScale(); gojo.printStats(&quot;Original&quot;); gojo.resize(33); gojo.printStats(&quot;Scaled&quot;); gojo.convertToAscii(); } } Pics.main(null); . Original: 78183 1200x628 images/gojo.png . java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11.XToolkit at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:315) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:588) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:583) at java.base/java.security.AccessController.doPrivileged(Native Method) at java.desktop/java.awt.Toolkit.getDefaultToolkit(Toolkit.java:582) at java.desktop/java.awt.Image.getScaledInstance(Image.java:178) at Pics.resize(#32:1) at Pics.main(#32:1) at .(#35:1) .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/27/Arrays-and-Images.html",
            "relUrl": "/jupyter/2022/09/27/Arrays-and-Images.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Fibonacci Post",
            "content": "import java.util.Scanner; import java.util.Arrays; import java.lang.System; public class Fibonacci { public void checkNthPosition() { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter an integer for n to get the nth integer of the Fibonacci Sequence:&quot;); int n = userInput.nextInt(); forLoop(n); whileLoop(n); long timeStartRecursion = System.nanoTime(); recursion(n); double timeElapsedRecursion = (double) (System.nanoTime() - timeStartRecursion)/ (double) (1000); System.out.println(&quot;Using a recursion loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsedRecursion); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + recursion(n)); } public int forLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); for (int i = 2; i &lt;= n; i++) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a for loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int whileLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); int i = 2; while (i &lt;= n) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; i++; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a while loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int recursion(int n) { if (n == 0) { return 0; } else if (n == 1) { return 1; } return recursion(n-2) + recursion(n-1); } } public class Fibo extends Fibonacci { public static void main(String[] args) { Fibonacci play = new Fibonacci(); play.checkNthPosition(); } } Fibo.main(null); . Enter an integer for n to get the nth integer of the Fibonacci Sequence: Using a for loop: Computational Time (In Microseconds): 7.409 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a while loop: Computational Time (In Microseconds): 4.479 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a recursion loop: Computational Time (In Microseconds): 13.698 The nth integer of the Fibonacci sequence: 13 . Questions . Skill 1.B: Determine code that would be used to complete code segments (i.e. For, While, Recursion). | To complete the code segments, I used loop statements such as for, while, and recursion. | . Skill 4.C: Determine if two or more code segments yield equivalent results (Be sure to discuss how you know the results are the same). | All code segments yield the same results, because although they are different kinds of statements, they essentially use the same operations and ultimately return the same result. | . Skill 5.A: Describe the behavior of a given segment of program code (Describe the different in recursion versus for and while loops; perhaps add timing to determine speed). | Using the timeStart and timeElapsed variables to determine the computational time of each program code, I found out the the recursion loop takes slightly longer than the for and while loops. This is likely because it has to calculate a lot of the values due to the multiple return statements it has. The for and whiles loops likely took less time because their caching methods (Appending values to and iterating through arrays) are faster. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/24/Fibonacci.html",
            "relUrl": "/jupyter/2022/09/24/Fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "CSA FRQ",
            "content": "import java.util.Scanner; import java.util.Arrays; public class Level { int level; String levelStatus; public boolean goalReached() { if (levelStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getPoints() { if (level == 1 &amp;&amp; goalReached() == true) { return 200; } else if (level == 2 &amp;&amp; goalReached() == true) { return 100; } else if (level == 3 &amp;&amp; goalReached() == true) { return 500; } return 0; } } public class Game { private Level levelOne = new Level(); private Level levelTwo = new Level(); private Level levelThree = new Level(); //Default constructor created // public Game() { } String bonusStatus; public void play() { System.out.println(&quot;Game Simulation&quot;); Scanner numInput = new Scanner(System.in); System.out.println(&quot;How many times are you playing the game?&quot;); int num = numInput.nextInt(); playManyTimes(num); } public boolean isBonus() { if (bonusStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getScore() { int score = 0; if (levelOne.goalReached() == true) { score += levelOne.getPoints(); if (levelTwo.goalReached() == true) { score += levelTwo.getPoints(); if (levelThree.goalReached() == true) { score += levelThree.getPoints(); } } } if (isBonus() == true) { score *= 3; } return score; } public int playManyTimes(int num){ Scanner userInput = new Scanner(System.in); int[] scoreArray = new int[]{}; scoreArray = Arrays.copyOf(scoreArray, scoreArray.length + num); for (int w = 0; w &lt; num; w++) { scoreArray[w] = 0; } for (int i = 0; i &lt; num; i++) { System.out.println(&quot;Did you complete level 1? (y/n)&quot;); levelOne.levelStatus = userInput.nextLine(); levelOne.level = 1; levelOne.goalReached(); System.out.println(&quot;Did you complete level 2? (y/n)&quot;); levelTwo.levelStatus = userInput.nextLine(); levelTwo.level = 2; levelTwo.goalReached(); System.out.println(&quot;Did you complete level 3? (y/n)&quot;); levelThree.levelStatus = userInput.nextLine(); levelThree.level = 3; levelThree.goalReached(); System.out.println(&quot;Is this a bonus game? (y/n)&quot;); bonusStatus = userInput.nextLine(); int individualScore = getScore(); System.out.println(individualScore); scoreArray[i] = individualScore; } int highScore = 0; for (int a = 0; a &lt; scoreArray.length; a++) { if (a == 0) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &gt; scoreArray[a - 1]) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &lt; scoreArray[a - 1]) { highScore = scoreArray[a - 1]; } } System.out.println(&quot;Your high score was: &quot; + highScore); return highScore; } } public class testGame { public static void main(String[] args) { Game g = new Game(); g.play(); } } testGame.main(null); . Game Simulation How many times are you playing the game? Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 600 Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 2400 Your high score was: 2400 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/16/FRQ-1.html",
            "relUrl": "/jupyter/2022/09/16/FRQ-1.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Java Iteration Statements Post",
            "content": "class AnimeLoop { String [][] animeArray; public AnimeLoop() { animeArray = new String[][]{ //Toji { &quot; ,@&amp;@#&quot;, &quot; @@@@@@@@@%&quot;, &quot; @@@#@@&amp;&amp;@&amp;&quot;, &quot; .#@((/((/( /&quot;, &quot; ,@@@@#/(##( .&quot;, &quot; /@@@@@@@@@@@@*&quot;, &quot; @@@@@@@@@@@@@@@@@@&quot;, &quot; (@@@@@@@@@@@@@@@@@@@(&quot;, &quot; #@@@@@@@@@@@@@@@@@@@@@&quot;, &quot; @@@@@@@@@@@@@@@@@@@@@&quot;, &quot; &amp;@@@# @@@@@@@@@@@%%%#@&quot;, &quot;@@%%%% @@@@@@@@@@%&amp;&amp;%#&quot;, &quot; #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#%&quot;, &quot; &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%%&quot;, &quot; *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp;&quot; }, //Megumi 1 { &quot; @@@@@@@&quot;, &quot; @@@@@@@@@/&amp;&quot;, &quot; %@@@@(@@@@@@@@&quot;, &quot; &amp;@@@&amp;@@@@@@@%&quot;, &quot; /@@**.,*.. * #@&quot;, &quot; @@&amp;., , /.(&quot;, &quot; @@@@&amp;@&amp;, .*.@@, .,/&quot;, &quot; ,@****#@@@*%(/@@@@/, .&quot;, &quot;#@@@@@@@@&amp;/(*/*%@@@%,,**, *@&quot;, &quot;@@@@@@@@@@@*(#**(@@@@@, @@@@@@@&quot;, &quot; @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@&quot;, &quot; ,/@@@@*@@#@@@@@%@ ,&quot;, &quot; (#(%@@@@*@@@@@@@&quot;, &quot; (&amp;@@@#%@@*@%**///((# / , *&quot;, &quot; *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,.&quot;, &quot; ***@@@@@@@@@@@@@@@@@@@@ *&quot;, &quot; /*@@@@@@@@@@@@&amp;@@ #&quot;, &quot; .**@@%&amp;@%%@@@@@@@@ *&quot;, &quot; *@@@@@@@@@&amp;@@@@@@% * (&quot;, &quot; @@@@@@@@@@@@@@@@ , *&quot; }, //Megumi 2 { &quot; * @&quot;, &quot; @@*@@&amp;@@(&quot;, &quot; @@@@@@@@@@@@@@@%/&quot;, &quot; @@@@@@@@&amp;@@@@@,&quot;, &quot; /@@@@@@@/&amp;@@@@@@#&quot;, &quot; @@ ., ...*#@&quot;, &quot; . ( (/&quot;, &quot; &amp;@@@@/ ., .*/&quot;, &quot; @@@@@@@@@ .@&quot;, &quot; @@@@@&amp;@@&amp;@@#@@@@&quot;, &quot; .@&amp;##%@%@@@@@@@@@&quot;, &quot;(&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@&quot;, &quot;@%(##%@@@@@@@&amp;&amp;@@@@@&quot;, &quot;@%@@@@@@@&amp;#%%@@@@@@@&quot;, &quot;@%@&amp;@@@@@@@@%@@&amp;%@@@&amp;&quot;, &quot;&amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@&quot;, &quot;&amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@&quot;, &quot;@@&amp;@@@@#@&amp;@@@@@@@@@#@@@&quot;, &quot;@@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@&quot;, &quot;@@%%@@%@@%@@@@@@@%%@@&amp;*(@&quot;, &quot; &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@(&quot;, &quot; @@@&amp;@*. ,@@@@@@@@@&quot;, &quot; @@@@@@@@.. @@@@@@@&quot;, &quot; @@@@@@@@&amp;#. ..@@@@&quot; }, //Megumi 3 { &quot; .@@@@@@@@#*@&quot;, &quot; .@&amp;.@&amp;@@@@@@@@@@&quot;, &quot; %@@@@*@*@@@@,,@@@#&quot;, &quot; #@@@@@@@@@@@@@@@@@@ ( ((&quot;, &quot; @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@&quot;, &quot; ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;((&quot;, &quot; %&amp; . , *(/@@#@@@@@ @@ #((&quot;, &quot; ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .#&quot;, &quot; #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp;&quot;, &quot; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , %&quot;, &quot; #(#@(#((@(@@&amp;@@@@@#@@@(&quot;, &quot;(((%@@#@(@%@@@@@@@@@@@&amp; /, ,&quot;, &quot;(((%%@@@@(@%@@@@@@@@@@ (#@@@@@,&quot;, &quot;((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp;&quot;, &quot; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@*&quot;, &quot; .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@(&quot; }, //Megumi 4 { &quot; (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; *&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ .&quot;, &quot; @@@&amp;&amp;#*%&amp;&amp;&amp;@**&quot;, &quot; %,,.....,,&quot;, &quot; .#*/....,. ..&quot;, &quot; .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,,&quot;, &quot; *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*....&quot;, &quot;&amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,#&quot;, &quot;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;,&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/&quot;, &quot; @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@&quot;, &quot; @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp;&quot;, &quot; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp;&quot; }, }; } public void printAnime() { System.out.println(); System.out.println(&quot;Java Iteration Lab&quot;); int animeCount = animeArray.length; for (int i = animeCount; i &gt; 1; i--) { if (animeCount &gt; 2 || animeCount &lt; 2) { System.out.println(&quot;There are &quot; + (i-1) + &quot; Megumi Fushiguros standing around...&quot;); } else if (animeCount == 2) { System.out.println(&quot;There is &quot; + (i-1) + &quot; Megumi Fushiguro standing around...&quot;); } for (int row = 1; row &lt; animeCount; row++) { for (int col = 0; col &lt; animeArray[row].length; col++) { System.out.print(animeArray[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } System.out.println(&quot;Here comes Toji Fushiguro who is a menace to society&quot;); for (int col = 0; col &lt; animeArray[0].length; col++) { System.out.print(animeArray[0][col] + &quot; &quot;); System.out.println(); } System.out.println(); animeCount -= 1; } System.out.println(&quot;There are no more Megumi Fushiguros standing around&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new AnimeLoop().printAnime(); } } AnimeLoop.main(null); . Java Iteration Lab There are 4 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; * &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ . @@@&amp;&amp;#*%&amp;&amp;&amp;@** %,,.....,, .#*/....,. .. .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,, *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*.... &amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,# #&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;# %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;, %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/ @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@ @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;# %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp; Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 3 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 2 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There is 1 Megumi Fushiguro standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are no more Megumi Fushiguros standing around 0000000000000000000000000000000000 THE END .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/15/Java-Iteration.html",
            "relUrl": "/jupyter/2022/09/15/Java-Iteration.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Gratitude Post",
            "content": "What I Am Grateful for: . To start off, I am grateful for all my loved ones. I am thankful for my family, who have provided me with so much support and love through tje ups and downs of my life. I truly believe that I would not have succeeded nearly as much if it was not for my family. In addition, my friends have supported me greatly and have helped my through rough times. Looking back at how much they have aided me makes me feel extremely appreciative for all of them. Moving forward into the future, I seek to maintain a close group of friends and preserve a good relationship with my relatives, for the sake my own mental health, as well as for me to give support back to my loved ones. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/11/Gratitude.html",
            "relUrl": "/markdown/2022/09/11/Gratitude.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Title",
            "content": "Java If Else Statements . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Java If Else Statements&quot;); } } ifelse.main(null); . Java If Else Statements .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/09/08/ifelse.html",
            "relUrl": "/2022/09/08/ifelse.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Java Conditional Statements Post",
            "content": "Java if else statements are a type of conditional statement. If the Java if statement evaluates to true, it will perform a specific action designated to it. Otherwise, if it evaluates to false, it will perform another designated action. . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); if (schoolSubjectNew.equals(&quot;math&quot;)) { System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); } else if (schoolSubjectNew.equals(&quot;english&quot;)) { System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); } else if (schoolSubjectNew.equals(&quot;history&quot;)) { System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); } else if (schoolSubjectNew.equals(&quot;physical education&quot;)) { System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); } else if (schoolSubjectNew.equals(&quot;science&quot;)) { System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); } else if (schoolSubjectNew.equals(&quot;computer science&quot;)) { System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); } else { System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); } } } ifelse.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . import java.util.Scanner; import java.lang.Math; public class Switch { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); switch(schoolSubjectNew) { case &quot;math&quot;: System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); break; case &quot;english&quot;: System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); break; case &quot;history&quot;: System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); break; case &quot;physical education&quot;: System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); break; case &quot;science&quot;: System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); break; case &quot;computer science&quot;: System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); break; default: System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); break; } } } Switch.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . import java.util.Scanner; import java.lang.Math; public class DeMorgan1 { public static void main(String[] args) { System.out.println(&quot;Type the length in minutes of your average work out:&quot;); System.out.println(&quot;--&quot;); Scanner userInput = new Scanner(System.in); int minutesNew = userInput.nextInt(); if (minutesNew &gt; 0 &amp;&amp; minutesNew &lt;= 60) { System.out.println(&quot;Your average work outs should be a little longer unless it is really intense&quot;); } else if (minutesNew &gt; 60 &amp;&amp; minutesNew &lt;= 120) { System.out.println(&quot;Your work outs are at perfect length&quot;); } else if (minutesNew &gt; 120 &amp;&amp; minutesNew &lt;= 210) { System.out.println(&quot;Your work outs are at an above average length&quot;); } else { System.out.println(&quot;You are a beast&quot;); } } } DeMorgan1.main(null); . Type the length in minutes of your average work out: -- You are a beast . import java.util.Scanner; import java.lang.Math; public class DeMorgan2 { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter your first integer:&quot;); System.out.println(&quot;-&quot;); int numberOne = userInput.nextInt(); System.out.println(&quot;Enter your second integer:&quot;); System.out.println(&quot;-&quot;); int numberTwo = userInput.nextInt(); boolean booleanValue1 = numberOne == numberTwo; System.out.println(&quot;Enter your third integer:&quot;); System.out.println(&quot;-&quot;); int numberThree = userInput.nextInt(); System.out.println(&quot;Enter your fourth integer:&quot;); System.out.println(&quot;-&quot;); int numberFour = userInput.nextInt(); boolean booleanValue2 = numberThree == numberFour; if (booleanValue1 || booleanValue2) { System.out.println(&quot;Or Statement: True&quot;); } else { System.out.println(&quot;Or Statement: False&quot;); } if (booleanValue1 &amp;&amp; booleanValue2){ System.out.println(&quot;And Statement: True&quot;); } else { System.out.println(&quot;And Statement: False&quot;); } if (!(booleanValue1 || booleanValue2)){ System.out.println(&quot;Nor Statement: True&quot;); } else { System.out.println(&quot;Nor Statement: False&quot;); } if (!(booleanValue1 &amp;&amp; booleanValue2)){ System.out.println(&quot;Nand Statement: True&quot;); } else { System.out.println(&quot;Nand Statement: False&quot;); } } } DeMorgan2.main(null); . Enter your first integer: - Enter your second integer: - Enter your third integer: - Enter your fourth integer: - Or Statement: True And Statement: True Nor Statement: False Nand Statement: False .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/08/Java-Conditional.html",
            "relUrl": "/jupyter/2022/09/08/Java-Conditional.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Code.org Blog Post",
            "content": "Code.org Blog Post . Code.org with up to lesson 15 completed . . Code.org Key Learnings . In Java, an object can be created using the public objectName(){} command. | An object is an instance of a class, and it has its own identity, state, and purpose. The state of an object is stored in variables or fields, and it can be used using functions or methods. | In Java, the public class subclassName extends superclassName{} command links a subclass to a superclass. An example of subclassName could be soccer, while an example of superclassName could be sport. | A sub class that extends to a super class means that the sub class is inherited from the super class. | A Java constructor is a method used to initialize objects that does not have a return type (e.g. void). The constructor name must be the same as its class name counterpart. Every class has by default a constructor, and a constructor is called whenever an object is built. An example of a Java constructor code is public Main(){}. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/05/Codeorg.html",
            "relUrl": "/markdown/2022/09/05/Codeorg.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 1 - Java Objects Post",
            "content": "import java.util.Scanner; import java.lang.Math; public class Menu { public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Java Menu&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - NBA Player Personality Quiz&quot;); System.out.println(&quot;2 - Which kinematics equation should I use?&quot;); System.out.println(&quot;3 - Print out digits of PI&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; Scanner typeInput = new Scanner(System.in); switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot; nNBA Players Personality Test&quot;); int[] questionNumberList = {1, 2, 3, 4}; int count = 0; for (int a = 0; a &lt; questionNumberList.length; a++) { System.out.println(&quot;Question &quot; + questionNumberList[a]); if (questionNumberList[a] == 1) { System.out.println(&quot;What is your favorite basketball team?&quot;); System.out.println(&quot;A) Chicago Bulls&quot;); System.out.println(&quot;B) LA Lakers&quot;); System.out.println(&quot;C) Golden State Warriors&quot;); System.out.println(&quot;D) Oklahoma City Thunder&quot;); String userAnswer1 = typeInput.nextLine(); String userAnswer1Update = userAnswer1.toLowerCase(); if (userAnswer1Update.equals(&quot;a&quot;)) { count += + 1; } else if (userAnswer1Update.equals(&quot;b&quot;)) { count += + 2; } else if (userAnswer1Update.equals(&quot;c&quot;)) { count += + 3; } else if (userAnswer1Update.equals(&quot;d&quot;)) { count += 4; } } else if (questionNumberList[a] == 2) { System.out.println(&quot;What is your ideal height?&quot;); System.out.println(&quot;A) 7&#39;1&quot;); System.out.println(&quot;B) 6&#39;6&quot;); System.out.println(&quot;C) 6&#39;11&quot;); System.out.println(&quot;D) 6&#39;3&quot;); String userAnswer2 = typeInput.nextLine(); String userAnswer2Update = userAnswer2.toLowerCase(); if (userAnswer2Update.equals(&quot;a&quot;)) { count += 2; } else if (userAnswer2Update.equals(&quot;b&quot;)) { count += 1; } else if (userAnswer2Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer2Update.equals(&quot;d&quot;)) { count += 3; } } else if (questionNumberList[a] == 3) { System.out.println(&quot;What is your favorite basketball position?&quot;); System.out.println(&quot;A) Small Forward&quot;); System.out.println(&quot;B) Point Guard&quot;); System.out.println(&quot;C) Center&quot;); System.out.println(&quot;D) Shooting Guard&quot;); String userAnswer3 = typeInput.nextLine(); String userAnswer3Update = userAnswer3.toLowerCase(); if (userAnswer3Update.equals(&quot;a&quot;)) { count += 4; } else if (userAnswer3Update.equals(&quot;b&quot;)) { count += 3; } else if (userAnswer3Update.equals(&quot;c&quot;)) { count += 2; } else if (userAnswer3Update.equals(&quot;d&quot;)) { count += 1; } } else if (questionNumberList[a] == 4) { System.out.println(&quot;What is favorite basketball skill?&quot;); System.out.println(&quot;A) Shooting&quot;); System.out.println(&quot;B) Dunking&quot;); System.out.println(&quot;C) Dribbling&quot;); System.out.println(&quot;D) Defending&quot;); String userAnswer4 = typeInput.nextLine(); String userAnswer4Update = userAnswer4.toLowerCase(); if (userAnswer4Update.equals(&quot;a&quot;)) { count += 3; } else if (userAnswer4Update.equals(&quot;b&quot;)) { count += 2; } else if (userAnswer4Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer4Update.equals(&quot;d&quot;)) { count += 1; } } } System.out.println(&quot;You have completed the NBA personality quiz!&quot;); if (count &gt;= 13) { System.out.println(&quot;You are Kevin Durant!&quot;); } else if (count &gt; 10) { System.out.println(&quot;You are Stephen Curry!&quot;); } else if (count &gt; 7) { System.out.println(&quot;You are Shaq O&#39; Neal!&quot;); } else if (count &gt;= 4) { System.out.println(&quot;You are Michael Jordan!&quot;); } break; case 2: System.out.println(&quot;What is the information you need to find?&quot;); String kinematicsInput1 = typeInput.nextLine(); String kinematicsInput1LowerCase = kinematicsInput1.toLowerCase(); String kinematicsEquation1 = &quot;Vf = Vi + a * t&quot;; String kinematicsEquation2 = &quot;x = Vi * t + (a * t^2)/2&quot;; String kinematicsEquation3 = &quot;Vf^2 = Vi^2 + 2 * a * x&quot;; String kinematicsEquation4 = &quot;x = (Vi + Vf)/2 * t&quot;; String kinematicsEquation5 = &quot;x = Vf * t - (a * t^2)/2&quot;; if (kinematicsInput1LowerCase.equals(&quot;displacement&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation1); } else if (kinematicsInput1LowerCase.equals(&quot;final velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation2); } else if (kinematicsInput1LowerCase.equals(&quot;time&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation3); } else if (kinematicsInput1LowerCase.equals(&quot;acceleration&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation4); } else if (kinematicsInput1LowerCase.equals(&quot;initial velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation5); } break; case 3: Scanner piInput = new Scanner(System.in); System.out.println(&quot;How many digits of Pi do you want to print out?&quot;); int piDigits = piInput.nextInt(); int[] piArray = new int[]{3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8,0,3,4,8,2,5,3,4,2,1,1,7,0,6,7,9}; String piPrint = &quot;&quot;; for (int i = 0; i &lt; piDigits; i++) { if (piDigits &gt; 1 &amp;&amp; i == 0) { piPrint += piArray[i] + &quot;.&quot;; } else { piPrint += piArray[i]; } } System.out.println(piPrint); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Java Menu - 1 - NBA Player Personality Quiz 2 - Which kinematics equation should I use? 3 - Print out digits of PI 0 - Quit - 1: NBA Players Personality Test Question 1 What is your favorite basketball team? A) Chicago Bulls B) LA Lakers C) Golden State Warriors D) Oklahoma City Thunder Question 2 What is your ideal height? A) 7&#39;1 B) 6&#39;6 C) 6&#39;11 D) 6&#39;3 Question 3 What is your favorite basketball position? A) Small Forward B) Point Guard C) Center D) Shooting Guard Question 4 What is favorite basketball skill? A) Shooting B) Dunking C) Dribbling D) Defending You have completed the NBA personality quiz! You are Shaq O&#39; Neal! 0: Goodbye, World! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/31/GUI-menu.html",
            "relUrl": "/jupyter/2022/08/31/GUI-menu.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Collegeboard Topics",
            "content": "Home . AP Computer Science Principles A College Board Topics . . Unit 1: Primitive Types . . In Java, there are primitive and non-primitive data types. Some primitive data types include int, double and boolean, and some non-primitive data types include String and array. . Data Types: . int: Used for all integers. | double: Used for numbers with decimals. | boolean: Used for all boolean values, which are usually two return values that typically vary between true or false. | String: Used for all text values. | Java Input: . &quot;static&quot; or &quot;hard coded&quot; programs typically when all of the website information is displayed by default. There are no instances of user input in these types of programs. . To increase user interaction, having user inputs is important . In Java, Scanner is the utility class used for console user input . All programming has the means of formatting and combining data. An example of this is shown through concatenation (e.g. &quot;Hello,&quot; + &quot; World!&quot; = &quot;Hello, World!&quot;. The &quot;+&quot; symbol combined the two strings). . Unit 2: Using Objects . . The relationship between a class and an object is that a class is essentially a template for an object, and an object is an instance of a class. . Other College Board Topics related to this unit: . A 2D array can be used to store colors. | A control structure can be used to process menu selections. A switch can be used to run code that performs the related action of a selection. | A 1D array can be used to hold a menu. | A control structure such as if-else if-else can be used to process menu selections by running code that performs the related action of a selection. | Class inheritance. | Conditional statements, while loops, and boolean expressions. | Some Java imports are designated toward allowing user input and console output in the terminal. . The Scanner class makes an object to collect inputs / menu selections from users . The System class can be used to call static methods like System.out.print() and System.out.println() to output in the console. . The Math class can be used to call the static method Math.random() to generate a random number within a specified range. . Objects are often intended to encapsulate Frontend, Backend, Web Site control flow, Database CRUD Operations, and many more. . With Swing and AWT imports, Java has the ability to provide a Graphical User Interface (GUI) on the desktop. . Unit 3: Boolean Expressions and If Statements . . Conditional Statements: . A Boolean expression is a logical statement that can evaluate to only two values, which are usually true or false. . A Boolean expression may comprise of a combination of Boolean constants true or false. . An if else statement is a type of conditional statement that performs a specific action if it evaluates to true, and performs another specific action if it evaluates to false . An if else code block can involve the if(), else if(), and else statements. . A switch statement is similar to an if else statement, as it has an initial controlling expression and has a specific action designated for each case value, in which if the controlling expression matches the conditions of a case, the action for that case will be performed. . De Morgan&#39;s Law: . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . Unit 4: Iteration . . Iteration can include creating a loop to perform an action until a specified condition(s) is/are met. . Iteration can be used in standard arithmetic-based and String algorithms. . for and while loops are used in code to represent iterative processes. . Nesting loop and iteration statements basically involve having a loop integrated inside another loop. For example, consider an outside for loop that repeats 3 times and an inside for loop that repeats 7 times. For each iteration in the outside for loop, the inside for loop will iterate 7 times. This will result in the program iterating a total of 21 times. . A recursion loop, like the while loop and for loop, repeats itself over and over again until a certain condition is met. The uniqueness of recursion loops come from the fact that they involve a function calling itself to repeat a task. . Unit 5: Writing Classes . . The anatomy of an object typically consists of state, attributes, and behavior. An object is practically an instance of a class. . A class defines an abstract data type. Object references can be done with String variables, while instance variables contain attributes, behaviors, and data for objects. . Methods are behaviors or actions that can be done with objects, and constructors create the object itself. . The main method tests a class and contains instance variables which include attributes, fields, and properties. . Constructors are a special method for object instantiation in that is sets initial values for variables and can run methods. . A default constructor has no arguments and is used when no constructor is defined. A class can have multiple constructors. . Unit 6: Array . . In Java, arrays and ArrayLists are different data structures. . Java arrays can have primitive (e.g. int, char, float) or referenced (e.g. String, Array, classes) data types. . int[] array = new int[10]; creates an array with 10 elements with type into and value 0. . int[] array2 = {10, 9, 8, 7, 6}; is an example way of initializing an array. . Unit 7: ArrayList . . Unit 8: 2D Array . . Unit 9: Inheritance . . Unit 10: Recursion . . .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/08/27/collegeboard-topics.html",
            "relUrl": "/2022/08/27/collegeboard-topics.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Week 1 - Java Primitives Post",
            "content": "Java Primitives . import java.util.Scanner; public class primitives { public static void main(String[] args) { // int is for integers int x = 7; System.out.println(x); // double is for numbers with decimals double pi = 3.14159265358979; System.out.println(pi); // boolean has two return values, which are usually true and false boolean y = true; System.out.println(y); // String is for text values String z = &quot;Hello, World!&quot;; System.out.println(z); for (int a = 0; a &lt; 5; a++) { Scanner userInput1 = new Scanner(System.in); System.out.println(&quot;Type your first integer:&quot;); int first = userInput1.nextInt(); System.out.println(&quot;Type your second integer:&quot;); int second = userInput1.nextInt(); Scanner userInput2 = new Scanner(System.in); System.out.println(&quot;Type the desired mathematical operator:&quot;); String operator = userInput2.nextLine(); String operatorNew = operator.toLowerCase(); if (operatorNew.equals(&quot;addition&quot;)) { int sum = first + second; System.out.println(first + &quot; plus &quot; + second + &quot; equals &quot; + sum); } else if (operatorNew.equals(&quot;subtraction&quot;)) { int difference = first - second; System.out.println(first + &quot; subtracted by &quot; + second + &quot; equals &quot; + difference); } else if (operatorNew.equals(&quot;multiplication&quot;)) { int product = first * second; System.out.println(first + &quot; multiplied by &quot; + second + &quot; equals &quot; + product); } else if (operatorNew.equals(&quot;division&quot;)) { double quotient = (double) first / (double) second; System.out.println(first + &quot; divided by &quot; + second + &quot; equals &quot; + quotient); } else if (operatorNew.equals(&quot;modulation&quot;)) { int modResult = first % second; System.out.println(first + &quot; modulus &quot; + second + &quot; equals &quot; + modResult); } } } } primitives.main(null); . 7 3.14159265358979 true Hello, World! Type your first integer: Type your second integer: Type the desired mathematical operator: 7 plus 8 equals 15 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 subtracted by 1 equals 10 Type your first integer: Type your second integer: Type the desired mathematical operator: 7 multiplied by 7 equals 49 Type your first integer: Type your second integer: Type the desired mathematical operator: 121 divided by 11 equals 11.0 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 modulus 5 equals 1 . Java Compound Operators . public class javaCompound { public static void main(String[] args) { // Initial Values int x = 7; int y = 8; double a = 3.14; double b = 6.28; // The compound operators modify values x += 7; y += 8; a *= 2; b /= 2; System.out.println(x); System.out.println(y); System.out.println(a); System.out.println(b); } } javaCompound.main(null); . 14 16 6.28 3.14 . GPA Calculator . import java.util.Scanner; public class GPACalculator { public static void main(String[] args) { System.out.println(&quot;Trimester GPA Calculator&quot;); Scanner userInput = new Scanner(System.in); int sum = 0; System.out.println(&quot;Enter the number of classes this trimester or the most recent trimester with final grades:&quot;); int classes = userInput.nextInt(); System.out.println(classes + &quot; classes&quot;); System.out.println(&quot;Enter Class Grades:&quot;); for (int i = 0; i &lt;= classes; i++) { int gpa = 0; String grade = userInput.nextLine(); System.out.println(grade); if (grade.equals(&quot;A&quot;)) { gpa = 4; } else if (grade.equals(&quot;B&quot;)) { gpa = 3; } else if (grade.equals(&quot;C&quot;)) { gpa = 2; } else if (grade.equals(&quot;D&quot;)) { gpa = 1; } else if (grade.equals(&quot;F&quot;)) { gpa = 0; } sum = sum + gpa; } float gpaWhole = (float) sum/(float) classes; System.out.println(&quot;Your Overall GPA: &quot; + gpaWhole); } } GPACalculator.main(null); . Trimester GPA Calculator Enter the number of classes this trimester or the most recent trimester with final grades: 8 classes Enter Class Grades: A A B A A B A A Your Overall GPA: 3.75 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/27/Java-Primitives.html",
            "relUrl": "/jupyter/2022/08/27/Java-Primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Week 1 - Bash Post",
            "content": "python --version java --version javac --version conda --version npm --version . Python 3.9.12 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 conda 4.13.0 3.10.10 . jupyter kernelspec list . Available kernels: bash /home/dylanluo05/.local/share/jupyter/kernels/bash java /home/dylanluo05/.local/share/jupyter/kernels/java javascript /home/dylanluo05/.local/share/jupyter/kernels/javascript python3 /home/dylanluo05/.local/share/jupyter/kernels/python3 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . conda list . # packages in environment at /home/dylanluo05/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/26/My-First-Bash.html",
            "relUrl": "/jupyter/2022/08/26/My-First-Bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "My First Python Post",
            "content": "first = &quot;Hello World!&quot; print(first) . Hello World! . Jupyter Notebook seems to be working fine for Python . second = &quot;Hey, I&#39;m Dylan&quot; print(second) . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Python.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "My First Markdown Post",
            "content": "AP CSA First Markdown Post . Hey my name is Dylan Luo, and I am ready to take on the AP CSA class and its very many challenges! . Example Code Embed . &lt;h1 id = &quot;a&quot;&gt;&lt;/h1&gt; var A = document.getElementById(&quot;a&quot;); A.innerHTML = &quot;Hello World!&quot; .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/08/21/My-First-Markdown-Post.html",
            "relUrl": "/markdown/2022/08/21/My-First-Markdown-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "My First Java Post",
            "content": "String first = &quot;Hello World!&quot;; System.out.println(first); . Hello World! . Jupyter Notebook seems to be working fine for Java . String second = &quot;Hey, I&#39;m Dylan&quot;; System.out.println(second); . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Java.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "FRQ 2022 Review Question Post",
            "content": "Users of a website are asked to provide a review of the website at the end of each visit. Each review, represented by an object of the Review class, consists of an integer indication the user&#39;s rating of the website and an optional String comment field. The comment field in a Review object ends with a period (&quot;.&quot;), exclamation point (&quot;!&quot;), or letter, or is a String of length 0 if the user did not enter a comment. . a. Write the ReviewAnalysis method getAverageRating, which returns the average rating (arithmetic mean) of all elements of allReviews. . b. Write the ReviewAnalysis method collectComments, which collects and formats only comments that contain an exclamation point. The method returns an ArrayList of String objects containing copies of user comments from allReviews that contain an exclamation point, formatted as follows. An empty ArrayList is returned if no comment in allReviews contains an exclamation point. . The String inserted into the ArrayList to be returned begins with the index of Review in allReviews. | The index is immediately followed by a hyphen (&quot;-&quot;). | The hyphen is followed by a copy of the original comment. | The String must end with either a period or an exclamation point. If the original comment from allReviews does not end in either a period or an exclamation point, a period is added. | . | // Review class for initializing individual Review objects from users public class Review { private int rating; private String comment; // Review constructor for setting rating and comment values public Review(int r, String c) { rating = r; comment = c; } // Method for getting rating data from another class public int getRating() { return rating; } // Method for getting comment data from another class public String getComment() { return comment; } } // ReviewAnalysis class for taking all of the user reviews and making analyses about them public class ReviewAnalysis { private Review[] allReviews; private ArrayList&lt;String&gt; sortedComments; // Constructor for initializing the allReviews array, which contains all user Review objects public ReviewAnalysis(Review[] reviews) { allReviews = reviews; } // Method for finding the average rating given by all of the users, which it does by adding all of the ratings up, // then dividing the sum by the number of reviews public double getAverageRating() { double averageRating = 0; for (Review review : allReviews) { averageRating += review.getRating(); } averageRating /= allReviews.length; return averageRating; } // Method for sorting all of the comments that contain an exclamation point, which it does by iterating through the allReviews array, // then looping through the characters of the selected Review object&#39;s comment property, and adds the comment if it contains an exclamation point, // adding a period to the end of it if it does not already end with an exclamation point or period public ArrayList&lt;String&gt; collectComments() { sortedComments = new ArrayList&lt;String&gt;(); for (int i = 0; i &lt; allReviews.length; i++) { String comment = allReviews[i].getComment(); String finalComment = &quot;&quot;; for (int j = 0; j &lt; comment.length(); j++) { if (comment.charAt(j) == &#39;!&#39;) { finalComment += i + &quot;-&quot; + comment; if (comment.charAt(comment.length() - 1) != &#39;!&#39; &amp;&amp; comment.charAt(comment.length() - 1) != &#39;.&#39;) { finalComment += &#39;.&#39;; } break; } } sortedComments.add(finalComment); } return sortedComments; } } // Main class for presenting test cases public class Main { public static void main(String[] args) { Review firstReview = new Review(4, &quot;Good! Thx&quot;); Review secondReview = new Review(3, &quot;OK site&quot;); Review thirdReview = new Review(5, &quot;Great!&quot;); Review fourthReview = new Review(2, &quot;Poor! Bad.&quot;); Review fifthReview = new Review(3, &quot;&quot;); Review[] reviews = {firstReview, secondReview, thirdReview, fourthReview, fifthReview}; ReviewAnalysis myObj = new ReviewAnalysis(reviews); System.out.println(myObj.getAverageRating()); for (String sortedComment : myObj.collectComments()) { System.out.print(sortedComment + &quot; &quot;); } } } Main.main(null); . 3.4 0-Good! Thx. 2-Great! 3-Poor! Bad. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/03/10/FRQ-2022-Review-Question.html",
            "relUrl": "/jupyter/2022/03/10/FRQ-2022-Review-Question.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post52": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "JavaScript Soccer RapidAPI",
          "content": ". ID Country Team Name . . . . . . . . . . .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/FirstRapidAPI/",
          "relUrl": "/FirstRapidAPI/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "JavaScript Local Storage Login System",
          "content": ". . Sign In . . Username Password Sign Up . . Username Password Confirm Password .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/MyFirstJavaScript/",
          "relUrl": "/MyFirstJavaScript/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Programming Experience . JavaScript Example Basic Code: . &lt;h1 id = &quot;x&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;y&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;z&quot;&gt;&lt;/h1&gt; &lt;h1 id = &quot;w&quot;&gt;&lt;/h1&gt; var x = document.getElementById(&quot;x&quot;); a.innerHTML = &quot;JavaScript is awesome!&quot;; var y = document.getElementById(&quot;y&quot;); y.innerHTML = &quot;Python is awesome!&quot;; var z = document.getElementById(&quot;z&quot;); z.innerHTML = &quot;Java is awesome!&quot;; var w = document.getElementById(&quot;w&quot;); w.innerHTML = &quot;HTML and CSS are awesome!&quot;; /* Basic use of the DOM */ . Python Example Basic Code: . userInput = str(input(&quot;What is your favorite NBA basketball team? &quot;)) if (userInput == &quot;Chicago Bulls&quot;) { print(&quot;Your favorite basketball team is going to win the NBA championships this year&quot;) } else { print(&quot;Your favorite basketball team is going to lose to the Chicago Bulls&quot;) } . Database Example Basic Code: . /* Local Storage */ var array = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]; localStorage.setItem(&quot;arrayKey&quot;, JSON.stringify(array)); var arrayRetrieve = JSON.parse(localStorage.getItem(&quot;arrayKey&quot;)); &lt;p id = &quot;database-retrieve&quot;&gt;&lt;/p&gt; var databaseRetrieve = document.getElementById(&quot;database-retrieve&quot;); databaseRetrieve.innerHTML = &quot;&quot;; for (var i = 0; i &lt; arrayRetrieve.length; i++) { databaseRetrieve.innerHTML += arrayRetrieve[i]; } /* Firebase */ firebase.initialize({ projectName: &quot;My Project&quot; }); var database = firebase.database(); var userAnswer = prompt(&quot;What is your full name?&quot;); function welcome(userAnswer) { database.ref(userAnswer).on(&quot;value&quot;, function(data) { if (data === null) { alert(&quot;You&#39;re new here, welcome!&quot;); firebase.ref(userAnswer).set({ visitedBefore: yes }); } else { alert(&quot;Welcome back!&quot;); } }) } welcome(userAnswer); . A computer science project called Business Nexus that I started with my friends . .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "AP CSA Vocab Terms: .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}